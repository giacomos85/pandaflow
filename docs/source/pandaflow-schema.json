{
  "$defs": {
    "DataSourceConfig": {
      "properties": {
        "type": {
          "enum": [
            "csv",
            "excel",
            "json",
            "sql"
          ],
          "title": "Type",
          "type": "string"
        },
        "path": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Path to the data file or connection string",
          "title": "Path"
        },
        "table": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Table name for SQL sources",
          "title": "Table"
        },
        "query": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Optional SQL query",
          "title": "Query"
        },
        "sep": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": ",",
          "description": "CSV separator",
          "title": "Sep"
        },
        "skiprows": {
          "anyOf": [
            {
              "type": "integer"
            },
            {
              "type": "null"
            }
          ],
          "default": 0,
          "description": "Rows to skip when loading",
          "title": "Skiprows"
        }
      },
      "required": [
        "type"
      ],
      "title": "DataSourceConfig",
      "type": "object"
    },
    "ExtractConfig": {
      "properties": {
        "path": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "title": "Path"
        },
        "skiprows": {
          "anyOf": [
            {
              "type": "integer"
            },
            {
              "type": "null"
            }
          ],
          "default": 0,
          "title": "Skiprows"
        },
        "sep": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": ",",
          "title": "Sep"
        },
        "match": {
          "anyOf": [
            {
              "additionalProperties": true,
              "type": "object"
            },
            {
              "type": "null"
            }
          ],
          "default": {},
          "title": "Match"
        }
      },
      "title": "ExtractConfig",
      "type": "object"
    },
    "LoadConfig": {
      "properties": {
        "output": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "title": "Output"
        }
      },
      "title": "LoadConfig",
      "type": "object"
    },
    "PandaFlowTransformation": {
      "properties": {
        "strategy": {
          "description": "Name of the strategy used to identify and route the transformation logic.",
          "title": "Strategy",
          "type": "string"
        },
        "version": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Optional version string to track the strategy implementation or schema evolution.",
          "title": "Version"
        }
      },
      "required": [
        "strategy"
      ],
      "title": "PandaFlowTransformation",
      "type": "object"
    }
  },
  "properties": {
    "file_path": {
      "anyOf": [
        {
          "type": "string"
        },
        {
          "type": "null"
        }
      ],
      "default": null,
      "description": "Path to the config file (set at load time)",
      "title": "File Path"
    },
    "data_sources": {
      "anyOf": [
        {
          "items": {
            "$ref": "#/$defs/DataSourceConfig"
          },
          "type": "array"
        },
        {
          "type": "null"
        }
      ],
      "title": "Data Sources"
    },
    "meta": {
      "anyOf": [
        {
          "$ref": "#/$defs/ExtractConfig"
        },
        {
          "type": "null"
        }
      ],
      "default": {}
    },
    "transformations": {
      "type": "array",
      "items": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/calculate_amount:1.0.0"
          },
          {
            "$ref": "#/components/schemas/calculate_ratio:1.0.0"
          },
          {
            "$ref": "#/components/schemas/cast_columns:1.0.0"
          },
          {
            "$ref": "#/components/schemas/constant:1.0.0"
          },
          {
            "$ref": "#/components/schemas/copy:1.0.0"
          },
          {
            "$ref": "#/components/schemas/debug:1.0.0"
          },
          {
            "$ref": "#/components/schemas/drop_columns:1.0.0"
          },
          {
            "$ref": "#/components/schemas/drop_duplicates:1.0.0"
          },
          {
            "$ref": "#/components/schemas/filter:1.0.0"
          },
          {
            "$ref": "#/components/schemas/find_duplicates:1.0.0"
          },
          {
            "$ref": "#/components/schemas/hash:1.0.0"
          },
          {
            "$ref": "#/components/schemas/lookup_external:1.0.0"
          },
          {
            "$ref": "#/components/schemas/merge:1.0.0"
          },
          {
            "$ref": "#/components/schemas/merge_formula:1.0.0"
          },
          {
            "$ref": "#/components/schemas/regex:1.0.0"
          },
          {
            "$ref": "#/components/schemas/reorder_columns:1.0.0"
          },
          {
            "$ref": "#/components/schemas/replace:1.0.0"
          },
          {
            "$ref": "#/components/schemas/sort_by_column:1.0.0"
          },
          {
            "$ref": "#/components/schemas/split_column:1.0.0"
          },
          {
            "$ref": "#/components/schemas/uuid:1.0.0"
          }
        ]
      }
    },
    "load": {
      "anyOf": [
        {
          "$ref": "#/$defs/LoadConfig"
        },
        {
          "type": "null"
        }
      ],
      "default": {}
    }
  },
  "required": [
    "transformations"
  ],
  "title": "PandaFlowConfig",
  "type": "object",
  "components": {
    "schemas": {
      "calculate_amount:1.0.0": {
        "properties": {
          "strategy": {
            "const": "calculate_amount",
            "description": "strategy name, must be 'calculate_amount'",
            "title": "Strategy",
            "type": "string"
          },
          "version": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "default": null,
            "description": "Optional version string to track the strategy implementation or schema evolution.",
            "title": "Version"
          },
          "formula": {
            "description": "A pandas-compatible expression (e.g. `\"price * quantity\"`)",
            "title": "Formula",
            "type": "string"
          },
          "formatter": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "default": null,
            "description": "Optional formatter (e.g. `\"float_2dec\"`)",
            "title": "Formatter"
          },
          "field": {
            "default": null,
            "description": "The target column to store the result",
            "title": "Field",
            "type": "string"
          }
        },
        "required": [
          "strategy",
          "formula"
        ],
        "title": "CalculateAmountTransformation",
        "type": "object"
      },
      "calculate_ratio:1.0.0": {
        "properties": {
          "strategy": {
            "const": "calculate_ratio",
            "description": "Strategy identifier used to select this transformation. Must be 'calculate_ratio'.",
            "title": "Strategy",
            "type": "string"
          },
          "version": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "default": null,
            "description": "Optional version string to track the strategy implementation or schema evolution.",
            "title": "Version"
          },
          "field": {
            "description": "Name of the output column that will store the calculated ratio.",
            "title": "Field",
            "type": "string"
          },
          "numerator": {
            "description": "Name of the column to use as the numerator in the ratio calculation.",
            "title": "Numerator",
            "type": "string"
          },
          "denominator": {
            "description": "Name of the column to use as the denominator in the ratio calculation.",
            "title": "Denominator",
            "type": "string"
          },
          "round_digits": {
            "default": null,
            "description": "Optional number of digits to round the result to. If None, no rounding is applied.",
            "title": "Round Digits",
            "type": "integer"
          }
        },
        "required": [
          "strategy",
          "field",
          "numerator",
          "denominator"
        ],
        "title": "CalculateRatioTransformation",
        "type": "object"
      },
      "cast_columns:1.0.0": {
        "properties": {
          "strategy": {
            "const": "cast_columns",
            "description": "Strategy identifier used to select this transformation. Must be 'cast_columns'.",
            "example": "cast_columns",
            "title": "Strategy",
            "type": "string"
          },
          "version": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "default": null,
            "description": "Optional version string to track the strategy implementation or schema evolution.",
            "title": "Version"
          },
          "fields": {
            "description": "List of column names to cast.",
            "example": [
              "amount",
              "discount"
            ],
            "items": {
              "type": "string"
            },
            "title": "Fields",
            "type": "array"
          },
          "target_type": {
            "description": "Target type to cast each column to.",
            "enum": [
              "int",
              "float",
              "str",
              "bool"
            ],
            "example": "float",
            "title": "Target Type",
            "type": "string"
          },
          "errors": {
            "default": "raise",
            "description": "Error handling mode: 'raise' for strict, 'coerce' to convert invalid values to NaN, 'ignore' to skip errors.",
            "enum": [
              "raise",
              "coerce",
              "ignore"
            ],
            "example": "coerce",
            "title": "Errors",
            "type": "string"
          },
          "fallback": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "default": null,
            "description": "Optional fallback value to fill in for failed conversions (e.g., 0, '').",
            "example": "0",
            "title": "Fallback"
          }
        },
        "required": [
          "strategy",
          "fields",
          "target_type"
        ],
        "title": "CastColumnsTransformation",
        "type": "object"
      },
      "constant:1.0.0": {
        "properties": {
          "strategy": {
            "const": "constant",
            "description": "Strategy identifier used to select this transformation. Must be 'constant'.",
            "title": "Strategy",
            "type": "string"
          },
          "version": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "default": null,
            "description": "Optional version string to track the strategy implementation or schema evolution.",
            "title": "Version"
          },
          "field": {
            "description": "Name of the output column that will receive the constant value.",
            "title": "Field",
            "type": "string"
          },
          "value": {
            "default": "",
            "description": "Constant value to assign to the specified output column. Defaults to an empty string.",
            "title": "Value",
            "type": "string"
          }
        },
        "required": [
          "strategy",
          "field"
        ],
        "title": "ConstantTransformation",
        "type": "object"
      },
      "copy:1.0.0": {
        "properties": {
          "strategy": {
            "const": "copy",
            "description": "Strategy identifier used to select this transformation. Must be 'copy'.",
            "title": "Strategy",
            "type": "string"
          },
          "version": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "default": null,
            "description": "Optional version string to track the strategy implementation or schema evolution.",
            "title": "Version"
          },
          "field": {
            "description": "Name of the output column that will receive the copied or transformed value.",
            "title": "Field",
            "type": "string"
          },
          "source": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "default": null,
            "description": "Name of the source column to copy from. If None, the field will be filled using 'fillna' or left empty.",
            "title": "Source"
          },
          "fillna": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "default": null,
            "description": "Optional fallback value to use if the source column is missing or contains nulls.",
            "title": "Fillna"
          },
          "parser": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "default": null,
            "description": "Optional parser function name to apply to the source value before copying.",
            "title": "Parser"
          },
          "formatter": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "default": null,
            "description": "Optional formatter function name to apply after parsing, before assigning to the output column.",
            "title": "Formatter"
          }
        },
        "required": [
          "strategy",
          "field"
        ],
        "title": "CopyTransformation",
        "type": "object"
      },
      "debug:1.0.0": {
        "properties": {
          "strategy": {
            "const": "debug",
            "description": "Strategy identifier used to select this transformation. Must be 'debug'.",
            "title": "Strategy",
            "type": "string"
          },
          "version": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "default": null,
            "description": "Optional version string to track the strategy implementation or schema evolution.",
            "title": "Version"
          }
        },
        "required": [
          "strategy"
        ],
        "title": "DebugTransformation",
        "type": "object"
      },
      "drop_columns:1.0.0": {
        "properties": {
          "strategy": {
            "const": "drop_columns",
            "description": "Strategy identifier used to select this transformation. Must be 'drop_columns'.",
            "title": "Strategy",
            "type": "string"
          },
          "version": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "default": null,
            "description": "Optional version string to track the strategy implementation or schema evolution.",
            "title": "Version"
          },
          "columns": {
            "description": "List of column names to drop from the DataFrame. All names must be strings.",
            "items": {
              "type": "string"
            },
            "title": "Columns",
            "type": "array"
          },
          "errors": {
            "default": "raise",
            "description": "Behavior when a specified column is missing. Use 'raise' to throw an error or 'ignore' to skip silently.",
            "title": "Errors",
            "type": "string"
          }
        },
        "required": [
          "strategy",
          "columns"
        ],
        "title": "DropColumnsTransformation",
        "type": "object"
      },
      "drop_duplicates:1.0.0": {
        "properties": {
          "strategy": {
            "const": "drop_duplicates",
            "description": "Strategy identifier used to select this transformation. Must be 'drop_duplicates'.",
            "title": "Strategy",
            "type": "string"
          },
          "version": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "default": null,
            "description": "Optional version string to track the strategy implementation or schema evolution.",
            "title": "Version"
          },
          "subset": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "default": null,
            "description": "Optional list of column names to consider when identifying duplicates. If None, all columns are used.",
            "title": "Subset"
          },
          "keep": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "default": "first",
            "description": "Determines which duplicate to keep: 'first', 'last', or False to drop all duplicates.",
            "title": "Keep"
          },
          "reset_index": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "default": false,
            "description": "Whether to reset the DataFrame index after dropping duplicates. Defaults to False.",
            "title": "Reset Index"
          }
        },
        "required": [
          "strategy"
        ],
        "title": "DropDuplicatesTransformation",
        "type": "object"
      },
      "filter:1.0.0": {
        "properties": {
          "strategy": {
            "const": "filter",
            "description": "Strategy identifier used to select this transformation. Must be 'filter'.",
            "title": "Strategy",
            "type": "string"
          },
          "version": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "default": null,
            "description": "Optional version string to track the strategy implementation or schema evolution.",
            "title": "Version"
          },
          "formula": {
            "description": "Filtering expression to evaluate. Should be a valid pandas-compatible formula (e.g., 'value > 10').",
            "title": "Formula",
            "type": "string"
          },
          "formatter": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "default": null,
            "description": "Optional formatter function name to apply to the field before evaluating the formula.",
            "title": "Formatter"
          }
        },
        "required": [
          "strategy",
          "formula"
        ],
        "title": "FilterByFormulaTransformation",
        "type": "object"
      },
      "find_duplicates:1.0.0": {
        "properties": {
          "strategy": {
            "const": "find_duplicates",
            "description": "Strategy identifier used to select this transformation. Must be 'find_duplicates'.",
            "title": "Strategy",
            "type": "string"
          },
          "version": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "default": null,
            "description": "Optional version string to track the strategy implementation or schema evolution.",
            "title": "Version"
          },
          "subset": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "default": null,
            "description": "Optional list of column names to consider when identifying duplicates. If None, all columns are used.",
            "title": "Subset"
          },
          "keep": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "default": "first",
            "description": "Determines which duplicate to mark as retained: 'first', 'last', or False to mark all duplicates.",
            "title": "Keep"
          },
          "reset_index": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "default": false,
            "description": "Whether to reset the DataFrame index after identifying duplicates. Defaults to False.",
            "title": "Reset Index"
          }
        },
        "required": [
          "strategy"
        ],
        "title": "FindDuplicatesTransformation",
        "type": "object"
      },
      "hash:1.0.0": {
        "properties": {
          "strategy": {
            "const": "hash",
            "description": "Strategy identifier used to select this transformation. Must be 'hash'.",
            "title": "Strategy",
            "type": "string"
          },
          "version": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "default": null,
            "description": "Optional version string to track the strategy implementation or schema evolution.",
            "title": "Version"
          },
          "field": {
            "description": "Name of the output column that will store the computed hash value.",
            "title": "Field",
            "type": "string"
          },
          "source": {
            "description": "List of column names whose values will be combined and hashed.",
            "items": {
              "type": "string"
            },
            "title": "Source",
            "type": "array"
          },
          "function": {
            "description": "Name of the hash function to apply (e.g., 'md5', 'sha256'). Must be supported by the hashing backend.",
            "title": "Function",
            "type": "string"
          }
        },
        "required": [
          "strategy",
          "field",
          "source",
          "function"
        ],
        "title": "HashTransformation",
        "type": "object"
      },
      "lookup_external:1.0.0": {
        "properties": {
          "strategy": {
            "const": "lookup_external",
            "description": "Strategy identifier used to select this transformation. Must be 'lookup_external'.",
            "title": "Strategy",
            "type": "string"
          },
          "version": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "default": null,
            "description": "Optional version string to track the strategy implementation or schema evolution.",
            "title": "Version"
          },
          "field": {
            "description": "Name of the output column that will store the looked-up value.",
            "title": "Field",
            "type": "string"
          },
          "source": {
            "description": "Name of the column in the current DataFrame whose values will be used as lookup keys.",
            "title": "Source",
            "type": "string"
          },
          "file": {
            "description": "Path to the external file containing the lookup table (e.g., CSV or JSON).",
            "title": "File",
            "type": "string"
          },
          "key": {
            "description": "Name of the column in the external file that contains the lookup keys.",
            "title": "Key",
            "type": "string"
          },
          "value": {
            "description": "Name of the column in the external file that contains the values to assign.",
            "title": "Value",
            "type": "string"
          },
          "not_found": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "default": null,
            "description": "Optional fallback value to assign when a key is not found in the external file. If None, missing keys will result in nulls.",
            "title": "Not Found"
          }
        },
        "required": [
          "strategy",
          "field",
          "source",
          "file",
          "key",
          "value"
        ],
        "title": "LookupExternalTransformation",
        "type": "object"
      },
      "merge:1.0.0": {
        "properties": {
          "strategy": {
            "const": "merge",
            "description": "Strategy identifier used to select this transformation. Must be 'merge'.",
            "title": "Strategy",
            "type": "string"
          },
          "version": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "default": null,
            "description": "Optional version string to track the strategy implementation or schema evolution.",
            "title": "Version"
          },
          "field": {
            "description": "Name of the output column that will store the merged result.",
            "title": "Field",
            "type": "string"
          },
          "source": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            ],
            "description": "Single column name or list of column names whose values will be merged.",
            "title": "Source"
          },
          "replace": {
            "anyOf": [
              {
                "additionalProperties": {
                  "type": "string"
                },
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "default": null,
            "description": "Optional dictionary of string replacements to apply before merging. Keys are substrings to replace; values are their replacements.",
            "title": "Replace"
          },
          "separator": {
            "default": " ",
            "description": "String used to separate values when merging multiple columns. Defaults to a single space.",
            "title": "Separator",
            "type": "string"
          }
        },
        "required": [
          "strategy",
          "field",
          "source"
        ],
        "title": "MergeTransformation",
        "type": "object"
      },
      "merge_formula:1.0.0": {
        "properties": {
          "strategy": {
            "const": "merge_formula",
            "description": "Strategy identifier used to select this transformation. Must be 'merge_formula'.",
            "title": "Strategy",
            "type": "string"
          },
          "version": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "default": null,
            "description": "Optional version string to track the strategy implementation or schema evolution.",
            "title": "Version"
          },
          "field": {
            "description": "Name of the output column that will store the result of the formula or merged values.",
            "title": "Field",
            "type": "string"
          },
          "formula": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "default": null,
            "description": "Optional pandas-compatible formula to compute the output value. If provided, overrides source/merge behavior.",
            "title": "Formula"
          },
          "formatter": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "default": null,
            "description": "Optional formatter function name to apply to the result after formula or merge.",
            "title": "Formatter"
          },
          "source": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "default": null,
            "description": "Optional list of column names to merge if no formula is provided.",
            "title": "Source"
          },
          "separator": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "default": " ",
            "description": "String used to separate values when merging multiple columns. Defaults to a single space.",
            "title": "Separator"
          }
        },
        "required": [
          "strategy",
          "field"
        ],
        "title": "MergeFormulaTransformation",
        "type": "object"
      },
      "regex:1.0.0": {
        "properties": {
          "strategy": {
            "const": "regex",
            "description": "Strategy identifier used to select this transformation. Must be 'regex'.",
            "title": "Strategy",
            "type": "string"
          },
          "version": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "default": null,
            "description": "Optional version string to track the strategy implementation or schema evolution.",
            "title": "Version"
          },
          "field": {
            "description": "Name of the output column that will store the extracted or transformed value.",
            "title": "Field",
            "type": "string"
          },
          "source": {
            "description": "Name of the source column whose values will be processed using the regular expression.",
            "title": "Source",
            "type": "string"
          },
          "regex": {
            "description": "Regular expression pattern to apply to the source column's values.",
            "title": "Regex",
            "type": "string"
          },
          "group_id": {
            "description": "Index of the capturing group to extract from the regex match.",
            "title": "Group Id",
            "type": "integer"
          },
          "replace": {
            "anyOf": [
              {
                "additionalProperties": {
                  "type": "string"
                },
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "default": null,
            "description": "Optional dictionary of string replacements to apply after regex extraction. Keys are substrings to replace; values are their replacements.",
            "title": "Replace"
          },
          "formatter": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "default": null,
            "description": "Optional formatter function name to apply after regex and replacement steps.",
            "title": "Formatter"
          }
        },
        "required": [
          "strategy",
          "field",
          "source",
          "regex",
          "group_id"
        ],
        "title": "RegexTransformation",
        "type": "object"
      },
      "reorder_columns:1.0.0": {
        "properties": {
          "strategy": {
            "const": "reorder_columns",
            "description": "Strategy identifier used to select this transformation. Must be 'reorder_columns'.",
            "title": "Strategy",
            "type": "string"
          },
          "version": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "default": null,
            "description": "Optional version string to track the strategy implementation or schema evolution.",
            "title": "Version"
          },
          "columns": {
            "description": "List of column names specifying the desired order. All listed columns must exist in the DataFrame.",
            "items": {
              "type": "string"
            },
            "title": "Columns",
            "type": "array"
          }
        },
        "required": [
          "strategy",
          "columns"
        ],
        "title": "ReorderColumnsTransformation",
        "type": "object"
      },
      "replace:1.0.0": {
        "properties": {
          "strategy": {
            "const": "replace",
            "description": "Strategy identifier used to select this transformation. Must be 'replace'.",
            "title": "Strategy",
            "type": "string"
          },
          "version": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "default": null,
            "description": "Optional version string to track the strategy implementation or schema evolution.",
            "title": "Version"
          },
          "field": {
            "description": "Name of the column in which the replacement will be performed.",
            "title": "Field",
            "type": "string"
          },
          "find": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "number"
              }
            ],
            "description": "Value to search for in the specified column. Can be a string or numeric value.",
            "title": "Find"
          },
          "replace": {
            "description": "Replacement value to assign when a match with 'find' is found.",
            "title": "Replace",
            "type": "string"
          }
        },
        "required": [
          "strategy",
          "field",
          "find",
          "replace"
        ],
        "title": "ReplaceTransformation",
        "type": "object"
      },
      "sort_by_column:1.0.0": {
        "properties": {
          "strategy": {
            "const": "sort_by_column",
            "description": "Strategy identifier used to select this transformation. Must be 'sort_by_column'.",
            "title": "Strategy",
            "type": "string"
          },
          "version": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "default": null,
            "description": "Optional version string to track the strategy implementation or schema evolution.",
            "title": "Version"
          },
          "columns": {
            "description": "List of column names to sort by, in order of precedence.",
            "items": {
              "type": "string"
            },
            "title": "Columns",
            "type": "array"
          },
          "ascending": {
            "anyOf": [
              {
                "items": {
                  "type": "boolean"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "default": null,
            "description": "List of booleans indicating sort direction for each column. True for ascending, False for descending. If None, defaults to ascending for all.",
            "title": "Ascending"
          },
          "na_position": {
            "default": "last",
            "description": "Position for NaN values in the sort order. 'first' places NaNs at the top, 'last' at the bottom.",
            "enum": [
              "first",
              "last"
            ],
            "title": "Na Position",
            "type": "string"
          }
        },
        "required": [
          "strategy",
          "columns"
        ],
        "title": "SortByColumnTransformation",
        "type": "object"
      },
      "split_column:1.0.0": {
        "properties": {
          "strategy": {
            "const": "split_column",
            "description": "Strategy identifier used to select this transformation. Must be 'split_column'.",
            "title": "Strategy",
            "type": "string"
          },
          "version": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "default": null,
            "description": "Optional version string to track the strategy implementation or schema evolution.",
            "title": "Version"
          },
          "column": {
            "description": "Name of the column whose string values will be split using the specified delimiter.",
            "title": "Column",
            "type": "string"
          },
          "delimiter": {
            "description": "Delimiter string used to split the column values (e.g., ',' or '|').",
            "title": "Delimiter",
            "type": "string"
          },
          "maxsplit": {
            "default": -1,
            "description": "Maximum number of splits to perform. Use -1 for no limit.",
            "title": "Maxsplit",
            "type": "integer"
          },
          "prefix": {
            "default": "split",
            "description": "Prefix to use when naming the new columns created from the split operation.",
            "title": "Prefix",
            "type": "string"
          },
          "drop_original": {
            "default": false,
            "description": "Whether to drop the original column after splitting. Defaults to False.",
            "title": "Drop Original",
            "type": "boolean"
          }
        },
        "required": [
          "strategy",
          "column",
          "delimiter"
        ],
        "title": "SplitColumnTransformation",
        "type": "object"
      },
      "uuid:1.0.0": {
        "properties": {
          "strategy": {
            "const": "uuid",
            "description": "Strategy identifier used to select this transformation. Must be 'uuid'.",
            "title": "Strategy",
            "type": "string"
          },
          "version": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "default": null,
            "description": "Optional version string to track the strategy implementation or schema evolution.",
            "title": "Version"
          },
          "field": {
            "description": "Name of the output column that will store the generated UUID value.",
            "title": "Field",
            "type": "string"
          }
        },
        "required": [
          "strategy",
          "field"
        ],
        "title": "UUIDTransformation",
        "type": "object"
      }
    }
  }
}