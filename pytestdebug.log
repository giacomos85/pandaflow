versions pytest-8.4.2, python-3.13.1.final.0
invocation_dir=/home/jack/dev/mypf/mypf_new/pandaflow
cwd=/home/jack/dev/mypf/mypf_new/pandaflow
args=('--cov=pandaflow', '.', '--debug')

  pytest_cmdline_main [hook]
      config: <_pytest.config.Config object at 0x750178ba7b60>
    pytest_plugin_registered [hook]
        plugin: <Session  exitstatus='<UNSET>' testsfailed=0 testscollected=0>
        plugin_name: session
        manager: <_pytest.config.PytestPluginManager object at 0x750178ba56a0>
    finish pytest_plugin_registered --> [] [hook]
    pytest_configure [hook]
        config: <_pytest.config.Config object at 0x750178ba7b60>
      pytest_plugin_registered [hook]
          plugin: <_pytest.cacheprovider.LFPlugin object at 0x750177da8440>
          plugin_name: lfplugin
          manager: <_pytest.config.PytestPluginManager object at 0x750178ba56a0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.cacheprovider.NFPlugin object at 0x750177da8d70>
          plugin_name: nfplugin
          manager: <_pytest.config.PytestPluginManager object at 0x750178ba56a0>
      finish pytest_plugin_registered --> [] [hook]
    early skip of rewriting module: faulthandler [assertion]
      pytest_plugin_registered [hook]
          plugin: <class '_pytest.legacypath.LegacyTmpdirPlugin'>
          plugin_name: legacypath-tmpdir
          manager: <_pytest.config.PytestPluginManager object at 0x750178ba56a0>
      finish pytest_plugin_registered --> [] [hook]
    early skip of rewriting module: pdb [assertion]
    early skip of rewriting module: cmd [assertion]
    early skip of rewriting module: code [assertion]
    early skip of rewriting module: codeop [assertion]
    early skip of rewriting module: rlcompleter [assertion]
    early skip of rewriting module: readline [assertion]
      pytest_plugin_registered [hook]
          plugin: <_pytest.config.PytestPluginManager object at 0x750178ba56a0>
          plugin_name: 128649180894880
          manager: <_pytest.config.PytestPluginManager object at 0x750178ba56a0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.config.Config object at 0x750178ba7b60>
          plugin_name: pytestconfig
          manager: <_pytest.config.PytestPluginManager object at 0x750178ba56a0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.mark' from '/home/jack/dev/mypf/mypf_hledger/pandaflow/.venv/lib/python3.13/site-packages/_pytest/mark/__init__.py'>
          plugin_name: mark
          manager: <_pytest.config.PytestPluginManager object at 0x750178ba56a0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.main' from '/home/jack/dev/mypf/mypf_hledger/pandaflow/.venv/lib/python3.13/site-packages/_pytest/main.py'>
          plugin_name: main
          manager: <_pytest.config.PytestPluginManager object at 0x750178ba56a0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.runner' from '/home/jack/dev/mypf/mypf_hledger/pandaflow/.venv/lib/python3.13/site-packages/_pytest/runner.py'>
          plugin_name: runner
          manager: <_pytest.config.PytestPluginManager object at 0x750178ba56a0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.fixtures' from '/home/jack/dev/mypf/mypf_hledger/pandaflow/.venv/lib/python3.13/site-packages/_pytest/fixtures.py'>
          plugin_name: fixtures
          manager: <_pytest.config.PytestPluginManager object at 0x750178ba56a0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.helpconfig' from '/home/jack/dev/mypf/mypf_hledger/pandaflow/.venv/lib/python3.13/site-packages/_pytest/helpconfig.py'>
          plugin_name: helpconfig
          manager: <_pytest.config.PytestPluginManager object at 0x750178ba56a0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.python' from '/home/jack/dev/mypf/mypf_hledger/pandaflow/.venv/lib/python3.13/site-packages/_pytest/python.py'>
          plugin_name: python
          manager: <_pytest.config.PytestPluginManager object at 0x750178ba56a0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.terminal' from '/home/jack/dev/mypf/mypf_hledger/pandaflow/.venv/lib/python3.13/site-packages/_pytest/terminal.py'>
          plugin_name: terminal
          manager: <_pytest.config.PytestPluginManager object at 0x750178ba56a0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.debugging' from '/home/jack/dev/mypf/mypf_hledger/pandaflow/.venv/lib/python3.13/site-packages/_pytest/debugging.py'>
          plugin_name: debugging
          manager: <_pytest.config.PytestPluginManager object at 0x750178ba56a0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.unittest' from '/home/jack/dev/mypf/mypf_hledger/pandaflow/.venv/lib/python3.13/site-packages/_pytest/unittest.py'>
          plugin_name: unittest
          manager: <_pytest.config.PytestPluginManager object at 0x750178ba56a0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.capture' from '/home/jack/dev/mypf/mypf_hledger/pandaflow/.venv/lib/python3.13/site-packages/_pytest/capture.py'>
          plugin_name: capture
          manager: <_pytest.config.PytestPluginManager object at 0x750178ba56a0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.skipping' from '/home/jack/dev/mypf/mypf_hledger/pandaflow/.venv/lib/python3.13/site-packages/_pytest/skipping.py'>
          plugin_name: skipping
          manager: <_pytest.config.PytestPluginManager object at 0x750178ba56a0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.legacypath' from '/home/jack/dev/mypf/mypf_hledger/pandaflow/.venv/lib/python3.13/site-packages/_pytest/legacypath.py'>
          plugin_name: legacypath
          manager: <_pytest.config.PytestPluginManager object at 0x750178ba56a0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.tmpdir' from '/home/jack/dev/mypf/mypf_hledger/pandaflow/.venv/lib/python3.13/site-packages/_pytest/tmpdir.py'>
          plugin_name: tmpdir
          manager: <_pytest.config.PytestPluginManager object at 0x750178ba56a0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.monkeypatch' from '/home/jack/dev/mypf/mypf_hledger/pandaflow/.venv/lib/python3.13/site-packages/_pytest/monkeypatch.py'>
          plugin_name: monkeypatch
          manager: <_pytest.config.PytestPluginManager object at 0x750178ba56a0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.recwarn' from '/home/jack/dev/mypf/mypf_hledger/pandaflow/.venv/lib/python3.13/site-packages/_pytest/recwarn.py'>
          plugin_name: recwarn
          manager: <_pytest.config.PytestPluginManager object at 0x750178ba56a0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.pastebin' from '/home/jack/dev/mypf/mypf_hledger/pandaflow/.venv/lib/python3.13/site-packages/_pytest/pastebin.py'>
          plugin_name: pastebin
          manager: <_pytest.config.PytestPluginManager object at 0x750178ba56a0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.assertion' from '/home/jack/dev/mypf/mypf_hledger/pandaflow/.venv/lib/python3.13/site-packages/_pytest/assertion/__init__.py'>
          plugin_name: assertion
          manager: <_pytest.config.PytestPluginManager object at 0x750178ba56a0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.junitxml' from '/home/jack/dev/mypf/mypf_hledger/pandaflow/.venv/lib/python3.13/site-packages/_pytest/junitxml.py'>
          plugin_name: junitxml
          manager: <_pytest.config.PytestPluginManager object at 0x750178ba56a0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.doctest' from '/home/jack/dev/mypf/mypf_hledger/pandaflow/.venv/lib/python3.13/site-packages/_pytest/doctest.py'>
          plugin_name: doctest
          manager: <_pytest.config.PytestPluginManager object at 0x750178ba56a0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.cacheprovider' from '/home/jack/dev/mypf/mypf_hledger/pandaflow/.venv/lib/python3.13/site-packages/_pytest/cacheprovider.py'>
          plugin_name: cacheprovider
          manager: <_pytest.config.PytestPluginManager object at 0x750178ba56a0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.freeze_support' from '/home/jack/dev/mypf/mypf_hledger/pandaflow/.venv/lib/python3.13/site-packages/_pytest/freeze_support.py'>
          plugin_name: freeze_support
          manager: <_pytest.config.PytestPluginManager object at 0x750178ba56a0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.setuponly' from '/home/jack/dev/mypf/mypf_hledger/pandaflow/.venv/lib/python3.13/site-packages/_pytest/setuponly.py'>
          plugin_name: setuponly
          manager: <_pytest.config.PytestPluginManager object at 0x750178ba56a0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.setupplan' from '/home/jack/dev/mypf/mypf_hledger/pandaflow/.venv/lib/python3.13/site-packages/_pytest/setupplan.py'>
          plugin_name: setupplan
          manager: <_pytest.config.PytestPluginManager object at 0x750178ba56a0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.stepwise' from '/home/jack/dev/mypf/mypf_hledger/pandaflow/.venv/lib/python3.13/site-packages/_pytest/stepwise.py'>
          plugin_name: stepwise
          manager: <_pytest.config.PytestPluginManager object at 0x750178ba56a0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.unraisableexception' from '/home/jack/dev/mypf/mypf_hledger/pandaflow/.venv/lib/python3.13/site-packages/_pytest/unraisableexception.py'>
          plugin_name: unraisableexception
          manager: <_pytest.config.PytestPluginManager object at 0x750178ba56a0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.threadexception' from '/home/jack/dev/mypf/mypf_hledger/pandaflow/.venv/lib/python3.13/site-packages/_pytest/threadexception.py'>
          plugin_name: threadexception
          manager: <_pytest.config.PytestPluginManager object at 0x750178ba56a0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.warnings' from '/home/jack/dev/mypf/mypf_hledger/pandaflow/.venv/lib/python3.13/site-packages/_pytest/warnings.py'>
          plugin_name: warnings
          manager: <_pytest.config.PytestPluginManager object at 0x750178ba56a0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.logging' from '/home/jack/dev/mypf/mypf_hledger/pandaflow/.venv/lib/python3.13/site-packages/_pytest/logging.py'>
          plugin_name: logging
          manager: <_pytest.config.PytestPluginManager object at 0x750178ba56a0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.reports' from '/home/jack/dev/mypf/mypf_hledger/pandaflow/.venv/lib/python3.13/site-packages/_pytest/reports.py'>
          plugin_name: reports
          manager: <_pytest.config.PytestPluginManager object at 0x750178ba56a0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.faulthandler' from '/home/jack/dev/mypf/mypf_hledger/pandaflow/.venv/lib/python3.13/site-packages/_pytest/faulthandler.py'>
          plugin_name: faulthandler
          manager: <_pytest.config.PytestPluginManager object at 0x750178ba56a0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module 'pytest_cov.plugin' from '/home/jack/dev/mypf/mypf_hledger/pandaflow/.venv/lib/python3.13/site-packages/pytest_cov/plugin.py'>
          plugin_name: pytest_cov
          manager: <_pytest.config.PytestPluginManager object at 0x750178ba56a0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <CaptureManager _method='fd' _global_capturing=<MultiCapture out=<FDCapture 1 oldfd=5 _state='suspended' tmpfile=<EncodedFile name="<_io.FileIO name=6 mode='rb+' closefd=True>" mode='r+' encoding='utf-8'>> err=<FDCapture 2 oldfd=7 _state='suspended' tmpfile=<EncodedFile name="<_io.FileIO name=8 mode='rb+' closefd=True>" mode='r+' encoding='utf-8'>> in_=<FDCapture 0 oldfd=3 _state='started' tmpfile=<_io.TextIOWrapper name='/dev/null' mode='r' encoding='utf-8'>> _state='suspended' _in_suspended=False> _capture_fixture=None>
          plugin_name: capturemanager
          manager: <_pytest.config.PytestPluginManager object at 0x750178ba56a0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <pytest_cov.plugin.CovPlugin object at 0x7501789e67b0>
          plugin_name: _cov
          manager: <_pytest.config.PytestPluginManager object at 0x750178ba56a0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <Session  exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
          plugin_name: session
          manager: <_pytest.config.PytestPluginManager object at 0x750178ba56a0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.cacheprovider.LFPlugin object at 0x750177da8440>
          plugin_name: lfplugin
          manager: <_pytest.config.PytestPluginManager object at 0x750178ba56a0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.cacheprovider.NFPlugin object at 0x750177da8d70>
          plugin_name: nfplugin
          manager: <_pytest.config.PytestPluginManager object at 0x750178ba56a0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <class '_pytest.legacypath.LegacyTmpdirPlugin'>
          plugin_name: legacypath-tmpdir
          manager: <_pytest.config.PytestPluginManager object at 0x750178ba56a0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.terminal.TerminalReporter object at 0x7501781e70e0>
          plugin_name: terminalreporter
          manager: <_pytest.config.PytestPluginManager object at 0x750178ba56a0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.logging.LoggingPlugin object at 0x750177daae40>
          plugin_name: logging-plugin
          manager: <_pytest.config.PytestPluginManager object at 0x750178ba56a0>
      finish pytest_plugin_registered --> [] [hook]
    finish pytest_configure --> [] [hook]
    pytest_sessionstart [hook]
        session: <Session  exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
      pytest_plugin_registered [hook]
          plugin: <_pytest.config.PytestPluginManager object at 0x750178ba56a0>
          plugin_name: 128649180894880
          manager: <_pytest.config.PytestPluginManager object at 0x750178ba56a0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.config.Config object at 0x750178ba7b60>
          plugin_name: pytestconfig
          manager: <_pytest.config.PytestPluginManager object at 0x750178ba56a0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.mark' from '/home/jack/dev/mypf/mypf_hledger/pandaflow/.venv/lib/python3.13/site-packages/_pytest/mark/__init__.py'>
          plugin_name: mark
          manager: <_pytest.config.PytestPluginManager object at 0x750178ba56a0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.main' from '/home/jack/dev/mypf/mypf_hledger/pandaflow/.venv/lib/python3.13/site-packages/_pytest/main.py'>
          plugin_name: main
          manager: <_pytest.config.PytestPluginManager object at 0x750178ba56a0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.runner' from '/home/jack/dev/mypf/mypf_hledger/pandaflow/.venv/lib/python3.13/site-packages/_pytest/runner.py'>
          plugin_name: runner
          manager: <_pytest.config.PytestPluginManager object at 0x750178ba56a0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.fixtures' from '/home/jack/dev/mypf/mypf_hledger/pandaflow/.venv/lib/python3.13/site-packages/_pytest/fixtures.py'>
          plugin_name: fixtures
          manager: <_pytest.config.PytestPluginManager object at 0x750178ba56a0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.helpconfig' from '/home/jack/dev/mypf/mypf_hledger/pandaflow/.venv/lib/python3.13/site-packages/_pytest/helpconfig.py'>
          plugin_name: helpconfig
          manager: <_pytest.config.PytestPluginManager object at 0x750178ba56a0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.python' from '/home/jack/dev/mypf/mypf_hledger/pandaflow/.venv/lib/python3.13/site-packages/_pytest/python.py'>
          plugin_name: python
          manager: <_pytest.config.PytestPluginManager object at 0x750178ba56a0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.terminal' from '/home/jack/dev/mypf/mypf_hledger/pandaflow/.venv/lib/python3.13/site-packages/_pytest/terminal.py'>
          plugin_name: terminal
          manager: <_pytest.config.PytestPluginManager object at 0x750178ba56a0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.debugging' from '/home/jack/dev/mypf/mypf_hledger/pandaflow/.venv/lib/python3.13/site-packages/_pytest/debugging.py'>
          plugin_name: debugging
          manager: <_pytest.config.PytestPluginManager object at 0x750178ba56a0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.unittest' from '/home/jack/dev/mypf/mypf_hledger/pandaflow/.venv/lib/python3.13/site-packages/_pytest/unittest.py'>
          plugin_name: unittest
          manager: <_pytest.config.PytestPluginManager object at 0x750178ba56a0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.capture' from '/home/jack/dev/mypf/mypf_hledger/pandaflow/.venv/lib/python3.13/site-packages/_pytest/capture.py'>
          plugin_name: capture
          manager: <_pytest.config.PytestPluginManager object at 0x750178ba56a0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.skipping' from '/home/jack/dev/mypf/mypf_hledger/pandaflow/.venv/lib/python3.13/site-packages/_pytest/skipping.py'>
          plugin_name: skipping
          manager: <_pytest.config.PytestPluginManager object at 0x750178ba56a0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.legacypath' from '/home/jack/dev/mypf/mypf_hledger/pandaflow/.venv/lib/python3.13/site-packages/_pytest/legacypath.py'>
          plugin_name: legacypath
          manager: <_pytest.config.PytestPluginManager object at 0x750178ba56a0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.tmpdir' from '/home/jack/dev/mypf/mypf_hledger/pandaflow/.venv/lib/python3.13/site-packages/_pytest/tmpdir.py'>
          plugin_name: tmpdir
          manager: <_pytest.config.PytestPluginManager object at 0x750178ba56a0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.monkeypatch' from '/home/jack/dev/mypf/mypf_hledger/pandaflow/.venv/lib/python3.13/site-packages/_pytest/monkeypatch.py'>
          plugin_name: monkeypatch
          manager: <_pytest.config.PytestPluginManager object at 0x750178ba56a0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.recwarn' from '/home/jack/dev/mypf/mypf_hledger/pandaflow/.venv/lib/python3.13/site-packages/_pytest/recwarn.py'>
          plugin_name: recwarn
          manager: <_pytest.config.PytestPluginManager object at 0x750178ba56a0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.pastebin' from '/home/jack/dev/mypf/mypf_hledger/pandaflow/.venv/lib/python3.13/site-packages/_pytest/pastebin.py'>
          plugin_name: pastebin
          manager: <_pytest.config.PytestPluginManager object at 0x750178ba56a0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.assertion' from '/home/jack/dev/mypf/mypf_hledger/pandaflow/.venv/lib/python3.13/site-packages/_pytest/assertion/__init__.py'>
          plugin_name: assertion
          manager: <_pytest.config.PytestPluginManager object at 0x750178ba56a0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.junitxml' from '/home/jack/dev/mypf/mypf_hledger/pandaflow/.venv/lib/python3.13/site-packages/_pytest/junitxml.py'>
          plugin_name: junitxml
          manager: <_pytest.config.PytestPluginManager object at 0x750178ba56a0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.doctest' from '/home/jack/dev/mypf/mypf_hledger/pandaflow/.venv/lib/python3.13/site-packages/_pytest/doctest.py'>
          plugin_name: doctest
          manager: <_pytest.config.PytestPluginManager object at 0x750178ba56a0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.cacheprovider' from '/home/jack/dev/mypf/mypf_hledger/pandaflow/.venv/lib/python3.13/site-packages/_pytest/cacheprovider.py'>
          plugin_name: cacheprovider
          manager: <_pytest.config.PytestPluginManager object at 0x750178ba56a0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.freeze_support' from '/home/jack/dev/mypf/mypf_hledger/pandaflow/.venv/lib/python3.13/site-packages/_pytest/freeze_support.py'>
          plugin_name: freeze_support
          manager: <_pytest.config.PytestPluginManager object at 0x750178ba56a0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.setuponly' from '/home/jack/dev/mypf/mypf_hledger/pandaflow/.venv/lib/python3.13/site-packages/_pytest/setuponly.py'>
          plugin_name: setuponly
          manager: <_pytest.config.PytestPluginManager object at 0x750178ba56a0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.setupplan' from '/home/jack/dev/mypf/mypf_hledger/pandaflow/.venv/lib/python3.13/site-packages/_pytest/setupplan.py'>
          plugin_name: setupplan
          manager: <_pytest.config.PytestPluginManager object at 0x750178ba56a0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.stepwise' from '/home/jack/dev/mypf/mypf_hledger/pandaflow/.venv/lib/python3.13/site-packages/_pytest/stepwise.py'>
          plugin_name: stepwise
          manager: <_pytest.config.PytestPluginManager object at 0x750178ba56a0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.unraisableexception' from '/home/jack/dev/mypf/mypf_hledger/pandaflow/.venv/lib/python3.13/site-packages/_pytest/unraisableexception.py'>
          plugin_name: unraisableexception
          manager: <_pytest.config.PytestPluginManager object at 0x750178ba56a0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.threadexception' from '/home/jack/dev/mypf/mypf_hledger/pandaflow/.venv/lib/python3.13/site-packages/_pytest/threadexception.py'>
          plugin_name: threadexception
          manager: <_pytest.config.PytestPluginManager object at 0x750178ba56a0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.warnings' from '/home/jack/dev/mypf/mypf_hledger/pandaflow/.venv/lib/python3.13/site-packages/_pytest/warnings.py'>
          plugin_name: warnings
          manager: <_pytest.config.PytestPluginManager object at 0x750178ba56a0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.logging' from '/home/jack/dev/mypf/mypf_hledger/pandaflow/.venv/lib/python3.13/site-packages/_pytest/logging.py'>
          plugin_name: logging
          manager: <_pytest.config.PytestPluginManager object at 0x750178ba56a0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.reports' from '/home/jack/dev/mypf/mypf_hledger/pandaflow/.venv/lib/python3.13/site-packages/_pytest/reports.py'>
          plugin_name: reports
          manager: <_pytest.config.PytestPluginManager object at 0x750178ba56a0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.faulthandler' from '/home/jack/dev/mypf/mypf_hledger/pandaflow/.venv/lib/python3.13/site-packages/_pytest/faulthandler.py'>
          plugin_name: faulthandler
          manager: <_pytest.config.PytestPluginManager object at 0x750178ba56a0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module 'pytest_cov.plugin' from '/home/jack/dev/mypf/mypf_hledger/pandaflow/.venv/lib/python3.13/site-packages/pytest_cov/plugin.py'>
          plugin_name: pytest_cov
          manager: <_pytest.config.PytestPluginManager object at 0x750178ba56a0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <CaptureManager _method='fd' _global_capturing=<MultiCapture out=<FDCapture 1 oldfd=5 _state='suspended' tmpfile=<EncodedFile name="<_io.FileIO name=6 mode='rb+' closefd=True>" mode='r+' encoding='utf-8'>> err=<FDCapture 2 oldfd=7 _state='suspended' tmpfile=<EncodedFile name="<_io.FileIO name=8 mode='rb+' closefd=True>" mode='r+' encoding='utf-8'>> in_=<FDCapture 0 oldfd=3 _state='started' tmpfile=<_io.TextIOWrapper name='/dev/null' mode='r' encoding='utf-8'>> _state='suspended' _in_suspended=False> _capture_fixture=None>
          plugin_name: capturemanager
          manager: <_pytest.config.PytestPluginManager object at 0x750178ba56a0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <pytest_cov.plugin.CovPlugin object at 0x7501789e67b0>
          plugin_name: _cov
          manager: <_pytest.config.PytestPluginManager object at 0x750178ba56a0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <Session  exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
          plugin_name: session
          manager: <_pytest.config.PytestPluginManager object at 0x750178ba56a0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.cacheprovider.LFPlugin object at 0x750177da8440>
          plugin_name: lfplugin
          manager: <_pytest.config.PytestPluginManager object at 0x750178ba56a0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.cacheprovider.NFPlugin object at 0x750177da8d70>
          plugin_name: nfplugin
          manager: <_pytest.config.PytestPluginManager object at 0x750178ba56a0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <class '_pytest.legacypath.LegacyTmpdirPlugin'>
          plugin_name: legacypath-tmpdir
          manager: <_pytest.config.PytestPluginManager object at 0x750178ba56a0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.terminal.TerminalReporter object at 0x7501781e70e0>
          plugin_name: terminalreporter
          manager: <_pytest.config.PytestPluginManager object at 0x750178ba56a0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.logging.LoggingPlugin object at 0x750177daae40>
          plugin_name: logging-plugin
          manager: <_pytest.config.PytestPluginManager object at 0x750178ba56a0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.fixtures.FixtureManager object at 0x750177dab8c0>
          plugin_name: funcmanage
          manager: <_pytest.config.PytestPluginManager object at 0x750178ba56a0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_report_header [hook]
          config: <_pytest.config.Config object at 0x750178ba7b60>
          start_path: /home/jack/dev/mypf/mypf_new/pandaflow
          startdir: /home/jack/dev/mypf/mypf_new/pandaflow
      early skip of rewriting module: importlib.metadata._adapters [assertion]
      early skip of rewriting module: email.message [assertion]
      early skip of rewriting module: quopri [assertion]
      early skip of rewriting module: email.utils [assertion]
      early skip of rewriting module: urllib [assertion]
      early skip of rewriting module: urllib.parse [assertion]
      early skip of rewriting module: ipaddress [assertion]
      early skip of rewriting module: email._parseaddr [assertion]
      early skip of rewriting module: email.errors [assertion]
      early skip of rewriting module: email._policybase [assertion]
      early skip of rewriting module: email.header [assertion]
      early skip of rewriting module: email.quoprimime [assertion]
      early skip of rewriting module: email.base64mime [assertion]
      early skip of rewriting module: email.charset [assertion]
      early skip of rewriting module: email.encoders [assertion]
      early skip of rewriting module: email._encoded_words [assertion]
      early skip of rewriting module: email.iterators [assertion]
      early skip of rewriting module: importlib.metadata._text [assertion]
      early skip of rewriting module: email.parser [assertion]
      early skip of rewriting module: email.feedparser [assertion]
      finish pytest_report_header --> [['rootdir: /home/jack/dev/mypf/mypf_new/pandaflow', 'configfile: pyproject.toml', 'plugins: cov-7.0.0'], ['using: pytest-8.4.2', 'registered third-party plugins:', '  pytest-cov-7.0.0 at /home/jack/dev/mypf/mypf_hledger/pandaflow/.venv/lib/python3.13/site-packages/pytest_cov/plugin.py']] [hook]
    finish pytest_sessionstart --> [] [hook]
    pytest_collection [hook]
        session: <Session  exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
    perform_collect <Session  exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0> ['.'] [collection]
        pytest_collectstart [hook]
            collector: <Session  exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
        finish pytest_collectstart --> [] [hook]
        pytest_make_collect_report [hook]
            collector: <Session  exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
        processing argument CollectionArgument(path=PosixPath('/home/jack/dev/mypf/mypf_new/pandaflow'), parts=[], module_name=None) [collection]
            pytest_collect_directory [hook]
                path: /home/jack/dev/mypf/mypf_new/pandaflow
                parent: <Session  exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
            finish pytest_collect_directory --> <Dir pandaflow> [hook]
        finish pytest_make_collect_report --> <CollectReport '' lenresult=1 outcome='passed'> [hook]
        pytest_collectreport [hook]
            report: <CollectReport '' lenresult=1 outcome='passed'>
        finish pytest_collectreport --> [] [hook]
    genitems <Dir pandaflow> [collection]
      pytest_collectstart [hook]
          collector: <Dir pandaflow>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Dir pandaflow>
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x750178ba7b60>
            collection_path: /home/jack/dev/mypf/mypf_new/pandaflow/.coveragerc
            path: /home/jack/dev/mypf/mypf_new/pandaflow/.coveragerc
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Dir pandaflow>
            file_path: /home/jack/dev/mypf/mypf_new/pandaflow/.coveragerc
            path: /home/jack/dev/mypf/mypf_new/pandaflow/.coveragerc
        finish pytest_collect_file --> [] [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x750178ba7b60>
            collection_path: /home/jack/dev/mypf/mypf_new/pandaflow/.git
            path: /home/jack/dev/mypf/mypf_new/pandaflow/.git
        finish pytest_ignore_collect --> True [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x750178ba7b60>
            collection_path: /home/jack/dev/mypf/mypf_new/pandaflow/.github
            path: /home/jack/dev/mypf/mypf_new/pandaflow/.github
        finish pytest_ignore_collect --> True [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x750178ba7b60>
            collection_path: /home/jack/dev/mypf/mypf_new/pandaflow/.gitignore
            path: /home/jack/dev/mypf/mypf_new/pandaflow/.gitignore
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Dir pandaflow>
            file_path: /home/jack/dev/mypf/mypf_new/pandaflow/.gitignore
            path: /home/jack/dev/mypf/mypf_new/pandaflow/.gitignore
        finish pytest_collect_file --> [] [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x750178ba7b60>
            collection_path: /home/jack/dev/mypf/mypf_new/pandaflow/.pytest_cache
            path: /home/jack/dev/mypf/mypf_new/pandaflow/.pytest_cache
        finish pytest_ignore_collect --> True [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x750178ba7b60>
            collection_path: /home/jack/dev/mypf/mypf_new/pandaflow/.venv
            path: /home/jack/dev/mypf/mypf_new/pandaflow/.venv
        finish pytest_ignore_collect --> True [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x750178ba7b60>
            collection_path: /home/jack/dev/mypf/mypf_new/pandaflow/.vscode
            path: /home/jack/dev/mypf/mypf_new/pandaflow/.vscode
        finish pytest_ignore_collect --> True [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x750178ba7b60>
            collection_path: /home/jack/dev/mypf/mypf_new/pandaflow/LICENCE
            path: /home/jack/dev/mypf/mypf_new/pandaflow/LICENCE
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Dir pandaflow>
            file_path: /home/jack/dev/mypf/mypf_new/pandaflow/LICENCE
            path: /home/jack/dev/mypf/mypf_new/pandaflow/LICENCE
        finish pytest_collect_file --> [] [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x750178ba7b60>
            collection_path: /home/jack/dev/mypf/mypf_new/pandaflow/README.md
            path: /home/jack/dev/mypf/mypf_new/pandaflow/README.md
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Dir pandaflow>
            file_path: /home/jack/dev/mypf/mypf_new/pandaflow/README.md
            path: /home/jack/dev/mypf/mypf_new/pandaflow/README.md
        finish pytest_collect_file --> [] [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x750178ba7b60>
            collection_path: /home/jack/dev/mypf/mypf_new/pandaflow/csvpreprocessor.egg-info
            path: /home/jack/dev/mypf/mypf_new/pandaflow/csvpreprocessor.egg-info
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_directory [hook]
            path: /home/jack/dev/mypf/mypf_new/pandaflow/csvpreprocessor.egg-info
            parent: <Dir pandaflow>
        finish pytest_collect_directory --> <Dir csvpreprocessor.egg-info> [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x750178ba7b60>
            collection_path: /home/jack/dev/mypf/mypf_new/pandaflow/dist
            path: /home/jack/dev/mypf/mypf_new/pandaflow/dist
        finish pytest_ignore_collect --> True [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x750178ba7b60>
            collection_path: /home/jack/dev/mypf/mypf_new/pandaflow/docs
            path: /home/jack/dev/mypf/mypf_new/pandaflow/docs
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_directory [hook]
            path: /home/jack/dev/mypf/mypf_new/pandaflow/docs
            parent: <Dir pandaflow>
        finish pytest_collect_directory --> <Dir docs> [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x750178ba7b60>
            collection_path: /home/jack/dev/mypf/mypf_new/pandaflow/pandaflow
            path: /home/jack/dev/mypf/mypf_new/pandaflow/pandaflow
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_directory [hook]
            path: /home/jack/dev/mypf/mypf_new/pandaflow/pandaflow
            parent: <Dir pandaflow>
        finish pytest_collect_directory --> <Package pandaflow> [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x750178ba7b60>
            collection_path: /home/jack/dev/mypf/mypf_new/pandaflow/poetry.lock
            path: /home/jack/dev/mypf/mypf_new/pandaflow/poetry.lock
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Dir pandaflow>
            file_path: /home/jack/dev/mypf/mypf_new/pandaflow/poetry.lock
            path: /home/jack/dev/mypf/mypf_new/pandaflow/poetry.lock
        finish pytest_collect_file --> [] [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x750178ba7b60>
            collection_path: /home/jack/dev/mypf/mypf_new/pandaflow/pyproject.toml
            path: /home/jack/dev/mypf/mypf_new/pandaflow/pyproject.toml
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Dir pandaflow>
            file_path: /home/jack/dev/mypf/mypf_new/pandaflow/pyproject.toml
            path: /home/jack/dev/mypf/mypf_new/pandaflow/pyproject.toml
        finish pytest_collect_file --> [] [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x750178ba7b60>
            collection_path: /home/jack/dev/mypf/mypf_new/pandaflow/pytestdebug.log
            path: /home/jack/dev/mypf/mypf_new/pandaflow/pytestdebug.log
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Dir pandaflow>
            file_path: /home/jack/dev/mypf/mypf_new/pandaflow/pytestdebug.log
            path: /home/jack/dev/mypf/mypf_new/pandaflow/pytestdebug.log
        finish pytest_collect_file --> [] [hook]
      finish pytest_make_collect_report --> <CollectReport '.' lenresult=3 outcome='passed'> [hook]
    genitems <Dir csvpreprocessor.egg-info> [collection]
      pytest_collectstart [hook]
          collector: <Dir csvpreprocessor.egg-info>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Dir csvpreprocessor.egg-info>
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x750178ba7b60>
            collection_path: /home/jack/dev/mypf/mypf_new/pandaflow/csvpreprocessor.egg-info/PKG-INFO
            path: /home/jack/dev/mypf/mypf_new/pandaflow/csvpreprocessor.egg-info/PKG-INFO
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Dir csvpreprocessor.egg-info>
            file_path: /home/jack/dev/mypf/mypf_new/pandaflow/csvpreprocessor.egg-info/PKG-INFO
            path: /home/jack/dev/mypf/mypf_new/pandaflow/csvpreprocessor.egg-info/PKG-INFO
        finish pytest_collect_file --> [] [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x750178ba7b60>
            collection_path: /home/jack/dev/mypf/mypf_new/pandaflow/csvpreprocessor.egg-info/SOURCES.txt
            path: /home/jack/dev/mypf/mypf_new/pandaflow/csvpreprocessor.egg-info/SOURCES.txt
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Dir csvpreprocessor.egg-info>
            file_path: /home/jack/dev/mypf/mypf_new/pandaflow/csvpreprocessor.egg-info/SOURCES.txt
            path: /home/jack/dev/mypf/mypf_new/pandaflow/csvpreprocessor.egg-info/SOURCES.txt
        finish pytest_collect_file --> [] [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x750178ba7b60>
            collection_path: /home/jack/dev/mypf/mypf_new/pandaflow/csvpreprocessor.egg-info/dependency_links.txt
            path: /home/jack/dev/mypf/mypf_new/pandaflow/csvpreprocessor.egg-info/dependency_links.txt
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Dir csvpreprocessor.egg-info>
            file_path: /home/jack/dev/mypf/mypf_new/pandaflow/csvpreprocessor.egg-info/dependency_links.txt
            path: /home/jack/dev/mypf/mypf_new/pandaflow/csvpreprocessor.egg-info/dependency_links.txt
        finish pytest_collect_file --> [] [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x750178ba7b60>
            collection_path: /home/jack/dev/mypf/mypf_new/pandaflow/csvpreprocessor.egg-info/entry_points.txt
            path: /home/jack/dev/mypf/mypf_new/pandaflow/csvpreprocessor.egg-info/entry_points.txt
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Dir csvpreprocessor.egg-info>
            file_path: /home/jack/dev/mypf/mypf_new/pandaflow/csvpreprocessor.egg-info/entry_points.txt
            path: /home/jack/dev/mypf/mypf_new/pandaflow/csvpreprocessor.egg-info/entry_points.txt
        finish pytest_collect_file --> [] [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x750178ba7b60>
            collection_path: /home/jack/dev/mypf/mypf_new/pandaflow/csvpreprocessor.egg-info/requires.txt
            path: /home/jack/dev/mypf/mypf_new/pandaflow/csvpreprocessor.egg-info/requires.txt
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Dir csvpreprocessor.egg-info>
            file_path: /home/jack/dev/mypf/mypf_new/pandaflow/csvpreprocessor.egg-info/requires.txt
            path: /home/jack/dev/mypf/mypf_new/pandaflow/csvpreprocessor.egg-info/requires.txt
        finish pytest_collect_file --> [] [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x750178ba7b60>
            collection_path: /home/jack/dev/mypf/mypf_new/pandaflow/csvpreprocessor.egg-info/top_level.txt
            path: /home/jack/dev/mypf/mypf_new/pandaflow/csvpreprocessor.egg-info/top_level.txt
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Dir csvpreprocessor.egg-info>
            file_path: /home/jack/dev/mypf/mypf_new/pandaflow/csvpreprocessor.egg-info/top_level.txt
            path: /home/jack/dev/mypf/mypf_new/pandaflow/csvpreprocessor.egg-info/top_level.txt
        finish pytest_collect_file --> [] [hook]
      finish pytest_make_collect_report --> <CollectReport 'csvpreprocessor.egg-info' lenresult=0 outcome='passed'> [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'csvpreprocessor.egg-info' lenresult=0 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <Dir docs> [collection]
      pytest_collectstart [hook]
          collector: <Dir docs>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Dir docs>
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x750178ba7b60>
            collection_path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/Makefile
            path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/Makefile
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Dir docs>
            file_path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/Makefile
            path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/Makefile
        finish pytest_collect_file --> [] [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x750178ba7b60>
            collection_path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/_build
            path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/_build
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_directory [hook]
            path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/_build
            parent: <Dir docs>
        finish pytest_collect_directory --> <Dir _build> [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x750178ba7b60>
            collection_path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/examples
            path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/examples
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_directory [hook]
            path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/examples
            parent: <Dir docs>
        finish pytest_collect_directory --> <Dir examples> [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x750178ba7b60>
            collection_path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/source
            path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/source
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_directory [hook]
            path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/source
            parent: <Dir docs>
        finish pytest_collect_directory --> <Dir source> [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x750178ba7b60>
            collection_path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/validate_docs.py
            path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/validate_docs.py
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Dir docs>
            file_path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/validate_docs.py
            path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/validate_docs.py
        finish pytest_collect_file --> [] [hook]
      finish pytest_make_collect_report --> <CollectReport 'docs' lenresult=3 outcome='passed'> [hook]
    genitems <Dir _build> [collection]
      pytest_collectstart [hook]
          collector: <Dir _build>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Dir _build>
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x750178ba7b60>
            collection_path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/_build/html
            path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/_build/html
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_directory [hook]
            path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/_build/html
            parent: <Dir _build>
        finish pytest_collect_directory --> <Dir html> [hook]
      finish pytest_make_collect_report --> <CollectReport 'docs/_build' lenresult=1 outcome='passed'> [hook]
    genitems <Dir html> [collection]
      pytest_collectstart [hook]
          collector: <Dir html>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Dir html>
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x750178ba7b60>
            collection_path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/_build/html/.buildinfo
            path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/_build/html/.buildinfo
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Dir html>
            file_path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/_build/html/.buildinfo
            path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/_build/html/.buildinfo
        finish pytest_collect_file --> [] [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x750178ba7b60>
            collection_path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/_build/html/.doctrees
            path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/_build/html/.doctrees
        finish pytest_ignore_collect --> True [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x750178ba7b60>
            collection_path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/_build/html/_sources
            path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/_build/html/_sources
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_directory [hook]
            path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/_build/html/_sources
            parent: <Dir html>
        finish pytest_collect_directory --> <Dir _sources> [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x750178ba7b60>
            collection_path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/_build/html/_static
            path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/_build/html/_static
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_directory [hook]
            path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/_build/html/_static
            parent: <Dir html>
        finish pytest_collect_directory --> <Dir _static> [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x750178ba7b60>
            collection_path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/_build/html/contributing.html
            path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/_build/html/contributing.html
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Dir html>
            file_path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/_build/html/contributing.html
            path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/_build/html/contributing.html
        finish pytest_collect_file --> [] [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x750178ba7b60>
            collection_path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/_build/html/genindex.html
            path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/_build/html/genindex.html
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Dir html>
            file_path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/_build/html/genindex.html
            path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/_build/html/genindex.html
        finish pytest_collect_file --> [] [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x750178ba7b60>
            collection_path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/_build/html/index.html
            path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/_build/html/index.html
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Dir html>
            file_path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/_build/html/index.html
            path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/_build/html/index.html
        finish pytest_collect_file --> [] [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x750178ba7b60>
            collection_path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/_build/html/objects.inv
            path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/_build/html/objects.inv
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Dir html>
            file_path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/_build/html/objects.inv
            path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/_build/html/objects.inv
        finish pytest_collect_file --> [] [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x750178ba7b60>
            collection_path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/_build/html/overview.html
            path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/_build/html/overview.html
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Dir html>
            file_path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/_build/html/overview.html
            path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/_build/html/overview.html
        finish pytest_collect_file --> [] [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x750178ba7b60>
            collection_path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/_build/html/search.html
            path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/_build/html/search.html
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Dir html>
            file_path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/_build/html/search.html
            path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/_build/html/search.html
        finish pytest_collect_file --> [] [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x750178ba7b60>
            collection_path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/_build/html/searchindex.js
            path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/_build/html/searchindex.js
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Dir html>
            file_path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/_build/html/searchindex.js
            path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/_build/html/searchindex.js
        finish pytest_collect_file --> [] [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x750178ba7b60>
            collection_path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/_build/html/strategies
            path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/_build/html/strategies
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_directory [hook]
            path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/_build/html/strategies
            parent: <Dir html>
        finish pytest_collect_directory --> <Dir strategies> [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x750178ba7b60>
            collection_path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/_build/html/usage.html
            path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/_build/html/usage.html
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Dir html>
            file_path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/_build/html/usage.html
            path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/_build/html/usage.html
        finish pytest_collect_file --> [] [hook]
      finish pytest_make_collect_report --> <CollectReport 'docs/_build/html' lenresult=3 outcome='passed'> [hook]
    genitems <Dir _sources> [collection]
      pytest_collectstart [hook]
          collector: <Dir _sources>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Dir _sources>
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x750178ba7b60>
            collection_path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/_build/html/_sources/contributing.rst.txt
            path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/_build/html/_sources/contributing.rst.txt
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Dir _sources>
            file_path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/_build/html/_sources/contributing.rst.txt
            path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/_build/html/_sources/contributing.rst.txt
        finish pytest_collect_file --> [] [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x750178ba7b60>
            collection_path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/_build/html/_sources/index.rst.txt
            path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/_build/html/_sources/index.rst.txt
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Dir _sources>
            file_path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/_build/html/_sources/index.rst.txt
            path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/_build/html/_sources/index.rst.txt
        finish pytest_collect_file --> [] [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x750178ba7b60>
            collection_path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/_build/html/_sources/overview.rst.txt
            path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/_build/html/_sources/overview.rst.txt
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Dir _sources>
            file_path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/_build/html/_sources/overview.rst.txt
            path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/_build/html/_sources/overview.rst.txt
        finish pytest_collect_file --> [] [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x750178ba7b60>
            collection_path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/_build/html/_sources/strategies
            path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/_build/html/_sources/strategies
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_directory [hook]
            path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/_build/html/_sources/strategies
            parent: <Dir _sources>
        finish pytest_collect_directory --> <Dir strategies> [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x750178ba7b60>
            collection_path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/_build/html/_sources/usage.rst.txt
            path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/_build/html/_sources/usage.rst.txt
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Dir _sources>
            file_path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/_build/html/_sources/usage.rst.txt
            path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/_build/html/_sources/usage.rst.txt
        finish pytest_collect_file --> [] [hook]
      finish pytest_make_collect_report --> <CollectReport 'docs/_build/html/_sources' lenresult=1 outcome='passed'> [hook]
    genitems <Dir strategies> [collection]
      pytest_collectstart [hook]
          collector: <Dir strategies>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Dir strategies>
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x750178ba7b60>
            collection_path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/_build/html/_sources/strategies/calculate_ratio.rst.txt
            path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/_build/html/_sources/strategies/calculate_ratio.rst.txt
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Dir strategies>
            file_path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/_build/html/_sources/strategies/calculate_ratio.rst.txt
            path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/_build/html/_sources/strategies/calculate_ratio.rst.txt
        finish pytest_collect_file --> [] [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x750178ba7b60>
            collection_path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/_build/html/_sources/strategies/calculateamount.rst.txt
            path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/_build/html/_sources/strategies/calculateamount.rst.txt
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Dir strategies>
            file_path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/_build/html/_sources/strategies/calculateamount.rst.txt
            path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/_build/html/_sources/strategies/calculateamount.rst.txt
        finish pytest_collect_file --> [] [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x750178ba7b60>
            collection_path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/_build/html/_sources/strategies/constant.rst.txt
            path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/_build/html/_sources/strategies/constant.rst.txt
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Dir strategies>
            file_path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/_build/html/_sources/strategies/constant.rst.txt
            path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/_build/html/_sources/strategies/constant.rst.txt
        finish pytest_collect_file --> [] [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x750178ba7b60>
            collection_path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/_build/html/_sources/strategies/copy.rst.txt
            path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/_build/html/_sources/strategies/copy.rst.txt
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Dir strategies>
            file_path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/_build/html/_sources/strategies/copy.rst.txt
            path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/_build/html/_sources/strategies/copy.rst.txt
        finish pytest_collect_file --> [] [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x750178ba7b60>
            collection_path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/_build/html/_sources/strategies/drop.rst.txt
            path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/_build/html/_sources/strategies/drop.rst.txt
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Dir strategies>
            file_path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/_build/html/_sources/strategies/drop.rst.txt
            path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/_build/html/_sources/strategies/drop.rst.txt
        finish pytest_collect_file --> [] [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x750178ba7b60>
            collection_path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/_build/html/_sources/strategies/filter.rst.txt
            path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/_build/html/_sources/strategies/filter.rst.txt
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Dir strategies>
            file_path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/_build/html/_sources/strategies/filter.rst.txt
            path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/_build/html/_sources/strategies/filter.rst.txt
        finish pytest_collect_file --> [] [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x750178ba7b60>
            collection_path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/_build/html/_sources/strategies/hash.rst.txt
            path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/_build/html/_sources/strategies/hash.rst.txt
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Dir strategies>
            file_path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/_build/html/_sources/strategies/hash.rst.txt
            path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/_build/html/_sources/strategies/hash.rst.txt
        finish pytest_collect_file --> [] [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x750178ba7b60>
            collection_path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/_build/html/_sources/strategies/regex.rst.txt
            path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/_build/html/_sources/strategies/regex.rst.txt
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Dir strategies>
            file_path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/_build/html/_sources/strategies/regex.rst.txt
            path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/_build/html/_sources/strategies/regex.rst.txt
        finish pytest_collect_file --> [] [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x750178ba7b60>
            collection_path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/_build/html/_sources/strategies/replace.rst.txt
            path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/_build/html/_sources/strategies/replace.rst.txt
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Dir strategies>
            file_path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/_build/html/_sources/strategies/replace.rst.txt
            path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/_build/html/_sources/strategies/replace.rst.txt
        finish pytest_collect_file --> [] [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x750178ba7b60>
            collection_path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/_build/html/_sources/strategies/sort_by_column.rst.txt
            path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/_build/html/_sources/strategies/sort_by_column.rst.txt
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Dir strategies>
            file_path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/_build/html/_sources/strategies/sort_by_column.rst.txt
            path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/_build/html/_sources/strategies/sort_by_column.rst.txt
        finish pytest_collect_file --> [] [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x750178ba7b60>
            collection_path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/_build/html/_sources/strategies/split_column.rst.txt
            path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/_build/html/_sources/strategies/split_column.rst.txt
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Dir strategies>
            file_path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/_build/html/_sources/strategies/split_column.rst.txt
            path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/_build/html/_sources/strategies/split_column.rst.txt
        finish pytest_collect_file --> [] [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x750178ba7b60>
            collection_path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/_build/html/_sources/strategies/uuid.rst.txt
            path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/_build/html/_sources/strategies/uuid.rst.txt
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Dir strategies>
            file_path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/_build/html/_sources/strategies/uuid.rst.txt
            path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/_build/html/_sources/strategies/uuid.rst.txt
        finish pytest_collect_file --> [] [hook]
      finish pytest_make_collect_report --> <CollectReport 'docs/_build/html/_sources/strategies' lenresult=0 outcome='passed'> [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'docs/_build/html/_sources/strategies' lenresult=0 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'docs/_build/html/_sources' lenresult=1 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <Dir _static> [collection]
      pytest_collectstart [hook]
          collector: <Dir _static>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Dir _static>
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x750178ba7b60>
            collection_path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/_build/html/_static/basic.css
            path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/_build/html/_static/basic.css
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Dir _static>
            file_path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/_build/html/_static/basic.css
            path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/_build/html/_static/basic.css
        finish pytest_collect_file --> [] [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x750178ba7b60>
            collection_path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/_build/html/_static/custom.css
            path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/_build/html/_static/custom.css
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Dir _static>
            file_path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/_build/html/_static/custom.css
            path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/_build/html/_static/custom.css
        finish pytest_collect_file --> [] [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x750178ba7b60>
            collection_path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/_build/html/_static/debug.css
            path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/_build/html/_static/debug.css
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Dir _static>
            file_path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/_build/html/_static/debug.css
            path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/_build/html/_static/debug.css
        finish pytest_collect_file --> [] [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x750178ba7b60>
            collection_path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/_build/html/_static/doctools.js
            path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/_build/html/_static/doctools.js
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Dir _static>
            file_path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/_build/html/_static/doctools.js
            path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/_build/html/_static/doctools.js
        finish pytest_collect_file --> [] [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x750178ba7b60>
            collection_path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/_build/html/_static/documentation_options.js
            path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/_build/html/_static/documentation_options.js
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Dir _static>
            file_path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/_build/html/_static/documentation_options.js
            path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/_build/html/_static/documentation_options.js
        finish pytest_collect_file --> [] [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x750178ba7b60>
            collection_path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/_build/html/_static/file.png
            path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/_build/html/_static/file.png
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Dir _static>
            file_path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/_build/html/_static/file.png
            path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/_build/html/_static/file.png
        finish pytest_collect_file --> [] [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x750178ba7b60>
            collection_path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/_build/html/_static/language_data.js
            path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/_build/html/_static/language_data.js
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Dir _static>
            file_path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/_build/html/_static/language_data.js
            path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/_build/html/_static/language_data.js
        finish pytest_collect_file --> [] [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x750178ba7b60>
            collection_path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/_build/html/_static/logo.png
            path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/_build/html/_static/logo.png
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Dir _static>
            file_path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/_build/html/_static/logo.png
            path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/_build/html/_static/logo.png
        finish pytest_collect_file --> [] [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x750178ba7b60>
            collection_path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/_build/html/_static/minus.png
            path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/_build/html/_static/minus.png
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Dir _static>
            file_path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/_build/html/_static/minus.png
            path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/_build/html/_static/minus.png
        finish pytest_collect_file --> [] [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x750178ba7b60>
            collection_path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/_build/html/_static/plus.png
            path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/_build/html/_static/plus.png
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Dir _static>
            file_path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/_build/html/_static/plus.png
            path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/_build/html/_static/plus.png
        finish pytest_collect_file --> [] [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x750178ba7b60>
            collection_path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/_build/html/_static/pygments.css
            path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/_build/html/_static/pygments.css
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Dir _static>
            file_path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/_build/html/_static/pygments.css
            path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/_build/html/_static/pygments.css
        finish pytest_collect_file --> [] [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x750178ba7b60>
            collection_path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/_build/html/_static/scripts
            path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/_build/html/_static/scripts
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_directory [hook]
            path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/_build/html/_static/scripts
            parent: <Dir _static>
        finish pytest_collect_directory --> <Dir scripts> [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x750178ba7b60>
            collection_path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/_build/html/_static/searchtools.js
            path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/_build/html/_static/searchtools.js
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Dir _static>
            file_path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/_build/html/_static/searchtools.js
            path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/_build/html/_static/searchtools.js
        finish pytest_collect_file --> [] [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x750178ba7b60>
            collection_path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/_build/html/_static/skeleton.css
            path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/_build/html/_static/skeleton.css
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Dir _static>
            file_path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/_build/html/_static/skeleton.css
            path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/_build/html/_static/skeleton.css
        finish pytest_collect_file --> [] [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x750178ba7b60>
            collection_path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/_build/html/_static/sphinx_highlight.js
            path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/_build/html/_static/sphinx_highlight.js
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Dir _static>
            file_path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/_build/html/_static/sphinx_highlight.js
            path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/_build/html/_static/sphinx_highlight.js
        finish pytest_collect_file --> [] [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x750178ba7b60>
            collection_path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/_build/html/_static/styles
            path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/_build/html/_static/styles
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_directory [hook]
            path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/_build/html/_static/styles
            parent: <Dir _static>
        finish pytest_collect_directory --> <Dir styles> [hook]
      finish pytest_make_collect_report --> <CollectReport 'docs/_build/html/_static' lenresult=2 outcome='passed'> [hook]
    genitems <Dir scripts> [collection]
      pytest_collectstart [hook]
          collector: <Dir scripts>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Dir scripts>
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x750178ba7b60>
            collection_path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/_build/html/_static/scripts/furo-extensions.js
            path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/_build/html/_static/scripts/furo-extensions.js
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Dir scripts>
            file_path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/_build/html/_static/scripts/furo-extensions.js
            path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/_build/html/_static/scripts/furo-extensions.js
        finish pytest_collect_file --> [] [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x750178ba7b60>
            collection_path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/_build/html/_static/scripts/furo.js
            path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/_build/html/_static/scripts/furo.js
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Dir scripts>
            file_path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/_build/html/_static/scripts/furo.js
            path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/_build/html/_static/scripts/furo.js
        finish pytest_collect_file --> [] [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x750178ba7b60>
            collection_path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/_build/html/_static/scripts/furo.js.LICENSE.txt
            path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/_build/html/_static/scripts/furo.js.LICENSE.txt
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Dir scripts>
            file_path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/_build/html/_static/scripts/furo.js.LICENSE.txt
            path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/_build/html/_static/scripts/furo.js.LICENSE.txt
        finish pytest_collect_file --> [] [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x750178ba7b60>
            collection_path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/_build/html/_static/scripts/furo.js.map
            path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/_build/html/_static/scripts/furo.js.map
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Dir scripts>
            file_path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/_build/html/_static/scripts/furo.js.map
            path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/_build/html/_static/scripts/furo.js.map
        finish pytest_collect_file --> [] [hook]
      finish pytest_make_collect_report --> <CollectReport 'docs/_build/html/_static/scripts' lenresult=0 outcome='passed'> [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'docs/_build/html/_static/scripts' lenresult=0 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <Dir styles> [collection]
      pytest_collectstart [hook]
          collector: <Dir styles>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Dir styles>
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x750178ba7b60>
            collection_path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/_build/html/_static/styles/furo-extensions.css
            path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/_build/html/_static/styles/furo-extensions.css
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Dir styles>
            file_path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/_build/html/_static/styles/furo-extensions.css
            path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/_build/html/_static/styles/furo-extensions.css
        finish pytest_collect_file --> [] [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x750178ba7b60>
            collection_path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/_build/html/_static/styles/furo-extensions.css.map
            path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/_build/html/_static/styles/furo-extensions.css.map
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Dir styles>
            file_path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/_build/html/_static/styles/furo-extensions.css.map
            path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/_build/html/_static/styles/furo-extensions.css.map
        finish pytest_collect_file --> [] [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x750178ba7b60>
            collection_path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/_build/html/_static/styles/furo.css
            path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/_build/html/_static/styles/furo.css
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Dir styles>
            file_path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/_build/html/_static/styles/furo.css
            path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/_build/html/_static/styles/furo.css
        finish pytest_collect_file --> [] [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x750178ba7b60>
            collection_path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/_build/html/_static/styles/furo.css.map
            path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/_build/html/_static/styles/furo.css.map
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Dir styles>
            file_path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/_build/html/_static/styles/furo.css.map
            path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/_build/html/_static/styles/furo.css.map
        finish pytest_collect_file --> [] [hook]
      finish pytest_make_collect_report --> <CollectReport 'docs/_build/html/_static/styles' lenresult=0 outcome='passed'> [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'docs/_build/html/_static/styles' lenresult=0 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'docs/_build/html/_static' lenresult=2 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <Dir strategies> [collection]
      pytest_collectstart [hook]
          collector: <Dir strategies>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Dir strategies>
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x750178ba7b60>
            collection_path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/_build/html/strategies/calculate_ratio.html
            path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/_build/html/strategies/calculate_ratio.html
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Dir strategies>
            file_path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/_build/html/strategies/calculate_ratio.html
            path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/_build/html/strategies/calculate_ratio.html
        finish pytest_collect_file --> [] [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x750178ba7b60>
            collection_path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/_build/html/strategies/calculateamount.html
            path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/_build/html/strategies/calculateamount.html
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Dir strategies>
            file_path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/_build/html/strategies/calculateamount.html
            path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/_build/html/strategies/calculateamount.html
        finish pytest_collect_file --> [] [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x750178ba7b60>
            collection_path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/_build/html/strategies/constant.html
            path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/_build/html/strategies/constant.html
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Dir strategies>
            file_path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/_build/html/strategies/constant.html
            path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/_build/html/strategies/constant.html
        finish pytest_collect_file --> [] [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x750178ba7b60>
            collection_path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/_build/html/strategies/copy.html
            path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/_build/html/strategies/copy.html
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Dir strategies>
            file_path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/_build/html/strategies/copy.html
            path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/_build/html/strategies/copy.html
        finish pytest_collect_file --> [] [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x750178ba7b60>
            collection_path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/_build/html/strategies/drop.html
            path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/_build/html/strategies/drop.html
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Dir strategies>
            file_path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/_build/html/strategies/drop.html
            path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/_build/html/strategies/drop.html
        finish pytest_collect_file --> [] [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x750178ba7b60>
            collection_path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/_build/html/strategies/filter.html
            path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/_build/html/strategies/filter.html
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Dir strategies>
            file_path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/_build/html/strategies/filter.html
            path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/_build/html/strategies/filter.html
        finish pytest_collect_file --> [] [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x750178ba7b60>
            collection_path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/_build/html/strategies/hash.html
            path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/_build/html/strategies/hash.html
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Dir strategies>
            file_path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/_build/html/strategies/hash.html
            path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/_build/html/strategies/hash.html
        finish pytest_collect_file --> [] [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x750178ba7b60>
            collection_path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/_build/html/strategies/regex.html
            path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/_build/html/strategies/regex.html
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Dir strategies>
            file_path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/_build/html/strategies/regex.html
            path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/_build/html/strategies/regex.html
        finish pytest_collect_file --> [] [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x750178ba7b60>
            collection_path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/_build/html/strategies/replace.html
            path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/_build/html/strategies/replace.html
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Dir strategies>
            file_path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/_build/html/strategies/replace.html
            path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/_build/html/strategies/replace.html
        finish pytest_collect_file --> [] [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x750178ba7b60>
            collection_path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/_build/html/strategies/sort_by_column.html
            path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/_build/html/strategies/sort_by_column.html
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Dir strategies>
            file_path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/_build/html/strategies/sort_by_column.html
            path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/_build/html/strategies/sort_by_column.html
        finish pytest_collect_file --> [] [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x750178ba7b60>
            collection_path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/_build/html/strategies/split_column.html
            path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/_build/html/strategies/split_column.html
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Dir strategies>
            file_path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/_build/html/strategies/split_column.html
            path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/_build/html/strategies/split_column.html
        finish pytest_collect_file --> [] [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x750178ba7b60>
            collection_path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/_build/html/strategies/uuid.html
            path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/_build/html/strategies/uuid.html
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Dir strategies>
            file_path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/_build/html/strategies/uuid.html
            path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/_build/html/strategies/uuid.html
        finish pytest_collect_file --> [] [hook]
      finish pytest_make_collect_report --> <CollectReport 'docs/_build/html/strategies' lenresult=0 outcome='passed'> [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'docs/_build/html/strategies' lenresult=0 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'docs/_build/html' lenresult=3 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'docs/_build' lenresult=1 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <Dir examples> [collection]
      pytest_collectstart [hook]
          collector: <Dir examples>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Dir examples>
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x750178ba7b60>
            collection_path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/examples/example_data.csv
            path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/examples/example_data.csv
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Dir examples>
            file_path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/examples/example_data.csv
            path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/examples/example_data.csv
        finish pytest_collect_file --> [] [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x750178ba7b60>
            collection_path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/examples/example_strategy_hash.json
            path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/examples/example_strategy_hash.json
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Dir examples>
            file_path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/examples/example_strategy_hash.json
            path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/examples/example_strategy_hash.json
        finish pytest_collect_file --> [] [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x750178ba7b60>
            collection_path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/examples/example_strategy_merge_formula.json
            path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/examples/example_strategy_merge_formula.json
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Dir examples>
            file_path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/examples/example_strategy_merge_formula.json
            path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/examples/example_strategy_merge_formula.json
        finish pytest_collect_file --> [] [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x750178ba7b60>
            collection_path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/examples/generate_random_csv.py
            path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/examples/generate_random_csv.py
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Dir examples>
            file_path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/examples/generate_random_csv.py
            path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/examples/generate_random_csv.py
        finish pytest_collect_file --> [] [hook]
      finish pytest_make_collect_report --> <CollectReport 'docs/examples' lenresult=0 outcome='passed'> [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'docs/examples' lenresult=0 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <Dir source> [collection]
      pytest_collectstart [hook]
          collector: <Dir source>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Dir source>
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x750178ba7b60>
            collection_path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/source/_static
            path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/source/_static
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_directory [hook]
            path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/source/_static
            parent: <Dir source>
        finish pytest_collect_directory --> <Dir _static> [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x750178ba7b60>
            collection_path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/source/_templates
            path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/source/_templates
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_directory [hook]
            path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/source/_templates
            parent: <Dir source>
        finish pytest_collect_directory --> <Dir _templates> [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x750178ba7b60>
            collection_path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/source/conf.py
            path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/source/conf.py
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Dir source>
            file_path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/source/conf.py
            path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/source/conf.py
        finish pytest_collect_file --> [] [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x750178ba7b60>
            collection_path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/source/contributing.rst
            path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/source/contributing.rst
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Dir source>
            file_path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/source/contributing.rst
            path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/source/contributing.rst
        finish pytest_collect_file --> [] [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x750178ba7b60>
            collection_path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/source/data
            path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/source/data
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_directory [hook]
            path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/source/data
            parent: <Dir source>
        finish pytest_collect_directory --> <Dir data> [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x750178ba7b60>
            collection_path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/source/index.rst
            path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/source/index.rst
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Dir source>
            file_path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/source/index.rst
            path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/source/index.rst
        finish pytest_collect_file --> [] [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x750178ba7b60>
            collection_path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/source/overview.rst
            path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/source/overview.rst
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Dir source>
            file_path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/source/overview.rst
            path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/source/overview.rst
        finish pytest_collect_file --> [] [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x750178ba7b60>
            collection_path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/source/rules
            path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/source/rules
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_directory [hook]
            path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/source/rules
            parent: <Dir source>
        finish pytest_collect_directory --> <Dir rules> [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x750178ba7b60>
            collection_path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/source/strategies
            path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/source/strategies
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_directory [hook]
            path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/source/strategies
            parent: <Dir source>
        finish pytest_collect_directory --> <Dir strategies> [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x750178ba7b60>
            collection_path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/source/usage.rst
            path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/source/usage.rst
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Dir source>
            file_path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/source/usage.rst
            path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/source/usage.rst
        finish pytest_collect_file --> [] [hook]
      finish pytest_make_collect_report --> <CollectReport 'docs/source' lenresult=5 outcome='passed'> [hook]
    genitems <Dir _static> [collection]
      pytest_collectstart [hook]
          collector: <Dir _static>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Dir _static>
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x750178ba7b60>
            collection_path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/source/_static/custom.css
            path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/source/_static/custom.css
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Dir _static>
            file_path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/source/_static/custom.css
            path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/source/_static/custom.css
        finish pytest_collect_file --> [] [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x750178ba7b60>
            collection_path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/source/_static/logo.png
            path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/source/_static/logo.png
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Dir _static>
            file_path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/source/_static/logo.png
            path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/source/_static/logo.png
        finish pytest_collect_file --> [] [hook]
      finish pytest_make_collect_report --> <CollectReport 'docs/source/_static' lenresult=0 outcome='passed'> [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'docs/source/_static' lenresult=0 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <Dir _templates> [collection]
      pytest_collectstart [hook]
          collector: <Dir _templates>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Dir _templates>
      finish pytest_make_collect_report --> <CollectReport 'docs/source/_templates' lenresult=0 outcome='passed'> [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'docs/source/_templates' lenresult=0 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <Dir data> [collection]
      pytest_collectstart [hook]
          collector: <Dir data>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Dir data>
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x750178ba7b60>
            collection_path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/source/data/calculateamount_input.csv
            path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/source/data/calculateamount_input.csv
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Dir data>
            file_path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/source/data/calculateamount_input.csv
            path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/source/data/calculateamount_input.csv
        finish pytest_collect_file --> [] [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x750178ba7b60>
            collection_path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/source/data/calculateamount_output.csv
            path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/source/data/calculateamount_output.csv
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Dir data>
            file_path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/source/data/calculateamount_output.csv
            path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/source/data/calculateamount_output.csv
        finish pytest_collect_file --> [] [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x750178ba7b60>
            collection_path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/source/data/constant_input.csv
            path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/source/data/constant_input.csv
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Dir data>
            file_path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/source/data/constant_input.csv
            path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/source/data/constant_input.csv
        finish pytest_collect_file --> [] [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x750178ba7b60>
            collection_path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/source/data/constant_output.csv
            path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/source/data/constant_output.csv
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Dir data>
            file_path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/source/data/constant_output.csv
            path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/source/data/constant_output.csv
        finish pytest_collect_file --> [] [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x750178ba7b60>
            collection_path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/source/data/copy_input.csv
            path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/source/data/copy_input.csv
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Dir data>
            file_path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/source/data/copy_input.csv
            path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/source/data/copy_input.csv
        finish pytest_collect_file --> [] [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x750178ba7b60>
            collection_path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/source/data/copy_output.csv
            path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/source/data/copy_output.csv
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Dir data>
            file_path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/source/data/copy_output.csv
            path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/source/data/copy_output.csv
        finish pytest_collect_file --> [] [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x750178ba7b60>
            collection_path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/source/data/drop_input.csv
            path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/source/data/drop_input.csv
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Dir data>
            file_path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/source/data/drop_input.csv
            path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/source/data/drop_input.csv
        finish pytest_collect_file --> [] [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x750178ba7b60>
            collection_path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/source/data/drop_output.csv
            path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/source/data/drop_output.csv
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Dir data>
            file_path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/source/data/drop_output.csv
            path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/source/data/drop_output.csv
        finish pytest_collect_file --> [] [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x750178ba7b60>
            collection_path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/source/data/filter_input.csv
            path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/source/data/filter_input.csv
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Dir data>
            file_path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/source/data/filter_input.csv
            path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/source/data/filter_input.csv
        finish pytest_collect_file --> [] [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x750178ba7b60>
            collection_path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/source/data/filter_output.csv
            path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/source/data/filter_output.csv
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Dir data>
            file_path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/source/data/filter_output.csv
            path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/source/data/filter_output.csv
        finish pytest_collect_file --> [] [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x750178ba7b60>
            collection_path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/source/data/hash_input.csv
            path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/source/data/hash_input.csv
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Dir data>
            file_path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/source/data/hash_input.csv
            path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/source/data/hash_input.csv
        finish pytest_collect_file --> [] [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x750178ba7b60>
            collection_path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/source/data/hash_output.csv
            path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/source/data/hash_output.csv
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Dir data>
            file_path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/source/data/hash_output.csv
            path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/source/data/hash_output.csv
        finish pytest_collect_file --> [] [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x750178ba7b60>
            collection_path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/source/data/regex_input.csv
            path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/source/data/regex_input.csv
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Dir data>
            file_path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/source/data/regex_input.csv
            path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/source/data/regex_input.csv
        finish pytest_collect_file --> [] [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x750178ba7b60>
            collection_path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/source/data/regex_output.csv
            path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/source/data/regex_output.csv
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Dir data>
            file_path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/source/data/regex_output.csv
            path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/source/data/regex_output.csv
        finish pytest_collect_file --> [] [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x750178ba7b60>
            collection_path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/source/data/replace_input.csv
            path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/source/data/replace_input.csv
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Dir data>
            file_path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/source/data/replace_input.csv
            path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/source/data/replace_input.csv
        finish pytest_collect_file --> [] [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x750178ba7b60>
            collection_path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/source/data/replace_output.csv
            path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/source/data/replace_output.csv
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Dir data>
            file_path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/source/data/replace_output.csv
            path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/source/data/replace_output.csv
        finish pytest_collect_file --> [] [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x750178ba7b60>
            collection_path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/source/data/sort_by_column_input.csv
            path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/source/data/sort_by_column_input.csv
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Dir data>
            file_path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/source/data/sort_by_column_input.csv
            path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/source/data/sort_by_column_input.csv
        finish pytest_collect_file --> [] [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x750178ba7b60>
            collection_path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/source/data/sort_by_column_output.csv
            path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/source/data/sort_by_column_output.csv
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Dir data>
            file_path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/source/data/sort_by_column_output.csv
            path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/source/data/sort_by_column_output.csv
        finish pytest_collect_file --> [] [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x750178ba7b60>
            collection_path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/source/data/split_column_input.csv
            path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/source/data/split_column_input.csv
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Dir data>
            file_path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/source/data/split_column_input.csv
            path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/source/data/split_column_input.csv
        finish pytest_collect_file --> [] [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x750178ba7b60>
            collection_path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/source/data/split_column_output.csv
            path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/source/data/split_column_output.csv
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Dir data>
            file_path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/source/data/split_column_output.csv
            path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/source/data/split_column_output.csv
        finish pytest_collect_file --> [] [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x750178ba7b60>
            collection_path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/source/data/uuid_input.csv
            path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/source/data/uuid_input.csv
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Dir data>
            file_path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/source/data/uuid_input.csv
            path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/source/data/uuid_input.csv
        finish pytest_collect_file --> [] [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x750178ba7b60>
            collection_path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/source/data/uuid_output.csv
            path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/source/data/uuid_output.csv
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Dir data>
            file_path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/source/data/uuid_output.csv
            path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/source/data/uuid_output.csv
        finish pytest_collect_file --> [] [hook]
      finish pytest_make_collect_report --> <CollectReport 'docs/source/data' lenresult=0 outcome='passed'> [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'docs/source/data' lenresult=0 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <Dir rules> [collection]
      pytest_collectstart [hook]
          collector: <Dir rules>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Dir rules>
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x750178ba7b60>
            collection_path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/source/rules/calculateamount.json
            path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/source/rules/calculateamount.json
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Dir rules>
            file_path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/source/rules/calculateamount.json
            path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/source/rules/calculateamount.json
        finish pytest_collect_file --> [] [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x750178ba7b60>
            collection_path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/source/rules/constant.json
            path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/source/rules/constant.json
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Dir rules>
            file_path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/source/rules/constant.json
            path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/source/rules/constant.json
        finish pytest_collect_file --> [] [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x750178ba7b60>
            collection_path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/source/rules/copy.json
            path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/source/rules/copy.json
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Dir rules>
            file_path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/source/rules/copy.json
            path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/source/rules/copy.json
        finish pytest_collect_file --> [] [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x750178ba7b60>
            collection_path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/source/rules/drop.json
            path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/source/rules/drop.json
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Dir rules>
            file_path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/source/rules/drop.json
            path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/source/rules/drop.json
        finish pytest_collect_file --> [] [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x750178ba7b60>
            collection_path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/source/rules/filter.json
            path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/source/rules/filter.json
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Dir rules>
            file_path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/source/rules/filter.json
            path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/source/rules/filter.json
        finish pytest_collect_file --> [] [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x750178ba7b60>
            collection_path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/source/rules/hash.json
            path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/source/rules/hash.json
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Dir rules>
            file_path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/source/rules/hash.json
            path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/source/rules/hash.json
        finish pytest_collect_file --> [] [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x750178ba7b60>
            collection_path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/source/rules/regex.json
            path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/source/rules/regex.json
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Dir rules>
            file_path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/source/rules/regex.json
            path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/source/rules/regex.json
        finish pytest_collect_file --> [] [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x750178ba7b60>
            collection_path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/source/rules/replace.json
            path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/source/rules/replace.json
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Dir rules>
            file_path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/source/rules/replace.json
            path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/source/rules/replace.json
        finish pytest_collect_file --> [] [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x750178ba7b60>
            collection_path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/source/rules/sort_by_column.json
            path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/source/rules/sort_by_column.json
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Dir rules>
            file_path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/source/rules/sort_by_column.json
            path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/source/rules/sort_by_column.json
        finish pytest_collect_file --> [] [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x750178ba7b60>
            collection_path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/source/rules/split_column.json
            path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/source/rules/split_column.json
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Dir rules>
            file_path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/source/rules/split_column.json
            path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/source/rules/split_column.json
        finish pytest_collect_file --> [] [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x750178ba7b60>
            collection_path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/source/rules/uuid.json
            path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/source/rules/uuid.json
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Dir rules>
            file_path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/source/rules/uuid.json
            path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/source/rules/uuid.json
        finish pytest_collect_file --> [] [hook]
      finish pytest_make_collect_report --> <CollectReport 'docs/source/rules' lenresult=0 outcome='passed'> [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'docs/source/rules' lenresult=0 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <Dir strategies> [collection]
      pytest_collectstart [hook]
          collector: <Dir strategies>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Dir strategies>
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x750178ba7b60>
            collection_path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/source/strategies/calculate_ratio.rst
            path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/source/strategies/calculate_ratio.rst
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Dir strategies>
            file_path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/source/strategies/calculate_ratio.rst
            path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/source/strategies/calculate_ratio.rst
        finish pytest_collect_file --> [] [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x750178ba7b60>
            collection_path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/source/strategies/calculateamount.rst
            path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/source/strategies/calculateamount.rst
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Dir strategies>
            file_path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/source/strategies/calculateamount.rst
            path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/source/strategies/calculateamount.rst
        finish pytest_collect_file --> [] [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x750178ba7b60>
            collection_path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/source/strategies/constant.rst
            path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/source/strategies/constant.rst
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Dir strategies>
            file_path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/source/strategies/constant.rst
            path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/source/strategies/constant.rst
        finish pytest_collect_file --> [] [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x750178ba7b60>
            collection_path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/source/strategies/copy.rst
            path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/source/strategies/copy.rst
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Dir strategies>
            file_path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/source/strategies/copy.rst
            path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/source/strategies/copy.rst
        finish pytest_collect_file --> [] [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x750178ba7b60>
            collection_path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/source/strategies/drop.rst
            path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/source/strategies/drop.rst
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Dir strategies>
            file_path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/source/strategies/drop.rst
            path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/source/strategies/drop.rst
        finish pytest_collect_file --> [] [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x750178ba7b60>
            collection_path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/source/strategies/filter.rst
            path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/source/strategies/filter.rst
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Dir strategies>
            file_path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/source/strategies/filter.rst
            path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/source/strategies/filter.rst
        finish pytest_collect_file --> [] [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x750178ba7b60>
            collection_path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/source/strategies/hash.rst
            path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/source/strategies/hash.rst
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Dir strategies>
            file_path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/source/strategies/hash.rst
            path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/source/strategies/hash.rst
        finish pytest_collect_file --> [] [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x750178ba7b60>
            collection_path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/source/strategies/regex.rst
            path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/source/strategies/regex.rst
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Dir strategies>
            file_path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/source/strategies/regex.rst
            path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/source/strategies/regex.rst
        finish pytest_collect_file --> [] [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x750178ba7b60>
            collection_path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/source/strategies/replace.rst
            path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/source/strategies/replace.rst
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Dir strategies>
            file_path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/source/strategies/replace.rst
            path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/source/strategies/replace.rst
        finish pytest_collect_file --> [] [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x750178ba7b60>
            collection_path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/source/strategies/sort_by_column.rst
            path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/source/strategies/sort_by_column.rst
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Dir strategies>
            file_path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/source/strategies/sort_by_column.rst
            path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/source/strategies/sort_by_column.rst
        finish pytest_collect_file --> [] [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x750178ba7b60>
            collection_path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/source/strategies/split_column.rst
            path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/source/strategies/split_column.rst
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Dir strategies>
            file_path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/source/strategies/split_column.rst
            path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/source/strategies/split_column.rst
        finish pytest_collect_file --> [] [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x750178ba7b60>
            collection_path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/source/strategies/uuid.rst
            path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/source/strategies/uuid.rst
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Dir strategies>
            file_path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/source/strategies/uuid.rst
            path: /home/jack/dev/mypf/mypf_new/pandaflow/docs/source/strategies/uuid.rst
        finish pytest_collect_file --> [] [hook]
      finish pytest_make_collect_report --> <CollectReport 'docs/source/strategies' lenresult=0 outcome='passed'> [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'docs/source/strategies' lenresult=0 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'docs/source' lenresult=5 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'docs' lenresult=3 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <Package pandaflow> [collection]
      pytest_collectstart [hook]
          collector: <Package pandaflow>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Package pandaflow>
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x750178ba7b60>
            collection_path: /home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/__init__.py
            path: /home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/__init__.py
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Package pandaflow>
            file_path: /home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/__init__.py
            path: /home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/__init__.py
        finish pytest_collect_file --> [] [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x750178ba7b60>
            collection_path: /home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/__pycache__
            path: /home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/__pycache__
        finish pytest_ignore_collect --> True [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x750178ba7b60>
            collection_path: /home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/cli
            path: /home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/cli
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_directory [hook]
            path: /home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/cli
            parent: <Package pandaflow>
        finish pytest_collect_directory --> <Package cli> [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x750178ba7b60>
            collection_path: /home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/core
            path: /home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/core
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_directory [hook]
            path: /home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/core
            parent: <Package pandaflow>
        finish pytest_collect_directory --> <Package core> [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x750178ba7b60>
            collection_path: /home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/strategies
            path: /home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/strategies
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_directory [hook]
            path: /home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/strategies
            parent: <Package pandaflow>
        finish pytest_collect_directory --> <Package strategies> [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x750178ba7b60>
            collection_path: /home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/tests
            path: /home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/tests
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_directory [hook]
            path: /home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/tests
            parent: <Package pandaflow>
        finish pytest_collect_directory --> <Package tests> [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x750178ba7b60>
            collection_path: /home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/utils.py
            path: /home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/utils.py
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Package pandaflow>
            file_path: /home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/utils.py
            path: /home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/utils.py
        finish pytest_collect_file --> [] [hook]
      finish pytest_make_collect_report --> <CollectReport 'pandaflow' lenresult=4 outcome='passed'> [hook]
    genitems <Package cli> [collection]
      pytest_collectstart [hook]
          collector: <Package cli>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Package cli>
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x750178ba7b60>
            collection_path: /home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/cli/__init__.py
            path: /home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/cli/__init__.py
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Package cli>
            file_path: /home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/cli/__init__.py
            path: /home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/cli/__init__.py
        finish pytest_collect_file --> [] [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x750178ba7b60>
            collection_path: /home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/cli/__pycache__
            path: /home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/cli/__pycache__
        finish pytest_ignore_collect --> True [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x750178ba7b60>
            collection_path: /home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/cli/archive.py
            path: /home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/cli/archive.py
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Package cli>
            file_path: /home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/cli/archive.py
            path: /home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/cli/archive.py
        finish pytest_collect_file --> [] [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x750178ba7b60>
            collection_path: /home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/cli/check.py
            path: /home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/cli/check.py
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Package cli>
            file_path: /home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/cli/check.py
            path: /home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/cli/check.py
        finish pytest_collect_file --> [] [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x750178ba7b60>
            collection_path: /home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/cli/duplicates.py
            path: /home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/cli/duplicates.py
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Package cli>
            file_path: /home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/cli/duplicates.py
            path: /home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/cli/duplicates.py
        finish pytest_collect_file --> [] [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x750178ba7b60>
            collection_path: /home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/cli/main.py
            path: /home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/cli/main.py
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Package cli>
            file_path: /home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/cli/main.py
            path: /home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/cli/main.py
        finish pytest_collect_file --> [] [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x750178ba7b60>
            collection_path: /home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/cli/run.py
            path: /home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/cli/run.py
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Package cli>
            file_path: /home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/cli/run.py
            path: /home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/cli/run.py
        finish pytest_collect_file --> [] [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x750178ba7b60>
            collection_path: /home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/cli/strategies.py
            path: /home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/cli/strategies.py
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Package cli>
            file_path: /home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/cli/strategies.py
            path: /home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/cli/strategies.py
        finish pytest_collect_file --> [] [hook]
      finish pytest_make_collect_report --> <CollectReport 'pandaflow/cli' lenresult=0 outcome='passed'> [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'pandaflow/cli' lenresult=0 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <Package core> [collection]
      pytest_collectstart [hook]
          collector: <Package core>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Package core>
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x750178ba7b60>
            collection_path: /home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/core/__init__.py
            path: /home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/core/__init__.py
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Package core>
            file_path: /home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/core/__init__.py
            path: /home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/core/__init__.py
        finish pytest_collect_file --> [] [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x750178ba7b60>
            collection_path: /home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/core/__pycache__
            path: /home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/core/__pycache__
        finish pytest_ignore_collect --> True [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x750178ba7b60>
            collection_path: /home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/core/archiver.py
            path: /home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/core/archiver.py
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Package core>
            file_path: /home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/core/archiver.py
            path: /home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/core/archiver.py
        finish pytest_collect_file --> [] [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x750178ba7b60>
            collection_path: /home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/core/config.py
            path: /home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/core/config.py
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Package core>
            file_path: /home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/core/config.py
            path: /home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/core/config.py
        finish pytest_collect_file --> [] [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x750178ba7b60>
            collection_path: /home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/core/factory.py
            path: /home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/core/factory.py
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Package core>
            file_path: /home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/core/factory.py
            path: /home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/core/factory.py
        finish pytest_collect_file --> [] [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x750178ba7b60>
            collection_path: /home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/core/log.py
            path: /home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/core/log.py
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Package core>
            file_path: /home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/core/log.py
            path: /home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/core/log.py
        finish pytest_collect_file --> [] [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x750178ba7b60>
            collection_path: /home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/core/reader.py
            path: /home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/core/reader.py
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Package core>
            file_path: /home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/core/reader.py
            path: /home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/core/reader.py
        finish pytest_collect_file --> [] [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x750178ba7b60>
            collection_path: /home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/core/registry.py
            path: /home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/core/registry.py
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Package core>
            file_path: /home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/core/registry.py
            path: /home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/core/registry.py
        finish pytest_collect_file --> [] [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x750178ba7b60>
            collection_path: /home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/core/transformer.py
            path: /home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/core/transformer.py
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Package core>
            file_path: /home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/core/transformer.py
            path: /home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/core/transformer.py
        finish pytest_collect_file --> [] [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x750178ba7b60>
            collection_path: /home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/core/watcher.py
            path: /home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/core/watcher.py
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Package core>
            file_path: /home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/core/watcher.py
            path: /home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/core/watcher.py
        finish pytest_collect_file --> [] [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x750178ba7b60>
            collection_path: /home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/core/writer.py
            path: /home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/core/writer.py
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Package core>
            file_path: /home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/core/writer.py
            path: /home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/core/writer.py
        finish pytest_collect_file --> [] [hook]
      finish pytest_make_collect_report --> <CollectReport 'pandaflow/core' lenresult=0 outcome='passed'> [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'pandaflow/core' lenresult=0 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <Package strategies> [collection]
      pytest_collectstart [hook]
          collector: <Package strategies>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Package strategies>
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x750178ba7b60>
            collection_path: /home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/strategies/__init__.py
            path: /home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/strategies/__init__.py
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Package strategies>
            file_path: /home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/strategies/__init__.py
            path: /home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/strategies/__init__.py
        finish pytest_collect_file --> [] [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x750178ba7b60>
            collection_path: /home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/strategies/__pycache__
            path: /home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/strategies/__pycache__
        finish pytest_ignore_collect --> True [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x750178ba7b60>
            collection_path: /home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/strategies/base.py
            path: /home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/strategies/base.py
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Package strategies>
            file_path: /home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/strategies/base.py
            path: /home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/strategies/base.py
        finish pytest_collect_file --> [] [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x750178ba7b60>
            collection_path: /home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/strategies/calculate_amount.py
            path: /home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/strategies/calculate_amount.py
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Package strategies>
            file_path: /home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/strategies/calculate_amount.py
            path: /home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/strategies/calculate_amount.py
        finish pytest_collect_file --> [] [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x750178ba7b60>
            collection_path: /home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/strategies/calculate_ratio.py
            path: /home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/strategies/calculate_ratio.py
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Package strategies>
            file_path: /home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/strategies/calculate_ratio.py
            path: /home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/strategies/calculate_ratio.py
        finish pytest_collect_file --> [] [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x750178ba7b60>
            collection_path: /home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/strategies/constant.py
            path: /home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/strategies/constant.py
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Package strategies>
            file_path: /home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/strategies/constant.py
            path: /home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/strategies/constant.py
        finish pytest_collect_file --> [] [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x750178ba7b60>
            collection_path: /home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/strategies/copy.py
            path: /home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/strategies/copy.py
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Package strategies>
            file_path: /home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/strategies/copy.py
            path: /home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/strategies/copy.py
        finish pytest_collect_file --> [] [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x750178ba7b60>
            collection_path: /home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/strategies/csvfile.py
            path: /home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/strategies/csvfile.py
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Package strategies>
            file_path: /home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/strategies/csvfile.py
            path: /home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/strategies/csvfile.py
        finish pytest_collect_file --> [] [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x750178ba7b60>
            collection_path: /home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/strategies/debug.py
            path: /home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/strategies/debug.py
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Package strategies>
            file_path: /home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/strategies/debug.py
            path: /home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/strategies/debug.py
        finish pytest_collect_file --> [] [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x750178ba7b60>
            collection_path: /home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/strategies/deduplicate.py
            path: /home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/strategies/deduplicate.py
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Package strategies>
            file_path: /home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/strategies/deduplicate.py
            path: /home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/strategies/deduplicate.py
        finish pytest_collect_file --> [] [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x750178ba7b60>
            collection_path: /home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/strategies/drop.py
            path: /home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/strategies/drop.py
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Package strategies>
            file_path: /home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/strategies/drop.py
            path: /home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/strategies/drop.py
        finish pytest_collect_file --> [] [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x750178ba7b60>
            collection_path: /home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/strategies/filter.py
            path: /home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/strategies/filter.py
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Package strategies>
            file_path: /home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/strategies/filter.py
            path: /home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/strategies/filter.py
        finish pytest_collect_file --> [] [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x750178ba7b60>
            collection_path: /home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/strategies/hash.py
            path: /home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/strategies/hash.py
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Package strategies>
            file_path: /home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/strategies/hash.py
            path: /home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/strategies/hash.py
        finish pytest_collect_file --> [] [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x750178ba7b60>
            collection_path: /home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/strategies/merge.py
            path: /home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/strategies/merge.py
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Package strategies>
            file_path: /home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/strategies/merge.py
            path: /home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/strategies/merge.py
        finish pytest_collect_file --> [] [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x750178ba7b60>
            collection_path: /home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/strategies/mergestring.py
            path: /home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/strategies/mergestring.py
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Package strategies>
            file_path: /home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/strategies/mergestring.py
            path: /home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/strategies/mergestring.py
        finish pytest_collect_file --> [] [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x750178ba7b60>
            collection_path: /home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/strategies/regex.py
            path: /home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/strategies/regex.py
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Package strategies>
            file_path: /home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/strategies/regex.py
            path: /home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/strategies/regex.py
        finish pytest_collect_file --> [] [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x750178ba7b60>
            collection_path: /home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/strategies/reorder_columns.py
            path: /home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/strategies/reorder_columns.py
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Package strategies>
            file_path: /home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/strategies/reorder_columns.py
            path: /home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/strategies/reorder_columns.py
        finish pytest_collect_file --> [] [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x750178ba7b60>
            collection_path: /home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/strategies/replace.py
            path: /home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/strategies/replace.py
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Package strategies>
            file_path: /home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/strategies/replace.py
            path: /home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/strategies/replace.py
        finish pytest_collect_file --> [] [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x750178ba7b60>
            collection_path: /home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/strategies/sort_by_column.py
            path: /home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/strategies/sort_by_column.py
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Package strategies>
            file_path: /home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/strategies/sort_by_column.py
            path: /home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/strategies/sort_by_column.py
        finish pytest_collect_file --> [] [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x750178ba7b60>
            collection_path: /home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/strategies/split_column.py
            path: /home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/strategies/split_column.py
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Package strategies>
            file_path: /home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/strategies/split_column.py
            path: /home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/strategies/split_column.py
        finish pytest_collect_file --> [] [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x750178ba7b60>
            collection_path: /home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/strategies/uuid.py
            path: /home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/strategies/uuid.py
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Package strategies>
            file_path: /home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/strategies/uuid.py
            path: /home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/strategies/uuid.py
        finish pytest_collect_file --> [] [hook]
      finish pytest_make_collect_report --> <CollectReport 'pandaflow/strategies' lenresult=0 outcome='passed'> [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'pandaflow/strategies' lenresult=0 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <Package tests> [collection]
      pytest_collectstart [hook]
          collector: <Package tests>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Package tests>
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x750178ba7b60>
            collection_path: /home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/tests/__init__.py
            path: /home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/tests/__init__.py
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Package tests>
            file_path: /home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/tests/__init__.py
            path: /home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/tests/__init__.py
        finish pytest_collect_file --> [] [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x750178ba7b60>
            collection_path: /home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/tests/__pycache__
            path: /home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/tests/__pycache__
        finish pytest_ignore_collect --> True [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x750178ba7b60>
            collection_path: /home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/tests/test_cli
            path: /home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/tests/test_cli
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_directory [hook]
            path: /home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/tests/test_cli
            parent: <Package tests>
        finish pytest_collect_directory --> <Dir test_cli> [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x750178ba7b60>
            collection_path: /home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/tests/test_core
            path: /home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/tests/test_core
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_directory [hook]
            path: /home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/tests/test_core
            parent: <Package tests>
        finish pytest_collect_directory --> <Dir test_core> [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x750178ba7b60>
            collection_path: /home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/tests/test_strategies
            path: /home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/tests/test_strategies
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_directory [hook]
            path: /home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/tests/test_strategies
            parent: <Package tests>
        finish pytest_collect_directory --> <Dir test_strategies> [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x750178ba7b60>
            collection_path: /home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/tests/test_utils.py
            path: /home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/tests/test_utils.py
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Package tests>
            file_path: /home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/tests/test_utils.py
            path: /home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/tests/test_utils.py
          pytest_pycollect_makemodule [hook]
              parent: <Package tests>
              module_path: /home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/tests/test_utils.py
              path: /home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/tests/test_utils.py
          finish pytest_pycollect_makemodule --> <Module test_utils.py> [hook]
        finish pytest_collect_file --> [<Module test_utils.py>] [hook]
      finish pytest_make_collect_report --> <CollectReport 'pandaflow/tests' lenresult=4 outcome='passed'> [hook]
    genitems <Dir test_cli> [collection]
      pytest_collectstart [hook]
          collector: <Dir test_cli>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Dir test_cli>
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x750178ba7b60>
            collection_path: /home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/tests/test_cli/__pycache__
            path: /home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/tests/test_cli/__pycache__
        finish pytest_ignore_collect --> True [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x750178ba7b60>
            collection_path: /home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/tests/test_cli/test_archive.py
            path: /home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/tests/test_cli/test_archive.py
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Dir test_cli>
            file_path: /home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/tests/test_cli/test_archive.py
            path: /home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/tests/test_cli/test_archive.py
          pytest_pycollect_makemodule [hook]
              parent: <Dir test_cli>
              module_path: /home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/tests/test_cli/test_archive.py
              path: /home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/tests/test_cli/test_archive.py
          finish pytest_pycollect_makemodule --> <Module test_archive.py> [hook]
        finish pytest_collect_file --> [<Module test_archive.py>] [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x750178ba7b60>
            collection_path: /home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/tests/test_cli/test_check.py
            path: /home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/tests/test_cli/test_check.py
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Dir test_cli>
            file_path: /home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/tests/test_cli/test_check.py
            path: /home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/tests/test_cli/test_check.py
          pytest_pycollect_makemodule [hook]
              parent: <Dir test_cli>
              module_path: /home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/tests/test_cli/test_check.py
              path: /home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/tests/test_cli/test_check.py
          finish pytest_pycollect_makemodule --> <Module test_check.py> [hook]
        finish pytest_collect_file --> [<Module test_check.py>] [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x750178ba7b60>
            collection_path: /home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/tests/test_cli/test_duplicates.py
            path: /home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/tests/test_cli/test_duplicates.py
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Dir test_cli>
            file_path: /home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/tests/test_cli/test_duplicates.py
            path: /home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/tests/test_cli/test_duplicates.py
          pytest_pycollect_makemodule [hook]
              parent: <Dir test_cli>
              module_path: /home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/tests/test_cli/test_duplicates.py
              path: /home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/tests/test_cli/test_duplicates.py
          finish pytest_pycollect_makemodule --> <Module test_duplicates.py> [hook]
        finish pytest_collect_file --> [<Module test_duplicates.py>] [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x750178ba7b60>
            collection_path: /home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/tests/test_cli/test_run.py
            path: /home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/tests/test_cli/test_run.py
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Dir test_cli>
            file_path: /home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/tests/test_cli/test_run.py
            path: /home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/tests/test_cli/test_run.py
          pytest_pycollect_makemodule [hook]
              parent: <Dir test_cli>
              module_path: /home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/tests/test_cli/test_run.py
              path: /home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/tests/test_cli/test_run.py
          finish pytest_pycollect_makemodule --> <Module test_run.py> [hook]
        finish pytest_collect_file --> [<Module test_run.py>] [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x750178ba7b60>
            collection_path: /home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/tests/test_cli/test_strategies.py
            path: /home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/tests/test_cli/test_strategies.py
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Dir test_cli>
            file_path: /home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/tests/test_cli/test_strategies.py
            path: /home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/tests/test_cli/test_strategies.py
          pytest_pycollect_makemodule [hook]
              parent: <Dir test_cli>
              module_path: /home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/tests/test_cli/test_strategies.py
              path: /home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/tests/test_cli/test_strategies.py
          finish pytest_pycollect_makemodule --> <Module test_strategies.py> [hook]
        finish pytest_collect_file --> [<Module test_strategies.py>] [hook]
      finish pytest_make_collect_report --> <CollectReport 'pandaflow/tests/test_cli' lenresult=5 outcome='passed'> [hook]
    genitems <Module test_archive.py> [collection]
      pytest_collectstart [hook]
          collector: <Module test_archive.py>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Module test_archive.py>
      find_module called for: test_archive [assertion]
      matched test file '/home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/tests/test_cli/test_archive.py' [assertion]
      found cached rewritten pyc for /home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/tests/test_cli/test_archive.py [assertion]
      early skip of rewriting module: click [assertion]
      early skip of rewriting module: click.core [assertion]
      early skip of rewriting module: click.types [assertion]
      early skip of rewriting module: click._compat [assertion]
      early skip of rewriting module: click.exceptions [assertion]
      early skip of rewriting module: click.globals [assertion]
      early skip of rewriting module: click.utils [assertion]
      early skip of rewriting module: click.formatting [assertion]
      early skip of rewriting module: click.parser [assertion]
      early skip of rewriting module: click.termui [assertion]
      early skip of rewriting module: click.decorators [assertion]
      early skip of rewriting module: click.testing [assertion]
      early skip of rewriting module: unittest.mock [assertion]
      early skip of rewriting module: asyncio [assertion]
      early skip of rewriting module: asyncio.base_events [assertion]
      early skip of rewriting module: concurrent [assertion]
      early skip of rewriting module: concurrent.futures [assertion]
      early skip of rewriting module: concurrent.futures._base [assertion]
      early skip of rewriting module: ssl [assertion]
      early skip of rewriting module: _ssl [assertion]
      early skip of rewriting module: asyncio.constants [assertion]
      early skip of rewriting module: asyncio.coroutines [assertion]
      early skip of rewriting module: asyncio.events [assertion]
      early skip of rewriting module: contextvars [assertion]
      early skip of rewriting module: _contextvars [assertion]
      early skip of rewriting module: asyncio.format_helpers [assertion]
      early skip of rewriting module: _asyncio [assertion]
      early skip of rewriting module: asyncio.base_futures [assertion]
      early skip of rewriting module: asyncio.exceptions [assertion]
      early skip of rewriting module: asyncio.base_tasks [assertion]
      early skip of rewriting module: asyncio.futures [assertion]
      early skip of rewriting module: asyncio.protocols [assertion]
      early skip of rewriting module: asyncio.sslproto [assertion]
      early skip of rewriting module: asyncio.transports [assertion]
      early skip of rewriting module: asyncio.log [assertion]
      early skip of rewriting module: asyncio.staggered [assertion]
      early skip of rewriting module: asyncio.locks [assertion]
      early skip of rewriting module: asyncio.mixins [assertion]
      early skip of rewriting module: asyncio.tasks [assertion]
      early skip of rewriting module: asyncio.queues [assertion]
      early skip of rewriting module: asyncio.timeouts [assertion]
      early skip of rewriting module: asyncio.trsock [assertion]
      early skip of rewriting module: asyncio.runners [assertion]
      early skip of rewriting module: asyncio.streams [assertion]
      early skip of rewriting module: asyncio.subprocess [assertion]
      early skip of rewriting module: asyncio.taskgroups [assertion]
      early skip of rewriting module: asyncio.threads [assertion]
      early skip of rewriting module: asyncio.unix_events [assertion]
      early skip of rewriting module: asyncio.base_subprocess [assertion]
      early skip of rewriting module: asyncio.selector_events [assertion]
      early skip of rewriting module: pkgutil [assertion]
      find_module called for: pandaflow [assertion]
      early skip of rewriting module: pandaflow.cli [assertion]
      early skip of rewriting module: pandaflow.cli.main [assertion]
      early skip of rewriting module: pandaflow.cli.run [assertion]
      early skip of rewriting module: watchdog [assertion]
      early skip of rewriting module: watchdog.observers [assertion]
      early skip of rewriting module: watchdog.utils [assertion]
      early skip of rewriting module: watchdog.utils.platform [assertion]
      early skip of rewriting module: watchdog.observers.inotify [assertion]
      early skip of rewriting module: watchdog.events [assertion]
      early skip of rewriting module: watchdog.utils.patterns [assertion]
      early skip of rewriting module: watchdog.observers.api [assertion]
      early skip of rewriting module: queue [assertion]
      early skip of rewriting module: _queue [assertion]
      early skip of rewriting module: watchdog.utils.bricks [assertion]
      early skip of rewriting module: watchdog.observers.inotify_buffer [assertion]
      early skip of rewriting module: watchdog.observers.inotify_c [assertion]
      early skip of rewriting module: ctypes [assertion]
      early skip of rewriting module: _ctypes [assertion]
      early skip of rewriting module: ctypes._endian [assertion]
      early skip of rewriting module: ctypes.util [assertion]
      early skip of rewriting module: watchdog.utils.delayed_queue [assertion]
      early skip of rewriting module: pandaflow.core [assertion]
      early skip of rewriting module: pandaflow.core.config [assertion]
      early skip of rewriting module: toml [assertion]
      early skip of rewriting module: toml.encoder [assertion]
      early skip of rewriting module: toml.decoder [assertion]
      early skip of rewriting module: toml.tz [assertion]
      early skip of rewriting module: pydantic [assertion]
      early skip of rewriting module: pydantic._migration [assertion]
      early skip of rewriting module: pydantic.version [assertion]
      early skip of rewriting module: pydantic_core [assertion]
      early skip of rewriting module: pydantic_core._pydantic_core [assertion]
      early skip of rewriting module: pydantic_core.core_schema [assertion]
      early skip of rewriting module: typing_extensions [assertion]
      early skip of rewriting module: pydantic.errors [assertion]
      early skip of rewriting module: typing_inspection [assertion]
      early skip of rewriting module: typing_inspection.introspection [assertion]
      early skip of rewriting module: typing_inspection.typing_objects [assertion]
      early skip of rewriting module: pydantic._internal [assertion]
      early skip of rewriting module: pydantic._internal._repr [assertion]
      early skip of rewriting module: pydantic._internal._typing_extra [assertion]
      early skip of rewriting module: pydantic._internal._namespace_utils [assertion]
      early skip of rewriting module: pydantic.main [assertion]
      early skip of rewriting module: pydantic.warnings [assertion]
      early skip of rewriting module: pydantic._internal._config [assertion]
      early skip of rewriting module: pydantic.aliases [assertion]
      early skip of rewriting module: pydantic._internal._internal_dataclass [assertion]
      early skip of rewriting module: pydantic.config [assertion]
      early skip of rewriting module: pydantic._internal._decorators [assertion]
      early skip of rewriting module: pydantic._internal._core_utils [assertion]
      early skip of rewriting module: pydantic._internal._utils [assertion]
      early skip of rewriting module: pydantic._internal._import_utils [assertion]
      early skip of rewriting module: pydantic._internal._fields [assertion]
      early skip of rewriting module: pydantic._internal._generics [assertion]
      early skip of rewriting module: pydantic._internal._forward_ref [assertion]
      early skip of rewriting module: pydantic._internal._docs_extraction [assertion]
      early skip of rewriting module: pydantic._internal._mock_val_ser [assertion]
      early skip of rewriting module: pydantic.plugin [assertion]
      early skip of rewriting module: pydantic.plugin._schema_validator [assertion]
      early skip of rewriting module: pydantic._internal._model_construction [assertion]
      early skip of rewriting module: pydantic._internal._generate_schema [assertion]
      early skip of rewriting module: fractions [assertion]
      early skip of rewriting module: zoneinfo [assertion]
      early skip of rewriting module: zoneinfo._tzpath [assertion]
      early skip of rewriting module: zoneinfo._common [assertion]
      early skip of rewriting module: _zoneinfo [assertion]
      early skip of rewriting module: pydantic.annotated_handlers [assertion]
      early skip of rewriting module: pydantic.functional_validators [assertion]
      early skip of rewriting module: pydantic.json_schema [assertion]
      early skip of rewriting module: pydantic._internal._core_metadata [assertion]
      early skip of rewriting module: pydantic._internal._schema_generation_shared [assertion]
      early skip of rewriting module: pydantic._internal._discriminated_union [assertion]
      early skip of rewriting module: pydantic._internal._known_annotated_metadata [assertion]
      early skip of rewriting module: pydantic._internal._schema_gather [assertion]
      early skip of rewriting module: pydantic._internal._signature [assertion]
      early skip of rewriting module: pydantic.fields [assertion]
      early skip of rewriting module: annotated_types [assertion]
      early skip of rewriting module: pydantic._internal._validators [assertion]
      early skip of rewriting module: pydantic.types [assertion]
      early skip of rewriting module: pydantic.plugin._loader [assertion]
      early skip of rewriting module: pandaflow.core.reader [assertion]
      early skip of rewriting module: pandas [assertion]
      early skip of rewriting module: numpy [assertion]
      early skip of rewriting module: numpy.version [assertion]
      early skip of rewriting module: numpy._expired_attrs_2_0 [assertion]
      early skip of rewriting module: numpy._globals [assertion]
      early skip of rewriting module: numpy._utils [assertion]
      early skip of rewriting module: numpy._utils._convertions [assertion]
      early skip of rewriting module: numpy._distributor_init [assertion]
      early skip of rewriting module: numpy._distributor_init_local [assertion]
      early skip of rewriting module: numpy.__config__ [assertion]
      early skip of rewriting module: numpy._core [assertion]
      early skip of rewriting module: numpy._core.multiarray [assertion]
      early skip of rewriting module: numpy._core._multiarray_umath [assertion]
      early skip of rewriting module: numpy.exceptions [assertion]
      early skip of rewriting module: numpy._core._exceptions [assertion]
      early skip of rewriting module: numpy._core.printoptions [assertion]
      early skip of rewriting module: numpy.dtypes [assertion]
      early skip of rewriting module: numpy._core.overrides [assertion]
      early skip of rewriting module: numpy._utils._inspect [assertion]
      early skip of rewriting module: numpy._core.umath [assertion]
      early skip of rewriting module: numpy._core.numerictypes [assertion]
      early skip of rewriting module: numpy._core._dtype [assertion]
      early skip of rewriting module: numpy._core._string_helpers [assertion]
      early skip of rewriting module: numpy._core._type_aliases [assertion]
      early skip of rewriting module: numpy._core._machar [assertion]
      early skip of rewriting module: numpy._core._ufunc_config [assertion]
      early skip of rewriting module: numpy._core.fromnumeric [assertion]
      early skip of rewriting module: numpy._core._methods [assertion]
      early skip of rewriting module: numpy._core.einsumfunc [assertion]
      early skip of rewriting module: numpy._core.numeric [assertion]
      early skip of rewriting module: numpy._core.shape_base [assertion]
      early skip of rewriting module: numpy._core._asarray [assertion]
      early skip of rewriting module: numpy._core.arrayprint [assertion]
      early skip of rewriting module: numpy._core.function_base [assertion]
      early skip of rewriting module: numpy._core.getlimits [assertion]
      early skip of rewriting module: numpy._core.memmap [assertion]
      early skip of rewriting module: numpy._core.records [assertion]
      early skip of rewriting module: numpy._core._add_newdocs [assertion]
      early skip of rewriting module: numpy._core._add_newdocs_scalars [assertion]
      early skip of rewriting module: numpy._core._dtype_ctypes [assertion]
      early skip of rewriting module: numpy._core._internal [assertion]
      early skip of rewriting module: numpy._pytesttester [assertion]
      early skip of rewriting module: numpy.lib [assertion]
      early skip of rewriting module: numpy.lib._arraypad_impl [assertion]
      early skip of rewriting module: numpy.lib._index_tricks_impl [assertion]
      early skip of rewriting module: numpy.matrixlib [assertion]
      early skip of rewriting module: numpy.matrixlib.defmatrix [assertion]
      early skip of rewriting module: numpy.linalg [assertion]
      early skip of rewriting module: numpy.linalg._linalg [assertion]
      early skip of rewriting module: numpy._typing [assertion]
      early skip of rewriting module: numpy._typing._array_like [assertion]
      early skip of rewriting module: numpy._typing._nbit_base [assertion]
      early skip of rewriting module: numpy._typing._nested_sequence [assertion]
      early skip of rewriting module: numpy._typing._shape [assertion]
      early skip of rewriting module: numpy._typing._char_codes [assertion]
      early skip of rewriting module: numpy._typing._dtype_like [assertion]
      early skip of rewriting module: numpy._typing._nbit [assertion]
      early skip of rewriting module: numpy._typing._scalars [assertion]
      early skip of rewriting module: numpy._typing._ufunc [assertion]
      early skip of rewriting module: numpy.lib._twodim_base_impl [assertion]
      early skip of rewriting module: numpy.lib._stride_tricks_impl [assertion]
      early skip of rewriting module: numpy.lib.array_utils [assertion]
      early skip of rewriting module: numpy.lib._array_utils_impl [assertion]
      early skip of rewriting module: numpy.linalg._umath_linalg [assertion]
      early skip of rewriting module: numpy.linalg.linalg [assertion]
      early skip of rewriting module: numpy.lib._function_base_impl [assertion]
      early skip of rewriting module: numpy.lib._histograms_impl [assertion]
      early skip of rewriting module: numpy.lib.stride_tricks [assertion]
      early skip of rewriting module: numpy.lib._arraysetops_impl [assertion]
      early skip of rewriting module: numpy.lib._arrayterator_impl [assertion]
      early skip of rewriting module: numpy.lib._nanfunctions_impl [assertion]
      early skip of rewriting module: numpy.lib._npyio_impl [assertion]
      early skip of rewriting module: numpy.lib.format [assertion]
      early skip of rewriting module: numpy.lib._format_impl [assertion]
      early skip of rewriting module: numpy.lib._utils_impl [assertion]
      early skip of rewriting module: numpy.lib._datasource [assertion]
      early skip of rewriting module: numpy.lib._iotools [assertion]
      early skip of rewriting module: numpy.lib._polynomial_impl [assertion]
      early skip of rewriting module: numpy.lib._type_check_impl [assertion]
      early skip of rewriting module: numpy.lib._ufunclike_impl [assertion]
      early skip of rewriting module: numpy.lib._shape_base_impl [assertion]
      early skip of rewriting module: numpy.lib._version [assertion]
      early skip of rewriting module: numpy.lib.introspect [assertion]
      early skip of rewriting module: numpy.lib.mixins [assertion]
      early skip of rewriting module: numpy.lib.npyio [assertion]
      early skip of rewriting module: numpy.lib.scimath [assertion]
      early skip of rewriting module: numpy.lib._scimath_impl [assertion]
      early skip of rewriting module: numpy._array_api_info [assertion]
      early skip of rewriting module: pytz [assertion]
      early skip of rewriting module: pytz.exceptions [assertion]
      early skip of rewriting module: pytz.lazy [assertion]
      early skip of rewriting module: pytz.tzinfo [assertion]
      early skip of rewriting module: pytz.tzfile [assertion]
      early skip of rewriting module: dateutil [assertion]
      early skip of rewriting module: dateutil._version [assertion]
      early skip of rewriting module: pandas.compat [assertion]
      early skip of rewriting module: pandas.compat._constants [assertion]
      early skip of rewriting module: pandas.compat.compressors [assertion]
      early skip of rewriting module: bz2 [assertion]
      early skip of rewriting module: _bz2 [assertion]
      early skip of rewriting module: lzma [assertion]
      early skip of rewriting module: _lzma [assertion]
      early skip of rewriting module: pandas.compat.numpy [assertion]
      early skip of rewriting module: pandas.util [assertion]
      early skip of rewriting module: pandas.util.version [assertion]
      early skip of rewriting module: pandas.compat.pyarrow [assertion]
      early skip of rewriting module: pyarrow [assertion]
      early skip of rewriting module: pandas._config [assertion]
      early skip of rewriting module: pandas._config.config [assertion]
      early skip of rewriting module: pandas._typing [assertion]
      early skip of rewriting module: numpy.random [assertion]
      early skip of rewriting module: numpy.random._bounded_integers [assertion]
      early skip of rewriting module: numpy.random.bit_generator [assertion]
      early skip of rewriting module: numpy.random._common [assertion]
      early skip of rewriting module: secrets [assertion]
      early skip of rewriting module: hmac [assertion]
      early skip of rewriting module: numpy.random._pickle [assertion]
      early skip of rewriting module: numpy.random._generator [assertion]
      early skip of rewriting module: numpy.random._pcg64 [assertion]
      early skip of rewriting module: numpy.random._mt19937 [assertion]
      early skip of rewriting module: numpy.random._philox [assertion]
      early skip of rewriting module: numpy.random._sfc64 [assertion]
      early skip of rewriting module: numpy.random.mtrand [assertion]
      early skip of rewriting module: pandas.util._exceptions [assertion]
      early skip of rewriting module: pandas._config.dates [assertion]
      early skip of rewriting module: pandas._config.display [assertion]
      early skip of rewriting module: pandas.core [assertion]
      early skip of rewriting module: pandas.core.config_init [assertion]
      early skip of rewriting module: pandas.core.api [assertion]
      early skip of rewriting module: pandas._libs [assertion]
      early skip of rewriting module: pandas._libs.pandas_parser [assertion]
      early skip of rewriting module: pandas._libs.pandas_datetime [assertion]
      early skip of rewriting module: pandas._libs.interval [assertion]
      early skip of rewriting module: pandas._libs.hashtable [assertion]
      early skip of rewriting module: pandas._libs.missing [assertion]
      early skip of rewriting module: pandas._libs.tslibs [assertion]
      early skip of rewriting module: pandas._libs.tslibs.dtypes [assertion]
      early skip of rewriting module: pandas._libs.tslibs.ccalendar [assertion]
      early skip of rewriting module: pandas._libs.tslibs.np_datetime [assertion]
      early skip of rewriting module: pandas._libs.tslibs.conversion [assertion]
      early skip of rewriting module: pandas._libs.tslibs.base [assertion]
      early skip of rewriting module: pandas._libs.tslibs.offsets [assertion]
      early skip of rewriting module: pandas._libs.tslibs.timestamps [assertion]
      early skip of rewriting module: pandas._libs.tslibs.nattype [assertion]
      early skip of rewriting module: pandas._libs.tslibs.timedeltas [assertion]
      early skip of rewriting module: pandas._libs.tslibs.timezones [assertion]
      early skip of rewriting module: pandas.compat._optional [assertion]
      early skip of rewriting module: dateutil.tz [assertion]
      early skip of rewriting module: dateutil.tz.tz [assertion]
      early skip of rewriting module: six [assertion]
      early skip of rewriting module: six.moves [assertion]
      early skip of rewriting module: dateutil.tz._common [assertion]
      early skip of rewriting module: dateutil.tz._factories [assertion]
      early skip of rewriting module: dateutil.tz.win [assertion]
      early skip of rewriting module: six.moves.winreg [assertion]
      early skip of rewriting module: pandas._libs.tslibs.fields [assertion]
      early skip of rewriting module: _strptime [assertion]
      early skip of rewriting module: calendar [assertion]
      early skip of rewriting module: pandas._config.localization [assertion]
      early skip of rewriting module: pandas._libs.tslibs.tzconversion [assertion]
      early skip of rewriting module: pandas._libs.properties [assertion]
      early skip of rewriting module: pandas._libs.tslibs.parsing [assertion]
      early skip of rewriting module: dateutil.parser [assertion]
      early skip of rewriting module: dateutil.parser._parser [assertion]
      early skip of rewriting module: dateutil.relativedelta [assertion]
      early skip of rewriting module: dateutil._common [assertion]
      early skip of rewriting module: dateutil.parser.isoparser [assertion]
      early skip of rewriting module: pandas._libs.tslibs.strptime [assertion]
      early skip of rewriting module: pandas._libs.tslibs.period [assertion]
      early skip of rewriting module: pandas._libs.tslibs.vectorized [assertion]
      early skip of rewriting module: pandas._libs.ops_dispatch [assertion]
      early skip of rewriting module: pandas._libs.algos [assertion]
      early skip of rewriting module: pandas.core.dtypes [assertion]
      early skip of rewriting module: pandas.core.dtypes.dtypes [assertion]
      early skip of rewriting module: pandas._libs.lib [assertion]
      early skip of rewriting module: pyarrow [assertion]
      early skip of rewriting module: pandas.errors [assertion]
      early skip of rewriting module: pandas.core.dtypes.base [assertion]
      early skip of rewriting module: pandas.core.dtypes.generic [assertion]
      early skip of rewriting module: pandas.core.dtypes.inference [assertion]
      early skip of rewriting module: pandas.core.dtypes.missing [assertion]
      early skip of rewriting module: pandas.core.dtypes.common [assertion]
      early skip of rewriting module: pandas.core.algorithms [assertion]
      early skip of rewriting module: pandas.util._decorators [assertion]
      early skip of rewriting module: pandas.core.dtypes.cast [assertion]
      early skip of rewriting module: pandas.io [assertion]
      early skip of rewriting module: pandas.io._util [assertion]
      early skip of rewriting module: pandas.core.dtypes.concat [assertion]
      early skip of rewriting module: pandas.core.dtypes.astype [assertion]
      early skip of rewriting module: pandas.core.array_algos [assertion]
      early skip of rewriting module: pandas.core.array_algos.take [assertion]
      early skip of rewriting module: pandas.core.construction [assertion]
      early skip of rewriting module: numpy.ma [assertion]
      early skip of rewriting module: numpy.ma.core [assertion]
      early skip of rewriting module: numpy.ma.extras [assertion]
      early skip of rewriting module: pandas.core.common [assertion]
      early skip of rewriting module: pandas.core.indexers [assertion]
      early skip of rewriting module: pandas.core.indexers.utils [assertion]
      early skip of rewriting module: pandas.core.arrays [assertion]
      early skip of rewriting module: pandas.core.arrays.arrow [assertion]
      early skip of rewriting module: pandas.core.arrays.arrow.accessors [assertion]
      early skip of rewriting module: pandas.core.arrays.arrow.array [assertion]
      early skip of rewriting module: pandas.util._validators [assertion]
      early skip of rewriting module: pandas.core.missing [assertion]
      early skip of rewriting module: pandas.core.ops [assertion]
      early skip of rewriting module: pandas.core.ops.array_ops [assertion]
      early skip of rewriting module: pandas._libs.ops [assertion]
      early skip of rewriting module: pandas.core.roperator [assertion]
      early skip of rewriting module: pandas.core.computation [assertion]
      early skip of rewriting module: pandas.core.computation.expressions [assertion]
      early skip of rewriting module: pandas.core.computation.check [assertion]
      early skip of rewriting module: numexpr [assertion]
      early skip of rewriting module: pandas.core.ops.missing [assertion]
      early skip of rewriting module: pandas.core.ops.dispatch [assertion]
      early skip of rewriting module: pandas.core.ops.invalid [assertion]
      early skip of rewriting module: pandas.core.ops.common [assertion]
      early skip of rewriting module: pandas.core.ops.docstrings [assertion]
      early skip of rewriting module: pandas.core.ops.mask_ops [assertion]
      early skip of rewriting module: pandas.core.arraylike [assertion]
      early skip of rewriting module: pandas.core.arrays._arrow_string_mixins [assertion]
      early skip of rewriting module: pandas.core.arrays._utils [assertion]
      early skip of rewriting module: pandas.core.arrays.base [assertion]
      early skip of rewriting module: pandas.compat.numpy.function [assertion]
      early skip of rewriting module: pandas.core.array_algos.quantile [assertion]
      early skip of rewriting module: pandas.core.sorting [assertion]
      early skip of rewriting module: pandas.core.arrays.masked [assertion]
      early skip of rewriting module: pandas.core.nanops [assertion]
      early skip of rewriting module: bottleneck [assertion]
      early skip of rewriting module: pandas.core.array_algos.masked_accumulations [assertion]
      early skip of rewriting module: pandas.core.array_algos.masked_reductions [assertion]
      early skip of rewriting module: pandas.core.util [assertion]
      early skip of rewriting module: pandas.core.util.hashing [assertion]
      early skip of rewriting module: pandas._libs.hashing [assertion]
      early skip of rewriting module: pandas.core.arrays.string_ [assertion]
      early skip of rewriting module: pandas._libs.arrays [assertion]
      early skip of rewriting module: pandas.core.arrays.floating [assertion]
      early skip of rewriting module: pandas.core.arrays.numeric [assertion]
      early skip of rewriting module: pandas.core.arrays.integer [assertion]
      early skip of rewriting module: pandas.core.arrays.numpy_ [assertion]
      early skip of rewriting module: pandas.core.arrays._mixins [assertion]
      early skip of rewriting module: pandas.core.array_algos.transforms [assertion]
      early skip of rewriting module: pandas.core.strings [assertion]
      early skip of rewriting module: pandas.core.strings.object_array [assertion]
      early skip of rewriting module: pandas.core.strings.base [assertion]
      early skip of rewriting module: pandas.io.formats [assertion]
      early skip of rewriting module: pandas.io.formats.printing [assertion]
      early skip of rewriting module: pandas.io.formats.console [assertion]
      early skip of rewriting module: pandas.tseries [assertion]
      early skip of rewriting module: pandas.tseries.frequencies [assertion]
      early skip of rewriting module: pandas.core.arrays.boolean [assertion]
      early skip of rewriting module: pandas.core.arrays.categorical [assertion]
      early skip of rewriting module: pandas.core.accessor [assertion]
      early skip of rewriting module: pandas.core.base [assertion]
      early skip of rewriting module: pandas.core.arrays.datetimes [assertion]
      early skip of rewriting module: pandas._libs.tslib [assertion]
      early skip of rewriting module: pandas.core.arrays.datetimelike [assertion]
      early skip of rewriting module: pandas.core.array_algos.datetimelike_accumulations [assertion]
      early skip of rewriting module: pandas.core.arrays._ranges [assertion]
      early skip of rewriting module: pandas.tseries.offsets [assertion]
      early skip of rewriting module: pandas.core.arrays.interval [assertion]
      early skip of rewriting module: pandas.core.arrays.timedeltas [assertion]
      early skip of rewriting module: pandas.core.arrays.period [assertion]
      early skip of rewriting module: pandas.core.arrays.sparse [assertion]
      early skip of rewriting module: pandas.core.arrays.sparse.accessor [assertion]
      early skip of rewriting module: pandas.core.arrays.sparse.array [assertion]
      early skip of rewriting module: pandas._libs.sparse [assertion]
      early skip of rewriting module: pandas.core.arrays.string_arrow [assertion]
      early skip of rewriting module: pandas.core.flags [assertion]
      early skip of rewriting module: pandas.core.groupby [assertion]
      early skip of rewriting module: pandas.core.groupby.generic [assertion]
      early skip of rewriting module: pandas.core.apply [assertion]
      early skip of rewriting module: pandas._libs.internals [assertion]
      early skip of rewriting module: pandas.core._numba [assertion]
      early skip of rewriting module: pandas.core._numba.executor [assertion]
      early skip of rewriting module: pandas.core.frame [assertion]
      early skip of rewriting module: pandas.core.generic [assertion]
      early skip of rewriting module: pandas.core.indexing [assertion]
      early skip of rewriting module: pandas._libs.indexing [assertion]
      early skip of rewriting module: pandas.core.indexes [assertion]
      early skip of rewriting module: pandas.core.indexes.api [assertion]
      early skip of rewriting module: pandas.core.indexes.base [assertion]
      early skip of rewriting module: pandas._libs.index [assertion]
      early skip of rewriting module: pandas._libs.writers [assertion]
      early skip of rewriting module: pandas._libs.join [assertion]
      early skip of rewriting module: pandas.core.array_algos.putmask [assertion]
      early skip of rewriting module: pandas.core.indexes.frozen [assertion]
      early skip of rewriting module: pandas.core.strings.accessor [assertion]
      early skip of rewriting module: pandas.core.indexes.category [assertion]
      early skip of rewriting module: pandas.core.indexes.extension [assertion]
      early skip of rewriting module: pandas.core.indexes.datetimes [assertion]
      early skip of rewriting module: pandas.core.indexes.datetimelike [assertion]
      early skip of rewriting module: pandas.core.indexes.range [assertion]
      early skip of rewriting module: pandas.core.tools [assertion]
      early skip of rewriting module: pandas.core.tools.timedeltas [assertion]
      early skip of rewriting module: pandas.core.tools.times [assertion]
      early skip of rewriting module: pandas.core.indexes.interval [assertion]
      early skip of rewriting module: pandas.core.indexes.multi [assertion]
      early skip of rewriting module: pandas.core.indexes.timedeltas [assertion]
      early skip of rewriting module: pandas.core.indexes.period [assertion]
      early skip of rewriting module: pandas.core.sample [assertion]
      early skip of rewriting module: pandas.core.array_algos.replace [assertion]
      early skip of rewriting module: pandas.core.internals [assertion]
      early skip of rewriting module: pandas.core.internals.api [assertion]
      early skip of rewriting module: pandas.core.internals.blocks [assertion]
      early skip of rewriting module: pandas.core.internals.array_manager [assertion]
      early skip of rewriting module: pandas.core.internals.base [assertion]
      early skip of rewriting module: pandas.core.internals.managers [assertion]
      early skip of rewriting module: pandas.core.internals.ops [assertion]
      early skip of rewriting module: pandas.core.internals.concat [assertion]
      early skip of rewriting module: pandas.core.internals.construction [assertion]
      early skip of rewriting module: pandas.core.methods [assertion]
      early skip of rewriting module: pandas.core.methods.describe [assertion]
      early skip of rewriting module: pandas.core.reshape [assertion]
      early skip of rewriting module: pandas.core.reshape.concat [assertion]
      early skip of rewriting module: pandas.io.formats.format [assertion]
      early skip of rewriting module: pandas.io.common [assertion]
      early skip of rewriting module: gzip [assertion]
      early skip of rewriting module: mmap [assertion]
      early skip of rewriting module: tarfile [assertion]
      early skip of rewriting module: pandas.core.shared_docs [assertion]
      early skip of rewriting module: pandas.core.window [assertion]
      early skip of rewriting module: pandas.core.window.ewm [assertion]
      early skip of rewriting module: pandas._libs.window [assertion]
      early skip of rewriting module: pandas._libs.window.aggregations [assertion]
      early skip of rewriting module: pandas.core.indexers.objects [assertion]
      early skip of rewriting module: pandas._libs.window.indexers [assertion]
      early skip of rewriting module: pandas.core.util.numba_ [assertion]
      early skip of rewriting module: pandas.core.window.common [assertion]
      early skip of rewriting module: pandas.core.window.doc [assertion]
      early skip of rewriting module: pandas.core.window.numba_ [assertion]
      early skip of rewriting module: pandas.core.window.online [assertion]
      early skip of rewriting module: pandas.core.window.rolling [assertion]
      early skip of rewriting module: pandas.core.window.expanding [assertion]
      early skip of rewriting module: pandas.core.methods.selectn [assertion]
      early skip of rewriting module: pandas.core.reshape.melt [assertion]
      early skip of rewriting module: pandas.core.reshape.util [assertion]
      early skip of rewriting module: pandas.core.tools.numeric [assertion]
      early skip of rewriting module: pandas.core.series [assertion]
      early skip of rewriting module: pandas._libs.reshape [assertion]
      early skip of rewriting module: pandas.core.indexes.accessors [assertion]
      early skip of rewriting module: pandas.core.tools.datetimes [assertion]
      early skip of rewriting module: pandas.arrays [assertion]
      early skip of rewriting module: pandas.io.formats.info [assertion]
      early skip of rewriting module: pandas.plotting [assertion]
      early skip of rewriting module: pandas.plotting._core [assertion]
      early skip of rewriting module: pandas.plotting._misc [assertion]
      early skip of rewriting module: pandas.core.groupby.base [assertion]
      early skip of rewriting module: pandas.core.groupby.ops [assertion]
      early skip of rewriting module: pandas._libs.groupby [assertion]
      early skip of rewriting module: pandas.core.groupby.grouper [assertion]
      early skip of rewriting module: pandas.core.groupby.categorical [assertion]
      early skip of rewriting module: pandas.core.groupby.groupby [assertion]
      early skip of rewriting module: pandas.core.groupby.numba_ [assertion]
      early skip of rewriting module: pandas.core.groupby.indexing [assertion]
      early skip of rewriting module: pandas.tseries.api [assertion]
      early skip of rewriting module: pandas.core.computation.api [assertion]
      early skip of rewriting module: pandas.core.computation.eval [assertion]
      early skip of rewriting module: pandas.core.computation.engines [assertion]
      early skip of rewriting module: pandas.core.computation.align [assertion]
      early skip of rewriting module: pandas.core.computation.common [assertion]
      early skip of rewriting module: pandas.core.computation.ops [assertion]
      early skip of rewriting module: pandas.core.computation.scope [assertion]
      early skip of rewriting module: pandas.core.computation.expr [assertion]
      early skip of rewriting module: pandas.core.computation.parsing [assertion]
      early skip of rewriting module: pandas.core.reshape.api [assertion]
      early skip of rewriting module: pandas.core.reshape.encoding [assertion]
      early skip of rewriting module: pandas.core.reshape.merge [assertion]
      early skip of rewriting module: pandas.core.reshape.pivot [assertion]
      early skip of rewriting module: pandas.core.reshape.tile [assertion]
      early skip of rewriting module: pandas.api [assertion]
      early skip of rewriting module: pandas.api.extensions [assertion]
      early skip of rewriting module: pandas.api.indexers [assertion]
      early skip of rewriting module: pandas.api.interchange [assertion]
      early skip of rewriting module: pandas.core.interchange [assertion]
      early skip of rewriting module: pandas.core.interchange.dataframe_protocol [assertion]
      early skip of rewriting module: pandas.core.interchange.from_dataframe [assertion]
      early skip of rewriting module: pandas.core.interchange.utils [assertion]
      early skip of rewriting module: pandas.api.types [assertion]
      early skip of rewriting module: pandas.core.dtypes.api [assertion]
      early skip of rewriting module: pandas.api.typing [assertion]
      early skip of rewriting module: pandas.core.resample [assertion]
      early skip of rewriting module: pandas.io.json [assertion]
      early skip of rewriting module: pandas.io.json._json [assertion]
      early skip of rewriting module: pandas._libs.json [assertion]
      early skip of rewriting module: pandas.io.json._normalize [assertion]
      early skip of rewriting module: pandas.io.json._table_schema [assertion]
      early skip of rewriting module: pandas.io.parsers [assertion]
      early skip of rewriting module: pandas.io.parsers.readers [assertion]
      early skip of rewriting module: pandas._libs.parsers [assertion]
      early skip of rewriting module: pandas.io.parsers.arrow_parser_wrapper [assertion]
      early skip of rewriting module: pandas.io.parsers.base_parser [assertion]
      early skip of rewriting module: pandas.io.parsers.c_parser_wrapper [assertion]
      early skip of rewriting module: pandas.io.parsers.python_parser [assertion]
      early skip of rewriting module: pandas.io.stata [assertion]
      early skip of rewriting module: pandas.testing [assertion]
      early skip of rewriting module: pandas._testing [assertion]
      early skip of rewriting module: pandas._testing._io [assertion]
      early skip of rewriting module: pandas._testing.contexts [assertion]
      early skip of rewriting module: pandas._testing._warnings [assertion]
      early skip of rewriting module: pandas._testing.asserters [assertion]
      early skip of rewriting module: pandas._libs.testing [assertion]
      early skip of rewriting module: cmath [assertion]
      early skip of rewriting module: pandas._testing.compat [assertion]
      early skip of rewriting module: pandas.util._print_versions [assertion]
      early skip of rewriting module: pandas.io.api [assertion]
      early skip of rewriting module: pandas.io.clipboards [assertion]
      early skip of rewriting module: pandas.io.excel [assertion]
      early skip of rewriting module: pandas.io.excel._base [assertion]
      early skip of rewriting module: pandas.io.excel._util [assertion]
      early skip of rewriting module: pandas.io.excel._calamine [assertion]
      early skip of rewriting module: pandas.io.excel._odfreader [assertion]
      early skip of rewriting module: pandas.io.excel._openpyxl [assertion]
      early skip of rewriting module: pandas.io.excel._pyxlsb [assertion]
      early skip of rewriting module: pandas.io.excel._xlrd [assertion]
      early skip of rewriting module: pandas.io.excel._odswriter [assertion]
      early skip of rewriting module: pandas.io.excel._xlsxwriter [assertion]
      early skip of rewriting module: pandas.io.feather_format [assertion]
      early skip of rewriting module: pandas.io.gbq [assertion]
      early skip of rewriting module: pandas.io.html [assertion]
      early skip of rewriting module: pandas.io.orc [assertion]
      early skip of rewriting module: pandas.io.parquet [assertion]
      early skip of rewriting module: pandas.io.pickle [assertion]
      early skip of rewriting module: pandas.compat.pickle_compat [assertion]
      early skip of rewriting module: pandas.io.pytables [assertion]
      early skip of rewriting module: pandas.core.computation.pytables [assertion]
      early skip of rewriting module: pandas.io.sas [assertion]
      early skip of rewriting module: pandas.io.sas.sasreader [assertion]
      early skip of rewriting module: pandas.io.spss [assertion]
      early skip of rewriting module: pandas.io.sql [assertion]
      early skip of rewriting module: pandas.io.xml [assertion]
      early skip of rewriting module: pandas.util._tester [assertion]
      early skip of rewriting module: pandas._version_meson [assertion]
      early skip of rewriting module: pandaflow.core.transformer [assertion]
      early skip of rewriting module: pandaflow.core.factory [assertion]
      early skip of rewriting module: pandaflow.core.registry [assertion]
      early skip of rewriting module: pandaflow.strategies [assertion]
      early skip of rewriting module: pandaflow.strategies.base [assertion]
      early skip of rewriting module: pandaflow.core.writer [assertion]
      early skip of rewriting module: pandaflow.core.watcher [assertion]
      early skip of rewriting module: pandaflow.core.log [assertion]
      early skip of rewriting module: pandaflow.cli.archive [assertion]
      early skip of rewriting module: pandaflow.core.archiver [assertion]
      early skip of rewriting module: pandaflow.cli.duplicates [assertion]
      early skip of rewriting module: pandaflow.cli.check [assertion]
      early skip of rewriting module: pandaflow.cli.strategies [assertion]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_archive.py>
            name: @py_builtins
            obj: <module 'builtins' (built-in)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_archive.py>
            name: @pytest_ar
            obj: <module '_pytest.assertion.rewrite' from '/home/jack/dev/mypf/mypf_hledger/pandaflow/.venv/lib/python3.13/site-packages/_pytest/assertion/rewrite.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_archive.py>
            name: pytest
            obj: <module 'pytest' from '/home/jack/dev/mypf/mypf_hledger/pandaflow/.venv/lib/python3.13/site-packages/pytest/__init__.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_archive.py>
            name: CliRunner
            obj: <class 'click.testing.CliRunner'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_archive.py>
            name: patch
            obj: <function patch at 0x750177896660>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_archive.py>
            name: cli
            obj: <Group cli>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_archive.py>
            name: runner
            obj: <pytest_fixture(<function runner at 0x750177d00d60>)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_archive.py>
            name: test_archive_command
            obj: <function test_archive_command at 0x75015e490860>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x75015e420830>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_archive_command>] [hook]
      finish pytest_make_collect_report --> <CollectReport 'pandaflow/tests/test_cli/test_archive.py' lenresult=1 outcome='passed'> [hook]
    genitems <Function test_archive_command> [collection]
      pytest_itemcollected [hook]
          item: <Function test_archive_command>
      finish pytest_itemcollected --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'pandaflow/tests/test_cli/test_archive.py' lenresult=1 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <Module test_check.py> [collection]
      pytest_collectstart [hook]
          collector: <Module test_check.py>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Module test_check.py>
      find_module called for: test_check [assertion]
      matched test file '/home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/tests/test_cli/test_check.py' [assertion]
      found cached rewritten pyc for /home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/tests/test_cli/test_check.py [assertion]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_check.py>
            name: @py_builtins
            obj: <module 'builtins' (built-in)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_check.py>
            name: @pytest_ar
            obj: <module '_pytest.assertion.rewrite' from '/home/jack/dev/mypf/mypf_hledger/pandaflow/.venv/lib/python3.13/site-packages/_pytest/assertion/rewrite.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_check.py>
            name: pytest
            obj: <module 'pytest' from '/home/jack/dev/mypf/mypf_hledger/pandaflow/.venv/lib/python3.13/site-packages/pytest/__init__.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_check.py>
            name: CliRunner
            obj: <class 'click.testing.CliRunner'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_check.py>
            name: patch
            obj: <function patch at 0x750177896660>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_check.py>
            name: MagicMock
            obj: <class 'unittest.mock.MagicMock'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_check.py>
            name: cli
            obj: <Group cli>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_check.py>
            name: runner
            obj: <pytest_fixture(<function runner at 0x75015e4911c0>)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_check.py>
            name: test_check_command_valid
            obj: <function test_check_command_valid at 0x75015e4913a0>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x75015e499310>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_check_command_valid>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_check.py>
            name: test_check_command_invalid_strategy
            obj: <function test_check_command_invalid_strategy at 0x75015e4914e0>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x75015e499310>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_check_command_invalid_strategy>] [hook]
      finish pytest_make_collect_report --> <CollectReport 'pandaflow/tests/test_cli/test_check.py' lenresult=2 outcome='passed'> [hook]
    genitems <Function test_check_command_valid> [collection]
      pytest_itemcollected [hook]
          item: <Function test_check_command_valid>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_check_command_invalid_strategy> [collection]
      pytest_itemcollected [hook]
          item: <Function test_check_command_invalid_strategy>
      finish pytest_itemcollected --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'pandaflow/tests/test_cli/test_check.py' lenresult=2 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <Module test_duplicates.py> [collection]
      pytest_collectstart [hook]
          collector: <Module test_duplicates.py>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Module test_duplicates.py>
      find_module called for: test_duplicates [assertion]
      matched test file '/home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/tests/test_cli/test_duplicates.py' [assertion]
      found cached rewritten pyc for /home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/tests/test_cli/test_duplicates.py [assertion]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_duplicates.py>
            name: @py_builtins
            obj: <module 'builtins' (built-in)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_duplicates.py>
            name: @pytest_ar
            obj: <module '_pytest.assertion.rewrite' from '/home/jack/dev/mypf/mypf_hledger/pandaflow/.venv/lib/python3.13/site-packages/_pytest/assertion/rewrite.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_duplicates.py>
            name: pytest
            obj: <module 'pytest' from '/home/jack/dev/mypf/mypf_hledger/pandaflow/.venv/lib/python3.13/site-packages/pytest/__init__.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_duplicates.py>
            name: pd
            obj: <module 'pandas' from '/home/jack/dev/mypf/mypf_hledger/pandaflow/.venv/lib/python3.13/site-packages/pandas/__init__.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_duplicates.py>
            name: CliRunner
            obj: <class 'click.testing.CliRunner'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_duplicates.py>
            name: cli
            obj: <Group cli>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_duplicates.py>
            name: runner
            obj: <pytest_fixture(<function runner at 0x75015e490f40>)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_duplicates.py>
            name: test_duplicates_found
            obj: <function test_duplicates_found at 0x75015e491580>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x75015e402780>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_duplicates_found>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_duplicates.py>
            name: test_duplicates_none_found
            obj: <function test_duplicates_none_found at 0x75015e4916c0>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x75015e402780>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_duplicates_none_found>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_duplicates.py>
            name: test_duplicates_missing_column
            obj: <function test_duplicates_missing_column at 0x75015e491760>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x75015e416450>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_duplicates_missing_column>] [hook]
      finish pytest_make_collect_report --> <CollectReport 'pandaflow/tests/test_cli/test_duplicates.py' lenresult=3 outcome='passed'> [hook]
    genitems <Function test_duplicates_found> [collection]
      pytest_itemcollected [hook]
          item: <Function test_duplicates_found>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_duplicates_none_found> [collection]
      pytest_itemcollected [hook]
          item: <Function test_duplicates_none_found>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_duplicates_missing_column> [collection]
      pytest_itemcollected [hook]
          item: <Function test_duplicates_missing_column>
      finish pytest_itemcollected --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'pandaflow/tests/test_cli/test_duplicates.py' lenresult=3 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <Module test_run.py> [collection]
      pytest_collectstart [hook]
          collector: <Module test_run.py>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Module test_run.py>
      find_module called for: test_run [assertion]
      matched test file '/home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/tests/test_cli/test_run.py' [assertion]
      found cached rewritten pyc for /home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/tests/test_cli/test_run.py [assertion]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_run.py>
            name: @py_builtins
            obj: <module 'builtins' (built-in)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_run.py>
            name: @pytest_ar
            obj: <module '_pytest.assertion.rewrite' from '/home/jack/dev/mypf/mypf_hledger/pandaflow/.venv/lib/python3.13/site-packages/_pytest/assertion/rewrite.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_run.py>
            name: pytest
            obj: <module 'pytest' from '/home/jack/dev/mypf/mypf_hledger/pandaflow/.venv/lib/python3.13/site-packages/pytest/__init__.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_run.py>
            name: CliRunner
            obj: <class 'click.testing.CliRunner'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_run.py>
            name: patch
            obj: <function patch at 0x750177896660>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_run.py>
            name: run
            obj: <Command run>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_run.py>
            name: config_file
            obj: <pytest_fixture(<function config_file at 0x75015e491ee0>)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_run.py>
            name: input_file
            obj: <pytest_fixture(<function input_file at 0x75015e492020>)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_run.py>
            name: input_dir
            obj: <pytest_fixture(<function input_dir at 0x75015e492160>)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_run.py>
            name: test_run_single_file_to_stdout
            obj: <function test_run_single_file_to_stdout at 0x75015e492340>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x75015e4a1260>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_run_single_file_to_stdout>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_run.py>
            name: test_run_directory_to_file
            obj: <function test_run_directory_to_file at 0x75015e492480>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x75015e4a1260>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_run_directory_to_file>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_run.py>
            name: test_run_skipped_files
            obj: <function test_run_skipped_files at 0x75015e4925c0>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x75015e43a650>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_run_skipped_files>] [hook]
      finish pytest_make_collect_report --> <CollectReport 'pandaflow/tests/test_cli/test_run.py' lenresult=3 outcome='passed'> [hook]
    genitems <Function test_run_single_file_to_stdout> [collection]
      pytest_itemcollected [hook]
          item: <Function test_run_single_file_to_stdout>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_run_directory_to_file> [collection]
      pytest_itemcollected [hook]
          item: <Function test_run_directory_to_file>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_run_skipped_files> [collection]
      pytest_itemcollected [hook]
          item: <Function test_run_skipped_files>
      finish pytest_itemcollected --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'pandaflow/tests/test_cli/test_run.py' lenresult=3 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <Module test_strategies.py> [collection]
      pytest_collectstart [hook]
          collector: <Module test_strategies.py>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Module test_strategies.py>
      find_module called for: test_strategies [assertion]
      matched test file '/home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/tests/test_cli/test_strategies.py' [assertion]
      found cached rewritten pyc for /home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/tests/test_cli/test_strategies.py [assertion]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_strategies.py>
            name: @py_builtins
            obj: <module 'builtins' (built-in)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_strategies.py>
            name: @pytest_ar
            obj: <module '_pytest.assertion.rewrite' from '/home/jack/dev/mypf/mypf_hledger/pandaflow/.venv/lib/python3.13/site-packages/_pytest/assertion/rewrite.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_strategies.py>
            name: pytest
            obj: <module 'pytest' from '/home/jack/dev/mypf/mypf_hledger/pandaflow/.venv/lib/python3.13/site-packages/pytest/__init__.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_strategies.py>
            name: CliRunner
            obj: <class 'click.testing.CliRunner'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_strategies.py>
            name: patch
            obj: <function patch at 0x750177896660>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_strategies.py>
            name: cli
            obj: <Group cli>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_strategies.py>
            name: runner
            obj: <pytest_fixture(<function runner at 0x75015e4918a0>)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_strategies.py>
            name: test_strategies_success
            obj: <function test_strategies_success at 0x75015e4927a0>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x75015e439a50>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_strategies_success>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_strategies.py>
            name: test_strategies_none
            obj: <function test_strategies_none at 0x75015e492840>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x75015e4a46e0>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_strategies_none>] [hook]
      finish pytest_make_collect_report --> <CollectReport 'pandaflow/tests/test_cli/test_strategies.py' lenresult=2 outcome='passed'> [hook]
    genitems <Function test_strategies_success> [collection]
      pytest_itemcollected [hook]
          item: <Function test_strategies_success>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_strategies_none> [collection]
      pytest_itemcollected [hook]
          item: <Function test_strategies_none>
      finish pytest_itemcollected --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'pandaflow/tests/test_cli/test_strategies.py' lenresult=2 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'pandaflow/tests/test_cli' lenresult=5 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <Dir test_core> [collection]
      pytest_collectstart [hook]
          collector: <Dir test_core>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Dir test_core>
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x750178ba7b60>
            collection_path: /home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/tests/test_core/__pycache__
            path: /home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/tests/test_core/__pycache__
        finish pytest_ignore_collect --> True [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x750178ba7b60>
            collection_path: /home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/tests/test_core/test_archiver.py
            path: /home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/tests/test_core/test_archiver.py
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Dir test_core>
            file_path: /home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/tests/test_core/test_archiver.py
            path: /home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/tests/test_core/test_archiver.py
          pytest_pycollect_makemodule [hook]
              parent: <Dir test_core>
              module_path: /home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/tests/test_core/test_archiver.py
              path: /home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/tests/test_core/test_archiver.py
          finish pytest_pycollect_makemodule --> <Module test_archiver.py> [hook]
        finish pytest_collect_file --> [<Module test_archiver.py>] [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x750178ba7b60>
            collection_path: /home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/tests/test_core/test_config.py
            path: /home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/tests/test_core/test_config.py
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Dir test_core>
            file_path: /home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/tests/test_core/test_config.py
            path: /home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/tests/test_core/test_config.py
          pytest_pycollect_makemodule [hook]
              parent: <Dir test_core>
              module_path: /home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/tests/test_core/test_config.py
              path: /home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/tests/test_core/test_config.py
          finish pytest_pycollect_makemodule --> <Module test_config.py> [hook]
        finish pytest_collect_file --> [<Module test_config.py>] [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x750178ba7b60>
            collection_path: /home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/tests/test_core/test_factory.py
            path: /home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/tests/test_core/test_factory.py
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Dir test_core>
            file_path: /home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/tests/test_core/test_factory.py
            path: /home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/tests/test_core/test_factory.py
          pytest_pycollect_makemodule [hook]
              parent: <Dir test_core>
              module_path: /home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/tests/test_core/test_factory.py
              path: /home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/tests/test_core/test_factory.py
          finish pytest_pycollect_makemodule --> <Module test_factory.py> [hook]
        finish pytest_collect_file --> [<Module test_factory.py>] [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x750178ba7b60>
            collection_path: /home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/tests/test_core/test_registry.py
            path: /home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/tests/test_core/test_registry.py
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Dir test_core>
            file_path: /home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/tests/test_core/test_registry.py
            path: /home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/tests/test_core/test_registry.py
          pytest_pycollect_makemodule [hook]
              parent: <Dir test_core>
              module_path: /home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/tests/test_core/test_registry.py
              path: /home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/tests/test_core/test_registry.py
          finish pytest_pycollect_makemodule --> <Module test_registry.py> [hook]
        finish pytest_collect_file --> [<Module test_registry.py>] [hook]
      finish pytest_make_collect_report --> <CollectReport 'pandaflow/tests/test_core' lenresult=4 outcome='passed'> [hook]
    genitems <Module test_archiver.py> [collection]
      pytest_collectstart [hook]
          collector: <Module test_archiver.py>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Module test_archiver.py>
      find_module called for: test_archiver [assertion]
      matched test file '/home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/tests/test_core/test_archiver.py' [assertion]
      found cached rewritten pyc for /home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/tests/test_core/test_archiver.py [assertion]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_archiver.py>
            name: @py_builtins
            obj: <module 'builtins' (built-in)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_archiver.py>
            name: @pytest_ar
            obj: <module '_pytest.assertion.rewrite' from '/home/jack/dev/mypf/mypf_hledger/pandaflow/.venv/lib/python3.13/site-packages/_pytest/assertion/rewrite.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_archiver.py>
            name: pd
            obj: <module 'pandas' from '/home/jack/dev/mypf/mypf_hledger/pandaflow/.venv/lib/python3.13/site-packages/pandas/__init__.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_archiver.py>
            name: pytest
            obj: <module 'pytest' from '/home/jack/dev/mypf/mypf_hledger/pandaflow/.venv/lib/python3.13/site-packages/pytest/__init__.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_archiver.py>
            name: archive_csv_by_date
            obj: <function archive_csv_by_date at 0x75015e477f60>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_archiver.py>
            name: sample_csv
            obj: <pytest_fixture(<function sample_csv at 0x75015e492de0>)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_archiver.py>
            name: test_archive_by_month_creates_correct_files
            obj: <function test_archive_by_month_creates_correct_files at 0x75015e492f20>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x75015e4a4aa0>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_archive_by_month_creates_correct_files>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_archiver.py>
            name: test_archive_by_year_creates_correct_structure
            obj: <function test_archive_by_year_creates_correct_structure at 0x75015e492fc0>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x75015e482890>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_archive_by_year_creates_correct_structure>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_archiver.py>
            name: test_invalid_date_column_raises_error
            obj: <function test_invalid_date_column_raises_error at 0x75015e493060>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x75015e482890>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_invalid_date_column_raises_error>] [hook]
      finish pytest_make_collect_report --> <CollectReport 'pandaflow/tests/test_core/test_archiver.py' lenresult=3 outcome='passed'> [hook]
    genitems <Function test_archive_by_month_creates_correct_files> [collection]
      pytest_itemcollected [hook]
          item: <Function test_archive_by_month_creates_correct_files>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_archive_by_year_creates_correct_structure> [collection]
      pytest_itemcollected [hook]
          item: <Function test_archive_by_year_creates_correct_structure>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_invalid_date_column_raises_error> [collection]
      pytest_itemcollected [hook]
          item: <Function test_invalid_date_column_raises_error>
      finish pytest_itemcollected --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'pandaflow/tests/test_core/test_archiver.py' lenresult=3 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <Module test_config.py> [collection]
      pytest_collectstart [hook]
          collector: <Module test_config.py>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Module test_config.py>
      find_module called for: test_config [assertion]
      matched test file '/home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/tests/test_core/test_config.py' [assertion]
      found cached rewritten pyc for /home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/tests/test_core/test_config.py [assertion]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_config.py>
            name: @py_builtins
            obj: <module 'builtins' (built-in)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_config.py>
            name: @pytest_ar
            obj: <module '_pytest.assertion.rewrite' from '/home/jack/dev/mypf/mypf_hledger/pandaflow/.venv/lib/python3.13/site-packages/_pytest/assertion/rewrite.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_config.py>
            name: pytest
            obj: <module 'pytest' from '/home/jack/dev/mypf/mypf_hledger/pandaflow/.venv/lib/python3.13/site-packages/pytest/__init__.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_config.py>
            name: tempfile
            obj: <module 'tempfile' from '/home/jack/.pyenv/versions/3.13.1/lib/python3.13/tempfile.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_config.py>
            name: json
            obj: <module 'json' from '/home/jack/.pyenv/versions/3.13.1/lib/python3.13/json/__init__.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_config.py>
            name: toml
            obj: <module 'toml' from '/home/jack/dev/mypf/mypf_hledger/pandaflow/.venv/lib/python3.13/site-packages/toml/__init__.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_config.py>
            name: Path
            obj: <class 'pathlib._local.Path'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_config.py>
            name: load_config
            obj: <function load_config at 0x7501770a65c0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_config.py>
            name: validate_config
            obj: <function validate_config at 0x7501778b80e0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_config.py>
            name: valid_config_dict
            obj: <pytest_fixture(<function valid_config_dict at 0x75015e493b00>)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_config.py>
            name: test_validate_config_accepts_valid_schema
            obj: <function test_validate_config_accepts_valid_schema at 0x75015e493c40>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x75015e465f30>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_validate_config_accepts_valid_schema>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_config.py>
            name: test_load_json_config
            obj: <function test_load_json_config at 0x75015e493ce0>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x75015e5c6d50>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_load_json_config>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_config.py>
            name: test_load_toml_config
            obj: <function test_load_toml_config at 0x75015e493d80>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x750177cc4c50>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_load_toml_config>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_config.py>
            name: test_load_config_unsupported_extension
            obj: <function test_load_config_unsupported_extension at 0x75015e493e20>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x75015e40b540>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_load_config_unsupported_extension>] [hook]
      finish pytest_make_collect_report --> <CollectReport 'pandaflow/tests/test_core/test_config.py' lenresult=4 outcome='passed'> [hook]
    genitems <Function test_validate_config_accepts_valid_schema> [collection]
      pytest_itemcollected [hook]
          item: <Function test_validate_config_accepts_valid_schema>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_load_json_config> [collection]
      pytest_itemcollected [hook]
          item: <Function test_load_json_config>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_load_toml_config> [collection]
      pytest_itemcollected [hook]
          item: <Function test_load_toml_config>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_load_config_unsupported_extension> [collection]
      pytest_itemcollected [hook]
          item: <Function test_load_config_unsupported_extension>
      finish pytest_itemcollected --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'pandaflow/tests/test_core/test_config.py' lenresult=4 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <Module test_factory.py> [collection]
      pytest_collectstart [hook]
          collector: <Module test_factory.py>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Module test_factory.py>
      find_module called for: test_factory [assertion]
      matched test file '/home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/tests/test_core/test_factory.py' [assertion]
      found cached rewritten pyc for /home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/tests/test_core/test_factory.py [assertion]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_factory.py>
            name: @py_builtins
            obj: <module 'builtins' (built-in)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_factory.py>
            name: @pytest_ar
            obj: <module '_pytest.assertion.rewrite' from '/home/jack/dev/mypf/mypf_hledger/pandaflow/.venv/lib/python3.13/site-packages/_pytest/assertion/rewrite.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_factory.py>
            name: pytest
            obj: <module 'pytest' from '/home/jack/dev/mypf/mypf_hledger/pandaflow/.venv/lib/python3.13/site-packages/pytest/__init__.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_factory.py>
            name: patch
            obj: <function patch at 0x750177896660>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_factory.py>
            name: StrategyFactory
            obj: <class 'pandaflow.core.factory.StrategyFactory'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_factory.py>
            name: TransformationStrategy
            obj: <class 'pandaflow.strategies.base.TransformationStrategy'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_factory.py>
            name: DummyStrategy
            obj: <class 'test_factory.DummyStrategy'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_factory.py>
            name: dummy_registry
            obj: <pytest_fixture(<function dummy_registry at 0x75015e493600>)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_factory.py>
            name: test_factory_initialization
            obj: <function test_factory_initialization at 0x75015e4c4040>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x75015e40b960>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_factory_initialization>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_factory.py>
            name: test_get_strategy_by_name_and_version
            obj: <function test_get_strategy_by_name_and_version at 0x75015e4c4180>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x750177db5270>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_get_strategy_by_name_and_version>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_factory.py>
            name: test_get_strategy_by_name_highest_version
            obj: <function test_get_strategy_by_name_highest_version at 0x75015e4c42c0>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x75015e491950>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_get_strategy_by_name_highest_version>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_factory.py>
            name: test_get_strategy_missing_name_raises
            obj: <function test_get_strategy_missing_name_raises at 0x75015e4c4400>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x75015e491e50>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_get_strategy_missing_name_raises>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_factory.py>
            name: test_get_strategy_missing_version_raises
            obj: <function test_get_strategy_missing_version_raises at 0x75015e4c4540>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x75015e491810>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_get_strategy_missing_version_raises>] [hook]
      finish pytest_make_collect_report --> <CollectReport 'pandaflow/tests/test_core/test_factory.py' lenresult=5 outcome='passed'> [hook]
    genitems <Function test_factory_initialization> [collection]
      pytest_itemcollected [hook]
          item: <Function test_factory_initialization>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_get_strategy_by_name_and_version> [collection]
      pytest_itemcollected [hook]
          item: <Function test_get_strategy_by_name_and_version>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_get_strategy_by_name_highest_version> [collection]
      pytest_itemcollected [hook]
          item: <Function test_get_strategy_by_name_highest_version>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_get_strategy_missing_name_raises> [collection]
      pytest_itemcollected [hook]
          item: <Function test_get_strategy_missing_name_raises>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_get_strategy_missing_version_raises> [collection]
      pytest_itemcollected [hook]
          item: <Function test_get_strategy_missing_version_raises>
      finish pytest_itemcollected --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'pandaflow/tests/test_core/test_factory.py' lenresult=5 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <Module test_registry.py> [collection]
      pytest_collectstart [hook]
          collector: <Module test_registry.py>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Module test_registry.py>
      find_module called for: test_registry [assertion]
      matched test file '/home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/tests/test_core/test_registry.py' [assertion]
      found cached rewritten pyc for /home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/tests/test_core/test_registry.py [assertion]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_registry.py>
            name: @py_builtins
            obj: <module 'builtins' (built-in)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_registry.py>
            name: @pytest_ar
            obj: <module '_pytest.assertion.rewrite' from '/home/jack/dev/mypf/mypf_hledger/pandaflow/.venv/lib/python3.13/site-packages/_pytest/assertion/rewrite.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_registry.py>
            name: MagicMock
            obj: <class 'unittest.mock.MagicMock'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_registry.py>
            name: patch
            obj: <function patch at 0x750177896660>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_registry.py>
            name: get_registered_strategies
            obj: <function get_registered_strategies at 0x75015e477380>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_registry.py>
            name: load_strategies
            obj: <function load_strategies at 0x75015e477600>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_registry.py>
            name: TransformationStrategy
            obj: <class 'pandaflow.strategies.base.TransformationStrategy'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_registry.py>
            name: DummyStrategy
            obj: <class 'test_registry.DummyStrategy'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_registry.py>
            name: make_entry_point
            obj: <function make_entry_point at 0x75015e4c4a40>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_registry.py>
            name: test_get_registered_strategies_success
            obj: <function test_get_registered_strategies_success at 0x75015e4c4b80>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x75015e4c49b0>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_get_registered_strategies_success>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_registry.py>
            name: test_load_strategies_success
            obj: <function test_load_strategies_success at 0x75015e4c4cc0>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x75015e4c5090>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_load_strategies_success>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_registry.py>
            name: test_load_strategies_invalid_type
            obj: <function test_load_strategies_invalid_type at 0x75015e4c4e00>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x75015e4c51d0>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_load_strategies_invalid_type>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_registry.py>
            name: test_load_strategies_attribute_error_fallback
            obj: <function test_load_strategies_attribute_error_fallback at 0x75015e4c4f40>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x75015e4c5310>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_load_strategies_attribute_error_fallback>] [hook]
      finish pytest_make_collect_report --> <CollectReport 'pandaflow/tests/test_core/test_registry.py' lenresult=4 outcome='passed'> [hook]
    genitems <Function test_get_registered_strategies_success> [collection]
      pytest_itemcollected [hook]
          item: <Function test_get_registered_strategies_success>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_load_strategies_success> [collection]
      pytest_itemcollected [hook]
          item: <Function test_load_strategies_success>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_load_strategies_invalid_type> [collection]
      pytest_itemcollected [hook]
          item: <Function test_load_strategies_invalid_type>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_load_strategies_attribute_error_fallback> [collection]
      pytest_itemcollected [hook]
          item: <Function test_load_strategies_attribute_error_fallback>
      finish pytest_itemcollected --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'pandaflow/tests/test_core/test_registry.py' lenresult=4 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'pandaflow/tests/test_core' lenresult=4 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <Dir test_strategies> [collection]
      pytest_collectstart [hook]
          collector: <Dir test_strategies>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Dir test_strategies>
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x750178ba7b60>
            collection_path: /home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/tests/test_strategies/__pycache__
            path: /home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/tests/test_strategies/__pycache__
        finish pytest_ignore_collect --> True [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x750178ba7b60>
            collection_path: /home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/tests/test_strategies/test_base.py
            path: /home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/tests/test_strategies/test_base.py
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Dir test_strategies>
            file_path: /home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/tests/test_strategies/test_base.py
            path: /home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/tests/test_strategies/test_base.py
          pytest_pycollect_makemodule [hook]
              parent: <Dir test_strategies>
              module_path: /home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/tests/test_strategies/test_base.py
              path: /home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/tests/test_strategies/test_base.py
          finish pytest_pycollect_makemodule --> <Module test_base.py> [hook]
        finish pytest_collect_file --> [<Module test_base.py>] [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x750178ba7b60>
            collection_path: /home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/tests/test_strategies/test_calculate_amount.py
            path: /home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/tests/test_strategies/test_calculate_amount.py
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Dir test_strategies>
            file_path: /home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/tests/test_strategies/test_calculate_amount.py
            path: /home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/tests/test_strategies/test_calculate_amount.py
          pytest_pycollect_makemodule [hook]
              parent: <Dir test_strategies>
              module_path: /home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/tests/test_strategies/test_calculate_amount.py
              path: /home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/tests/test_strategies/test_calculate_amount.py
          finish pytest_pycollect_makemodule --> <Module test_calculate_amount.py> [hook]
        finish pytest_collect_file --> [<Module test_calculate_amount.py>] [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x750178ba7b60>
            collection_path: /home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/tests/test_strategies/test_calculate_ratio.py
            path: /home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/tests/test_strategies/test_calculate_ratio.py
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Dir test_strategies>
            file_path: /home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/tests/test_strategies/test_calculate_ratio.py
            path: /home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/tests/test_strategies/test_calculate_ratio.py
          pytest_pycollect_makemodule [hook]
              parent: <Dir test_strategies>
              module_path: /home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/tests/test_strategies/test_calculate_ratio.py
              path: /home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/tests/test_strategies/test_calculate_ratio.py
          finish pytest_pycollect_makemodule --> <Module test_calculate_ratio.py> [hook]
        finish pytest_collect_file --> [<Module test_calculate_ratio.py>] [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x750178ba7b60>
            collection_path: /home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/tests/test_strategies/test_constant.py
            path: /home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/tests/test_strategies/test_constant.py
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Dir test_strategies>
            file_path: /home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/tests/test_strategies/test_constant.py
            path: /home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/tests/test_strategies/test_constant.py
          pytest_pycollect_makemodule [hook]
              parent: <Dir test_strategies>
              module_path: /home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/tests/test_strategies/test_constant.py
              path: /home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/tests/test_strategies/test_constant.py
          finish pytest_pycollect_makemodule --> <Module test_constant.py> [hook]
        finish pytest_collect_file --> [<Module test_constant.py>] [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x750178ba7b60>
            collection_path: /home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/tests/test_strategies/test_copy.py
            path: /home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/tests/test_strategies/test_copy.py
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Dir test_strategies>
            file_path: /home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/tests/test_strategies/test_copy.py
            path: /home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/tests/test_strategies/test_copy.py
          pytest_pycollect_makemodule [hook]
              parent: <Dir test_strategies>
              module_path: /home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/tests/test_strategies/test_copy.py
              path: /home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/tests/test_strategies/test_copy.py
          finish pytest_pycollect_makemodule --> <Module test_copy.py> [hook]
        finish pytest_collect_file --> [<Module test_copy.py>] [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x750178ba7b60>
            collection_path: /home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/tests/test_strategies/test_csvfile.py
            path: /home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/tests/test_strategies/test_csvfile.py
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Dir test_strategies>
            file_path: /home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/tests/test_strategies/test_csvfile.py
            path: /home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/tests/test_strategies/test_csvfile.py
          pytest_pycollect_makemodule [hook]
              parent: <Dir test_strategies>
              module_path: /home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/tests/test_strategies/test_csvfile.py
              path: /home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/tests/test_strategies/test_csvfile.py
          finish pytest_pycollect_makemodule --> <Module test_csvfile.py> [hook]
        finish pytest_collect_file --> [<Module test_csvfile.py>] [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x750178ba7b60>
            collection_path: /home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/tests/test_strategies/test_debug.py
            path: /home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/tests/test_strategies/test_debug.py
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Dir test_strategies>
            file_path: /home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/tests/test_strategies/test_debug.py
            path: /home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/tests/test_strategies/test_debug.py
          pytest_pycollect_makemodule [hook]
              parent: <Dir test_strategies>
              module_path: /home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/tests/test_strategies/test_debug.py
              path: /home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/tests/test_strategies/test_debug.py
          finish pytest_pycollect_makemodule --> <Module test_debug.py> [hook]
        finish pytest_collect_file --> [<Module test_debug.py>] [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x750178ba7b60>
            collection_path: /home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/tests/test_strategies/test_deduplicate.py
            path: /home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/tests/test_strategies/test_deduplicate.py
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Dir test_strategies>
            file_path: /home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/tests/test_strategies/test_deduplicate.py
            path: /home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/tests/test_strategies/test_deduplicate.py
          pytest_pycollect_makemodule [hook]
              parent: <Dir test_strategies>
              module_path: /home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/tests/test_strategies/test_deduplicate.py
              path: /home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/tests/test_strategies/test_deduplicate.py
          finish pytest_pycollect_makemodule --> <Module test_deduplicate.py> [hook]
        finish pytest_collect_file --> [<Module test_deduplicate.py>] [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x750178ba7b60>
            collection_path: /home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/tests/test_strategies/test_drop.py
            path: /home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/tests/test_strategies/test_drop.py
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Dir test_strategies>
            file_path: /home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/tests/test_strategies/test_drop.py
            path: /home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/tests/test_strategies/test_drop.py
          pytest_pycollect_makemodule [hook]
              parent: <Dir test_strategies>
              module_path: /home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/tests/test_strategies/test_drop.py
              path: /home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/tests/test_strategies/test_drop.py
          finish pytest_pycollect_makemodule --> <Module test_drop.py> [hook]
        finish pytest_collect_file --> [<Module test_drop.py>] [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x750178ba7b60>
            collection_path: /home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/tests/test_strategies/test_filter.py
            path: /home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/tests/test_strategies/test_filter.py
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Dir test_strategies>
            file_path: /home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/tests/test_strategies/test_filter.py
            path: /home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/tests/test_strategies/test_filter.py
          pytest_pycollect_makemodule [hook]
              parent: <Dir test_strategies>
              module_path: /home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/tests/test_strategies/test_filter.py
              path: /home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/tests/test_strategies/test_filter.py
          finish pytest_pycollect_makemodule --> <Module test_filter.py> [hook]
        finish pytest_collect_file --> [<Module test_filter.py>] [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x750178ba7b60>
            collection_path: /home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/tests/test_strategies/test_hash.py
            path: /home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/tests/test_strategies/test_hash.py
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Dir test_strategies>
            file_path: /home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/tests/test_strategies/test_hash.py
            path: /home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/tests/test_strategies/test_hash.py
          pytest_pycollect_makemodule [hook]
              parent: <Dir test_strategies>
              module_path: /home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/tests/test_strategies/test_hash.py
              path: /home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/tests/test_strategies/test_hash.py
          finish pytest_pycollect_makemodule --> <Module test_hash.py> [hook]
        finish pytest_collect_file --> [<Module test_hash.py>] [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x750178ba7b60>
            collection_path: /home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/tests/test_strategies/test_merge.py
            path: /home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/tests/test_strategies/test_merge.py
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Dir test_strategies>
            file_path: /home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/tests/test_strategies/test_merge.py
            path: /home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/tests/test_strategies/test_merge.py
          pytest_pycollect_makemodule [hook]
              parent: <Dir test_strategies>
              module_path: /home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/tests/test_strategies/test_merge.py
              path: /home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/tests/test_strategies/test_merge.py
          finish pytest_pycollect_makemodule --> <Module test_merge.py> [hook]
        finish pytest_collect_file --> [<Module test_merge.py>] [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x750178ba7b60>
            collection_path: /home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/tests/test_strategies/test_mergestring.py
            path: /home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/tests/test_strategies/test_mergestring.py
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Dir test_strategies>
            file_path: /home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/tests/test_strategies/test_mergestring.py
            path: /home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/tests/test_strategies/test_mergestring.py
          pytest_pycollect_makemodule [hook]
              parent: <Dir test_strategies>
              module_path: /home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/tests/test_strategies/test_mergestring.py
              path: /home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/tests/test_strategies/test_mergestring.py
          finish pytest_pycollect_makemodule --> <Module test_mergestring.py> [hook]
        finish pytest_collect_file --> [<Module test_mergestring.py>] [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x750178ba7b60>
            collection_path: /home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/tests/test_strategies/test_regex.py
            path: /home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/tests/test_strategies/test_regex.py
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Dir test_strategies>
            file_path: /home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/tests/test_strategies/test_regex.py
            path: /home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/tests/test_strategies/test_regex.py
          pytest_pycollect_makemodule [hook]
              parent: <Dir test_strategies>
              module_path: /home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/tests/test_strategies/test_regex.py
              path: /home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/tests/test_strategies/test_regex.py
          finish pytest_pycollect_makemodule --> <Module test_regex.py> [hook]
        finish pytest_collect_file --> [<Module test_regex.py>] [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x750178ba7b60>
            collection_path: /home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/tests/test_strategies/test_reorder_columns.py
            path: /home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/tests/test_strategies/test_reorder_columns.py
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Dir test_strategies>
            file_path: /home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/tests/test_strategies/test_reorder_columns.py
            path: /home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/tests/test_strategies/test_reorder_columns.py
          pytest_pycollect_makemodule [hook]
              parent: <Dir test_strategies>
              module_path: /home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/tests/test_strategies/test_reorder_columns.py
              path: /home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/tests/test_strategies/test_reorder_columns.py
          finish pytest_pycollect_makemodule --> <Module test_reorder_columns.py> [hook]
        finish pytest_collect_file --> [<Module test_reorder_columns.py>] [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x750178ba7b60>
            collection_path: /home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/tests/test_strategies/test_replace.py
            path: /home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/tests/test_strategies/test_replace.py
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Dir test_strategies>
            file_path: /home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/tests/test_strategies/test_replace.py
            path: /home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/tests/test_strategies/test_replace.py
          pytest_pycollect_makemodule [hook]
              parent: <Dir test_strategies>
              module_path: /home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/tests/test_strategies/test_replace.py
              path: /home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/tests/test_strategies/test_replace.py
          finish pytest_pycollect_makemodule --> <Module test_replace.py> [hook]
        finish pytest_collect_file --> [<Module test_replace.py>] [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x750178ba7b60>
            collection_path: /home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/tests/test_strategies/test_sort_by_column.py
            path: /home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/tests/test_strategies/test_sort_by_column.py
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Dir test_strategies>
            file_path: /home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/tests/test_strategies/test_sort_by_column.py
            path: /home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/tests/test_strategies/test_sort_by_column.py
          pytest_pycollect_makemodule [hook]
              parent: <Dir test_strategies>
              module_path: /home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/tests/test_strategies/test_sort_by_column.py
              path: /home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/tests/test_strategies/test_sort_by_column.py
          finish pytest_pycollect_makemodule --> <Module test_sort_by_column.py> [hook]
        finish pytest_collect_file --> [<Module test_sort_by_column.py>] [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x750178ba7b60>
            collection_path: /home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/tests/test_strategies/test_split_column.py
            path: /home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/tests/test_strategies/test_split_column.py
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Dir test_strategies>
            file_path: /home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/tests/test_strategies/test_split_column.py
            path: /home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/tests/test_strategies/test_split_column.py
          pytest_pycollect_makemodule [hook]
              parent: <Dir test_strategies>
              module_path: /home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/tests/test_strategies/test_split_column.py
              path: /home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/tests/test_strategies/test_split_column.py
          finish pytest_pycollect_makemodule --> <Module test_split_column.py> [hook]
        finish pytest_collect_file --> [<Module test_split_column.py>] [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x750178ba7b60>
            collection_path: /home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/tests/test_strategies/test_uuid.py
            path: /home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/tests/test_strategies/test_uuid.py
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Dir test_strategies>
            file_path: /home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/tests/test_strategies/test_uuid.py
            path: /home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/tests/test_strategies/test_uuid.py
          pytest_pycollect_makemodule [hook]
              parent: <Dir test_strategies>
              module_path: /home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/tests/test_strategies/test_uuid.py
              path: /home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/tests/test_strategies/test_uuid.py
          finish pytest_pycollect_makemodule --> <Module test_uuid.py> [hook]
        finish pytest_collect_file --> [<Module test_uuid.py>] [hook]
      finish pytest_make_collect_report --> <CollectReport 'pandaflow/tests/test_strategies' lenresult=19 outcome='passed'> [hook]
    genitems <Module test_base.py> [collection]
      pytest_collectstart [hook]
          collector: <Module test_base.py>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Module test_base.py>
      find_module called for: test_base [assertion]
      matched test file '/home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/tests/test_strategies/test_base.py' [assertion]
      found cached rewritten pyc for /home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/tests/test_strategies/test_base.py [assertion]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_base.py>
            name: @py_builtins
            obj: <module 'builtins' (built-in)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_base.py>
            name: @pytest_ar
            obj: <module '_pytest.assertion.rewrite' from '/home/jack/dev/mypf/mypf_hledger/pandaflow/.venv/lib/python3.13/site-packages/_pytest/assertion/rewrite.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_base.py>
            name: pd
            obj: <module 'pandas' from '/home/jack/dev/mypf/mypf_hledger/pandaflow/.venv/lib/python3.13/site-packages/pandas/__init__.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_base.py>
            name: pytest
            obj: <module 'pytest' from '/home/jack/dev/mypf/mypf_hledger/pandaflow/.venv/lib/python3.13/site-packages/pytest/__init__.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_base.py>
            name: TransformationStrategy
            obj: <class 'pandaflow.strategies.base.TransformationStrategy'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_base.py>
            name: DummyStrategy
            obj: <class 'test_base.DummyStrategy'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_base.py>
            name: test_run_applies_strategy
            obj: <function test_run_applies_strategy at 0x75015e4c5260>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x750177d00cd0>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_run_applies_strategy>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_base.py>
            name: test_check_valid_rule
            obj: <function test_check_valid_rule at 0x75015e4c49a0>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x75015e491950>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_check_valid_rule>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_base.py>
            name: test_check_invalid_rule_raises
            obj: <function test_check_invalid_rule_raises at 0x75015e4c5120>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x75015e491e50>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_check_invalid_rule_raises>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_base.py>
            name: test_validate_rule_not_implemented
            obj: <function test_validate_rule_not_implemented at 0x75015e4c5080>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x75015e4c5450>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_validate_rule_not_implemented>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_base.py>
            name: test_apply_not_implemented
            obj: <function test_apply_not_implemented at 0x75015e4c53a0>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x75015e4c5590>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_apply_not_implemented>] [hook]
      finish pytest_make_collect_report --> <CollectReport 'pandaflow/tests/test_strategies/test_base.py' lenresult=5 outcome='passed'> [hook]
    genitems <Function test_run_applies_strategy> [collection]
      pytest_itemcollected [hook]
          item: <Function test_run_applies_strategy>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_check_valid_rule> [collection]
      pytest_itemcollected [hook]
          item: <Function test_check_valid_rule>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_check_invalid_rule_raises> [collection]
      pytest_itemcollected [hook]
          item: <Function test_check_invalid_rule_raises>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_validate_rule_not_implemented> [collection]
      pytest_itemcollected [hook]
          item: <Function test_validate_rule_not_implemented>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_apply_not_implemented> [collection]
      pytest_itemcollected [hook]
          item: <Function test_apply_not_implemented>
      finish pytest_itemcollected --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'pandaflow/tests/test_strategies/test_base.py' lenresult=5 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <Module test_calculate_amount.py> [collection]
      pytest_collectstart [hook]
          collector: <Module test_calculate_amount.py>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Module test_calculate_amount.py>
      find_module called for: test_calculate_amount [assertion]
      matched test file '/home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/tests/test_strategies/test_calculate_amount.py' [assertion]
      found cached rewritten pyc for /home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/tests/test_strategies/test_calculate_amount.py [assertion]
      early skip of rewriting module: pandaflow.strategies.calculate_amount [assertion]
      early skip of rewriting module: pandaflow.utils [assertion]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_calculate_amount.py>
            name: @py_builtins
            obj: <module 'builtins' (built-in)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_calculate_amount.py>
            name: @pytest_ar
            obj: <module '_pytest.assertion.rewrite' from '/home/jack/dev/mypf/mypf_hledger/pandaflow/.venv/lib/python3.13/site-packages/_pytest/assertion/rewrite.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_calculate_amount.py>
            name: pytest
            obj: <module 'pytest' from '/home/jack/dev/mypf/mypf_hledger/pandaflow/.venv/lib/python3.13/site-packages/pytest/__init__.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_calculate_amount.py>
            name: pd
            obj: <module 'pandas' from '/home/jack/dev/mypf/mypf_hledger/pandaflow/.venv/lib/python3.13/site-packages/pandas/__init__.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_calculate_amount.py>
            name: assert_frame_equal
            obj: <function assert_frame_equal at 0x75015e57dbc0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_calculate_amount.py>
            name: CalculateAmountStrategy
            obj: <class 'pandaflow.strategies.calculate_amount.CalculateAmountStrategy'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_calculate_amount.py>
            name: CalculateAmountRule
            obj: <class 'pandaflow.strategies.calculate_amount.CalculateAmountRule'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_calculate_amount.py>
            name: strategy
            obj: <pytest_fixture(<function strategy at 0x75015e4c58a0>)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_calculate_amount.py>
            name: test_validate_rule_parses_correctly
            obj: <function test_validate_rule_parses_correctly at 0x75015e4c5c60>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x750177d00cd0>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_validate_rule_parses_correctly>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_calculate_amount.py>
            name: test_apply_calculates_and_formats_amount
            obj: <function test_apply_calculates_and_formats_amount at 0x75015e4c6340>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x75015e493430>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_apply_calculates_and_formats_amount>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_calculate_amount.py>
            name: test_apply_without_output_rule
            obj: <function test_apply_without_output_rule at 0x75015e4c63e0>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x75015e491e50>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_apply_without_output_rule>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_calculate_amount.py>
            name: test_apply_with_invalid_formula_raises
            obj: <function test_apply_with_invalid_formula_raises at 0x75015e4c6480>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x75015e492a30>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_apply_with_invalid_formula_raises>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_calculate_amount.py>
            name: test_validate_rule
            obj: <function test_validate_rule at 0x75015e4c6520>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x75015e4c5450>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_validate_rule>] [hook]
      finish pytest_make_collect_report --> <CollectReport 'pandaflow/tests/test_strategies/test_calculate_amount.py' lenresult=5 outcome='passed'> [hook]
    genitems <Function test_validate_rule_parses_correctly> [collection]
      pytest_itemcollected [hook]
          item: <Function test_validate_rule_parses_correctly>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_apply_calculates_and_formats_amount> [collection]
      pytest_itemcollected [hook]
          item: <Function test_apply_calculates_and_formats_amount>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_apply_without_output_rule> [collection]
      pytest_itemcollected [hook]
          item: <Function test_apply_without_output_rule>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_apply_with_invalid_formula_raises> [collection]
      pytest_itemcollected [hook]
          item: <Function test_apply_with_invalid_formula_raises>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_validate_rule> [collection]
      pytest_itemcollected [hook]
          item: <Function test_validate_rule>
      finish pytest_itemcollected --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'pandaflow/tests/test_strategies/test_calculate_amount.py' lenresult=5 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <Module test_calculate_ratio.py> [collection]
      pytest_collectstart [hook]
          collector: <Module test_calculate_ratio.py>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Module test_calculate_ratio.py>
      find_module called for: test_calculate_ratio [assertion]
      matched test file '/home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/tests/test_strategies/test_calculate_ratio.py' [assertion]
      found cached rewritten pyc for /home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/tests/test_strategies/test_calculate_ratio.py [assertion]
      early skip of rewriting module: pandaflow.strategies.calculate_ratio [assertion]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_calculate_ratio.py>
            name: @py_builtins
            obj: <module 'builtins' (built-in)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_calculate_ratio.py>
            name: @pytest_ar
            obj: <module '_pytest.assertion.rewrite' from '/home/jack/dev/mypf/mypf_hledger/pandaflow/.venv/lib/python3.13/site-packages/_pytest/assertion/rewrite.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_calculate_ratio.py>
            name: np
            obj: <module 'numpy' from '/home/jack/dev/mypf/mypf_hledger/pandaflow/.venv/lib/python3.13/site-packages/numpy/__init__.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_calculate_ratio.py>
            name: pytest
            obj: <module 'pytest' from '/home/jack/dev/mypf/mypf_hledger/pandaflow/.venv/lib/python3.13/site-packages/pytest/__init__.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_calculate_ratio.py>
            name: pd
            obj: <module 'pandas' from '/home/jack/dev/mypf/mypf_hledger/pandaflow/.venv/lib/python3.13/site-packages/pandas/__init__.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_calculate_ratio.py>
            name: CalculateRatioStrategy
            obj: <class 'pandaflow.strategies.calculate_ratio.CalculateRatioStrategy'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_calculate_ratio.py>
            name: sample_df
            obj: <pytest_fixture(<function sample_df at 0x75015e4c67a0>)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_calculate_ratio.py>
            name: test_basic_ratio
            obj: <function test_basic_ratio at 0x75015e4c6ac0>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x75015e4c6fd0>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_basic_ratio>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_calculate_ratio.py>
            name: test_ratio_with_rounding
            obj: <function test_ratio_with_rounding at 0x75015e4c6ca0>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x75015e4c7110>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_ratio_with_rounding>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_calculate_ratio.py>
            name: test_missing_numerator
            obj: <function test_missing_numerator at 0x75015e4c6d40>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x75015e4c7250>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_missing_numerator>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_calculate_ratio.py>
            name: test_missing_denominator
            obj: <function test_missing_denominator at 0x75015e4c6de0>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x750177d00cd0>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_missing_denominator>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_calculate_ratio.py>
            name: test_division_by_zero
            obj: <function test_division_by_zero at 0x75015e4c6e80>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x75015e491950>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_division_by_zero>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_calculate_ratio.py>
            name: test_custom_field_name
            obj: <function test_custom_field_name at 0x75015e4c6f20>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x75015e491e50>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_custom_field_name>] [hook]
      finish pytest_make_collect_report --> <CollectReport 'pandaflow/tests/test_strategies/test_calculate_ratio.py' lenresult=6 outcome='passed'> [hook]
    genitems <Function test_basic_ratio> [collection]
      pytest_itemcollected [hook]
          item: <Function test_basic_ratio>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_ratio_with_rounding> [collection]
      pytest_itemcollected [hook]
          item: <Function test_ratio_with_rounding>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_missing_numerator> [collection]
      pytest_itemcollected [hook]
          item: <Function test_missing_numerator>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_missing_denominator> [collection]
      pytest_itemcollected [hook]
          item: <Function test_missing_denominator>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_division_by_zero> [collection]
      pytest_itemcollected [hook]
          item: <Function test_division_by_zero>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_custom_field_name> [collection]
      pytest_itemcollected [hook]
          item: <Function test_custom_field_name>
      finish pytest_itemcollected --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'pandaflow/tests/test_strategies/test_calculate_ratio.py' lenresult=6 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <Module test_constant.py> [collection]
      pytest_collectstart [hook]
          collector: <Module test_constant.py>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Module test_constant.py>
      find_module called for: test_constant [assertion]
      matched test file '/home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/tests/test_strategies/test_constant.py' [assertion]
      found cached rewritten pyc for /home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/tests/test_strategies/test_constant.py [assertion]
      early skip of rewriting module: pandaflow.strategies.constant [assertion]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_constant.py>
            name: @py_builtins
            obj: <module 'builtins' (built-in)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_constant.py>
            name: @pytest_ar
            obj: <module '_pytest.assertion.rewrite' from '/home/jack/dev/mypf/mypf_hledger/pandaflow/.venv/lib/python3.13/site-packages/_pytest/assertion/rewrite.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_constant.py>
            name: pd
            obj: <module 'pandas' from '/home/jack/dev/mypf/mypf_hledger/pandaflow/.venv/lib/python3.13/site-packages/pandas/__init__.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_constant.py>
            name: assert_frame_equal
            obj: <function assert_frame_equal at 0x75015e57dbc0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_constant.py>
            name: ConstantStrategy
            obj: <class 'pandaflow.strategies.constant.ConstantStrategy'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_constant.py>
            name: ConstantRule
            obj: <class 'pandaflow.strategies.constant.ConstantRule'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_constant.py>
            name: test_validate_rule_parses_correctly
            obj: <function test_validate_rule_parses_correctly at 0x75015e4939c0>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x75015e4c72f0>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_validate_rule_parses_correctly>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_constant.py>
            name: test_apply_sets_constant_value
            obj: <function test_apply_sets_constant_value at 0x75015e4c6840>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x75015e4c7430>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_apply_sets_constant_value>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_constant.py>
            name: test_apply_with_missing_value_defaults_to_empty
            obj: <function test_apply_with_missing_value_defaults_to_empty at 0x75015e4c7060>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x75015e4c7570>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_apply_with_missing_value_defaults_to_empty>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_constant.py>
            name: test_run_method_sets_constant_value
            obj: <function test_run_method_sets_constant_value at 0x75015e4c6fc0>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x75015e4c7610>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_run_method_sets_constant_value>] [hook]
      finish pytest_make_collect_report --> <CollectReport 'pandaflow/tests/test_strategies/test_constant.py' lenresult=4 outcome='passed'> [hook]
    genitems <Function test_validate_rule_parses_correctly> [collection]
      pytest_itemcollected [hook]
          item: <Function test_validate_rule_parses_correctly>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_apply_sets_constant_value> [collection]
      pytest_itemcollected [hook]
          item: <Function test_apply_sets_constant_value>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_apply_with_missing_value_defaults_to_empty> [collection]
      pytest_itemcollected [hook]
          item: <Function test_apply_with_missing_value_defaults_to_empty>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_run_method_sets_constant_value> [collection]
      pytest_itemcollected [hook]
          item: <Function test_run_method_sets_constant_value>
      finish pytest_itemcollected --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'pandaflow/tests/test_strategies/test_constant.py' lenresult=4 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <Module test_copy.py> [collection]
      pytest_collectstart [hook]
          collector: <Module test_copy.py>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Module test_copy.py>
      find_module called for: test_copy [assertion]
      matched test file '/home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/tests/test_strategies/test_copy.py' [assertion]
      found cached rewritten pyc for /home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/tests/test_strategies/test_copy.py [assertion]
      early skip of rewriting module: pandaflow.strategies.copy [assertion]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_copy.py>
            name: @py_builtins
            obj: <module 'builtins' (built-in)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_copy.py>
            name: @pytest_ar
            obj: <module '_pytest.assertion.rewrite' from '/home/jack/dev/mypf/mypf_hledger/pandaflow/.venv/lib/python3.13/site-packages/_pytest/assertion/rewrite.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_copy.py>
            name: pytest
            obj: <module 'pytest' from '/home/jack/dev/mypf/mypf_hledger/pandaflow/.venv/lib/python3.13/site-packages/pytest/__init__.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_copy.py>
            name: pd
            obj: <module 'pandas' from '/home/jack/dev/mypf/mypf_hledger/pandaflow/.venv/lib/python3.13/site-packages/pandas/__init__.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_copy.py>
            name: assert_frame_equal
            obj: <function assert_frame_equal at 0x75015e57dbc0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_copy.py>
            name: CopyStrategy
            obj: <class 'pandaflow.strategies.copy.CopyStrategy'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_copy.py>
            name: CopyRule
            obj: <class 'pandaflow.strategies.copy.CopyRule'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_copy.py>
            name: strategy
            obj: <pytest_fixture(<function strategy at 0x75015e4c5d00>)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_copy.py>
            name: test_validate_rule_parses_correctly
            obj: <function test_validate_rule_parses_correctly at 0x75015e4c7560>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x75015e493390>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_validate_rule_parses_correctly>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_copy.py>
            name: test_apply_with_input_and_output_rules
            obj: <function test_apply_with_input_and_output_rules at 0x75015e4c7240>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x75015e4c7930>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_apply_with_input_and_output_rules>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_copy.py>
            name: test_apply_with_fillna_replaces_empty_and_null
            obj: <function test_apply_with_fillna_replaces_empty_and_null at 0x75015e4c74c0>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x75015e4c7a70>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_apply_with_fillna_replaces_empty_and_null>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_copy.py>
            name: test_apply_without_input_or_output_rules
            obj: <function test_apply_without_input_or_output_rules at 0x75015e4c76a0>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x75015e4c7bb0>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_apply_without_input_or_output_rules>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_copy.py>
            name: test_apply_raises_if_source_column_missing
            obj: <function test_apply_raises_if_source_column_missing at 0x75015e4c7740>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x75015e4c7cf0>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_apply_raises_if_source_column_missing>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_copy.py>
            name: test_validate_rule
            obj: <function test_validate_rule at 0x75015e4c77e0>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x75015e4c7e30>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_validate_rule>] [hook]
      finish pytest_make_collect_report --> <CollectReport 'pandaflow/tests/test_strategies/test_copy.py' lenresult=6 outcome='passed'> [hook]
    genitems <Function test_validate_rule_parses_correctly> [collection]
      pytest_itemcollected [hook]
          item: <Function test_validate_rule_parses_correctly>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_apply_with_input_and_output_rules> [collection]
      pytest_itemcollected [hook]
          item: <Function test_apply_with_input_and_output_rules>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_apply_with_fillna_replaces_empty_and_null> [collection]
      pytest_itemcollected [hook]
          item: <Function test_apply_with_fillna_replaces_empty_and_null>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_apply_without_input_or_output_rules> [collection]
      pytest_itemcollected [hook]
          item: <Function test_apply_without_input_or_output_rules>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_apply_raises_if_source_column_missing> [collection]
      pytest_itemcollected [hook]
          item: <Function test_apply_raises_if_source_column_missing>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_validate_rule> [collection]
      pytest_itemcollected [hook]
          item: <Function test_validate_rule>
      finish pytest_itemcollected --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'pandaflow/tests/test_strategies/test_copy.py' lenresult=6 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <Module test_csvfile.py> [collection]
      pytest_collectstart [hook]
          collector: <Module test_csvfile.py>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Module test_csvfile.py>
      find_module called for: test_csvfile [assertion]
      matched test file '/home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/tests/test_strategies/test_csvfile.py' [assertion]
      found cached rewritten pyc for /home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/tests/test_strategies/test_csvfile.py [assertion]
      early skip of rewriting module: pandaflow.strategies.csvfile [assertion]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_csvfile.py>
            name: @py_builtins
            obj: <module 'builtins' (built-in)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_csvfile.py>
            name: @pytest_ar
            obj: <module '_pytest.assertion.rewrite' from '/home/jack/dev/mypf/mypf_hledger/pandaflow/.venv/lib/python3.13/site-packages/_pytest/assertion/rewrite.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_csvfile.py>
            name: pd
            obj: <module 'pandas' from '/home/jack/dev/mypf/mypf_hledger/pandaflow/.venv/lib/python3.13/site-packages/pandas/__init__.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_csvfile.py>
            name: pytest
            obj: <module 'pytest' from '/home/jack/dev/mypf/mypf_hledger/pandaflow/.venv/lib/python3.13/site-packages/pytest/__init__.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_csvfile.py>
            name: Path
            obj: <class 'pathlib._local.Path'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_csvfile.py>
            name: TemporaryDirectory
            obj: <class 'tempfile.TemporaryDirectory'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_csvfile.py>
            name: CsvFileStrategy
            obj: <class 'pandaflow.strategies.csvfile.CsvFileStrategy'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_csvfile.py>
            name: strategy
            obj: <pytest_fixture(<function strategy at 0x75015e30c360>)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_csvfile.py>
            name: input_df
            obj: <pytest_fixture(<function input_df at 0x75015e30c5e0>)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_csvfile.py>
            name: test_validate_rule
            obj: <function test_validate_rule at 0x75015e30c860>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x75015e493390>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_validate_rule>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_csvfile.py>
            name: test_missing_file_returns_not_found
            obj: <function test_missing_file_returns_not_found at 0x75015e30c900>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x750177db5270>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_missing_file_returns_not_found>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_csvfile.py>
            name: test_missing_key_or_value_raises
            obj: <function test_missing_key_or_value_raises at 0x75015e30c9a0>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x75015e4c79d0>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_missing_key_or_value_raises>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_csvfile.py>
            name: test_missing_lookup_columns_raises
            obj: <function test_missing_lookup_columns_raises at 0x75015e30ca40>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x75015e4c7b10>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_missing_lookup_columns_raises>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_csvfile.py>
            name: test_missing_source_column_raises
            obj: <function test_missing_source_column_raises at 0x75015e30cae0>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x75015e4c7c50>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_missing_source_column_raises>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_csvfile.py>
            name: test_successful_lookup
            obj: <function test_successful_lookup at 0x75015e30cb80>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x75015e4c7d90>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_successful_lookup>] [hook]
      finish pytest_make_collect_report --> <CollectReport 'pandaflow/tests/test_strategies/test_csvfile.py' lenresult=6 outcome='passed'> [hook]
    genitems <Function test_validate_rule> [collection]
      pytest_itemcollected [hook]
          item: <Function test_validate_rule>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_missing_file_returns_not_found> [collection]
      pytest_itemcollected [hook]
          item: <Function test_missing_file_returns_not_found>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_missing_key_or_value_raises> [collection]
      pytest_itemcollected [hook]
          item: <Function test_missing_key_or_value_raises>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_missing_lookup_columns_raises> [collection]
      pytest_itemcollected [hook]
          item: <Function test_missing_lookup_columns_raises>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_missing_source_column_raises> [collection]
      pytest_itemcollected [hook]
          item: <Function test_missing_source_column_raises>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_successful_lookup> [collection]
      pytest_itemcollected [hook]
          item: <Function test_successful_lookup>
      finish pytest_itemcollected --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'pandaflow/tests/test_strategies/test_csvfile.py' lenresult=6 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <Module test_debug.py> [collection]
      pytest_collectstart [hook]
          collector: <Module test_debug.py>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Module test_debug.py>
      find_module called for: test_debug [assertion]
      matched test file '/home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/tests/test_strategies/test_debug.py' [assertion]
      found cached rewritten pyc for /home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/tests/test_strategies/test_debug.py [assertion]
      early skip of rewriting module: pandaflow.strategies.debug [assertion]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_debug.py>
            name: @py_builtins
            obj: <module 'builtins' (built-in)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_debug.py>
            name: @pytest_ar
            obj: <module '_pytest.assertion.rewrite' from '/home/jack/dev/mypf/mypf_hledger/pandaflow/.venv/lib/python3.13/site-packages/_pytest/assertion/rewrite.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_debug.py>
            name: pd
            obj: <module 'pandas' from '/home/jack/dev/mypf/mypf_hledger/pandaflow/.venv/lib/python3.13/site-packages/pandas/__init__.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_debug.py>
            name: pytest
            obj: <module 'pytest' from '/home/jack/dev/mypf/mypf_hledger/pandaflow/.venv/lib/python3.13/site-packages/pytest/__init__.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_debug.py>
            name: DebugStrategy
            obj: <class 'pandaflow.strategies.debug.DebugStrategy'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_debug.py>
            name: strategy
            obj: <pytest_fixture(<function strategy at 0x75015e30c0e0>)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_debug.py>
            name: sample_df
            obj: <pytest_fixture(<function sample_df at 0x75015e30ccc0>)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_debug.py>
            name: test_debug_strategy_prints_field_and_head
            obj: <function test_debug_strategy_prints_field_and_head at 0x75015e30cea0>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x750177f03c50>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_debug_strategy_prints_field_and_head>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_debug.py>
            name: test_debug_strategy_does_not_modify_df
            obj: <function test_debug_strategy_does_not_modify_df at 0x75015e30cf40>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x750177db5270>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_debug_strategy_does_not_modify_df>] [hook]
      finish pytest_make_collect_report --> <CollectReport 'pandaflow/tests/test_strategies/test_debug.py' lenresult=2 outcome='passed'> [hook]
    genitems <Function test_debug_strategy_prints_field_and_head> [collection]
      pytest_itemcollected [hook]
          item: <Function test_debug_strategy_prints_field_and_head>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_debug_strategy_does_not_modify_df> [collection]
      pytest_itemcollected [hook]
          item: <Function test_debug_strategy_does_not_modify_df>
      finish pytest_itemcollected --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'pandaflow/tests/test_strategies/test_debug.py' lenresult=2 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <Module test_deduplicate.py> [collection]
      pytest_collectstart [hook]
          collector: <Module test_deduplicate.py>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Module test_deduplicate.py>
      find_module called for: test_deduplicate [assertion]
      matched test file '/home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/tests/test_strategies/test_deduplicate.py' [assertion]
      found cached rewritten pyc for /home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/tests/test_strategies/test_deduplicate.py [assertion]
      early skip of rewriting module: pandaflow.strategies.deduplicate [assertion]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_deduplicate.py>
            name: @py_builtins
            obj: <module 'builtins' (built-in)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_deduplicate.py>
            name: @pytest_ar
            obj: <module '_pytest.assertion.rewrite' from '/home/jack/dev/mypf/mypf_hledger/pandaflow/.venv/lib/python3.13/site-packages/_pytest/assertion/rewrite.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_deduplicate.py>
            name: pd
            obj: <module 'pandas' from '/home/jack/dev/mypf/mypf_hledger/pandaflow/.venv/lib/python3.13/site-packages/pandas/__init__.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_deduplicate.py>
            name: pytest
            obj: <module 'pytest' from '/home/jack/dev/mypf/mypf_hledger/pandaflow/.venv/lib/python3.13/site-packages/pytest/__init__.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_deduplicate.py>
            name: DeDuplicateStrategy
            obj: <class 'pandaflow.strategies.deduplicate.DeDuplicateStrategy'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_deduplicate.py>
            name: strategy
            obj: <pytest_fixture(<function strategy at 0x75015e4c7b00>)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_deduplicate.py>
            name: sample_df
            obj: <pytest_fixture(<function sample_df at 0x75015e30c040>)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_deduplicate.py>
            name: test_deduplicate_by_field
            obj: <function test_deduplicate_by_field at 0x75015e30d1c0>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x75015e30d450>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_deduplicate_by_field>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_deduplicate.py>
            name: test_deduplicate_by_subset
            obj: <function test_deduplicate_by_subset at 0x75015e30d260>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x75015e30d630>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_deduplicate_by_subset>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_deduplicate.py>
            name: test_no_duplicates
            obj: <function test_no_duplicates at 0x75015e30d300>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x75015e30d770>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_no_duplicates>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_deduplicate.py>
            name: test_validate_rule
            obj: <function test_validate_rule at 0x75015e30d3a0>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x75015e30d8b0>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_validate_rule>] [hook]
      finish pytest_make_collect_report --> <CollectReport 'pandaflow/tests/test_strategies/test_deduplicate.py' lenresult=4 outcome='passed'> [hook]
    genitems <Function test_deduplicate_by_field> [collection]
      pytest_itemcollected [hook]
          item: <Function test_deduplicate_by_field>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_deduplicate_by_subset> [collection]
      pytest_itemcollected [hook]
          item: <Function test_deduplicate_by_subset>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_no_duplicates> [collection]
      pytest_itemcollected [hook]
          item: <Function test_no_duplicates>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_validate_rule> [collection]
      pytest_itemcollected [hook]
          item: <Function test_validate_rule>
      finish pytest_itemcollected --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'pandaflow/tests/test_strategies/test_deduplicate.py' lenresult=4 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <Module test_drop.py> [collection]
      pytest_collectstart [hook]
          collector: <Module test_drop.py>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Module test_drop.py>
      find_module called for: test_drop [assertion]
      matched test file '/home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/tests/test_strategies/test_drop.py' [assertion]
      found cached rewritten pyc for /home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/tests/test_strategies/test_drop.py [assertion]
      early skip of rewriting module: pandaflow.strategies.drop [assertion]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_drop.py>
            name: @py_builtins
            obj: <module 'builtins' (built-in)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_drop.py>
            name: @pytest_ar
            obj: <module '_pytest.assertion.rewrite' from '/home/jack/dev/mypf/mypf_hledger/pandaflow/.venv/lib/python3.13/site-packages/_pytest/assertion/rewrite.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_drop.py>
            name: pd
            obj: <module 'pandas' from '/home/jack/dev/mypf/mypf_hledger/pandaflow/.venv/lib/python3.13/site-packages/pandas/__init__.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_drop.py>
            name: pytest
            obj: <module 'pytest' from '/home/jack/dev/mypf/mypf_hledger/pandaflow/.venv/lib/python3.13/site-packages/pytest/__init__.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_drop.py>
            name: DropStrategy
            obj: <class 'pandaflow.strategies.drop.DropStrategy'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_drop.py>
            name: strategy
            obj: <pytest_fixture(<function strategy at 0x75015e4c7f60>)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_drop.py>
            name: sample_df
            obj: <pytest_fixture(<function sample_df at 0x75015e30d580>)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_drop.py>
            name: test_drop_single_column
            obj: <function test_drop_single_column at 0x75015e30d800>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x75015e4c7bb0>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_drop_single_column>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_drop.py>
            name: test_drop_multiple_columns
            obj: <function test_drop_multiple_columns at 0x75015e30d760>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x75015e30db30>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_drop_multiple_columns>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_drop.py>
            name: test_drop_missing_column_raises
            obj: <function test_drop_missing_column_raises at 0x75015e30d8a0>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x75015e30dc70>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_drop_missing_column_raises>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_drop.py>
            name: test_validate_rule
            obj: <function test_validate_rule at 0x75015e30d940>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x75015e30ddb0>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_validate_rule>] [hook]
      finish pytest_make_collect_report --> <CollectReport 'pandaflow/tests/test_strategies/test_drop.py' lenresult=4 outcome='passed'> [hook]
    genitems <Function test_drop_single_column> [collection]
      pytest_itemcollected [hook]
          item: <Function test_drop_single_column>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_drop_multiple_columns> [collection]
      pytest_itemcollected [hook]
          item: <Function test_drop_multiple_columns>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_drop_missing_column_raises> [collection]
      pytest_itemcollected [hook]
          item: <Function test_drop_missing_column_raises>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_validate_rule> [collection]
      pytest_itemcollected [hook]
          item: <Function test_validate_rule>
      finish pytest_itemcollected --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'pandaflow/tests/test_strategies/test_drop.py' lenresult=4 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <Module test_filter.py> [collection]
      pytest_collectstart [hook]
          collector: <Module test_filter.py>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Module test_filter.py>
      find_module called for: test_filter [assertion]
      matched test file '/home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/tests/test_strategies/test_filter.py' [assertion]
      found cached rewritten pyc for /home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/tests/test_strategies/test_filter.py [assertion]
      early skip of rewriting module: pandaflow.strategies.filter [assertion]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_filter.py>
            name: @py_builtins
            obj: <module 'builtins' (built-in)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_filter.py>
            name: @pytest_ar
            obj: <module '_pytest.assertion.rewrite' from '/home/jack/dev/mypf/mypf_hledger/pandaflow/.venv/lib/python3.13/site-packages/_pytest/assertion/rewrite.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_filter.py>
            name: pd
            obj: <module 'pandas' from '/home/jack/dev/mypf/mypf_hledger/pandaflow/.venv/lib/python3.13/site-packages/pandas/__init__.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_filter.py>
            name: pytest
            obj: <module 'pytest' from '/home/jack/dev/mypf/mypf_hledger/pandaflow/.venv/lib/python3.13/site-packages/pytest/__init__.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_filter.py>
            name: FilterByFormulaStrategy
            obj: <class 'pandaflow.strategies.filter.FilterByFormulaStrategy'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_filter.py>
            name: strategy
            obj: <pytest_fixture(<function strategy at 0x75015e30e020>)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_filter.py>
            name: sample_df
            obj: <pytest_fixture(<function sample_df at 0x75015e30e2a0>)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_filter.py>
            name: test_valid_formula_filters_rows
            obj: <function test_valid_formula_filters_rows at 0x75015e30e520>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x75015e4c7bb0>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_valid_formula_filters_rows>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_filter.py>
            name: test_non_boolean_formula_raises_error
            obj: <function test_non_boolean_formula_raises_error at 0x75015e30e5c0>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x75015e30dbd0>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_non_boolean_formula_raises_error>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_filter.py>
            name: test_field_not_in_df_does_not_format
            obj: <function test_field_not_in_df_does_not_format at 0x75015e30e660>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x75015e30dd10>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_field_not_in_df_does_not_format>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_filter.py>
            name: test_formula_with_multiple_conditions
            obj: <function test_formula_with_multiple_conditions at 0x75015e30e700>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x75015e30df90>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_formula_with_multiple_conditions>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_filter.py>
            name: test_validate_rule
            obj: <function test_validate_rule at 0x75015e30e7a0>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x75015e30e850>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_validate_rule>] [hook]
      finish pytest_make_collect_report --> <CollectReport 'pandaflow/tests/test_strategies/test_filter.py' lenresult=5 outcome='passed'> [hook]
    genitems <Function test_valid_formula_filters_rows> [collection]
      pytest_itemcollected [hook]
          item: <Function test_valid_formula_filters_rows>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_non_boolean_formula_raises_error> [collection]
      pytest_itemcollected [hook]
          item: <Function test_non_boolean_formula_raises_error>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_field_not_in_df_does_not_format> [collection]
      pytest_itemcollected [hook]
          item: <Function test_field_not_in_df_does_not_format>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_formula_with_multiple_conditions> [collection]
      pytest_itemcollected [hook]
          item: <Function test_formula_with_multiple_conditions>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_validate_rule> [collection]
      pytest_itemcollected [hook]
          item: <Function test_validate_rule>
      finish pytest_itemcollected --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'pandaflow/tests/test_strategies/test_filter.py' lenresult=5 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <Module test_hash.py> [collection]
      pytest_collectstart [hook]
          collector: <Module test_hash.py>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Module test_hash.py>
      find_module called for: test_hash [assertion]
      matched test file '/home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/tests/test_strategies/test_hash.py' [assertion]
      found cached rewritten pyc for /home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/tests/test_strategies/test_hash.py [assertion]
      early skip of rewriting module: pandaflow.strategies.hash [assertion]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_hash.py>
            name: @py_builtins
            obj: <module 'builtins' (built-in)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_hash.py>
            name: @pytest_ar
            obj: <module '_pytest.assertion.rewrite' from '/home/jack/dev/mypf/mypf_hledger/pandaflow/.venv/lib/python3.13/site-packages/_pytest/assertion/rewrite.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_hash.py>
            name: pd
            obj: <module 'pandas' from '/home/jack/dev/mypf/mypf_hledger/pandaflow/.venv/lib/python3.13/site-packages/pandas/__init__.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_hash.py>
            name: pytest
            obj: <module 'pytest' from '/home/jack/dev/mypf/mypf_hledger/pandaflow/.venv/lib/python3.13/site-packages/pytest/__init__.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_hash.py>
            name: hashlib
            obj: <module 'hashlib' from '/home/jack/.pyenv/versions/3.13.1/lib/python3.13/hashlib.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_hash.py>
            name: HashStrategy
            obj: <class 'pandaflow.strategies.hash.HashStrategy'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_hash.py>
            name: strategy
            obj: <pytest_fixture(<function strategy at 0x75015e30eb60>)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_hash.py>
            name: sample_df
            obj: <pytest_fixture(<function sample_df at 0x75015e30ed40>)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_hash.py>
            name: test_hash_generation
            obj: <function test_hash_generation at 0x75015e30efc0>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x75015e30f2f0>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_hash_generation>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_hash.py>
            name: test_missing_column_raises
            obj: <function test_missing_column_raises at 0x75015e30f060>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x75015e30f430>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_missing_column_raises>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_hash.py>
            name: test_empty_string_handling
            obj: <function test_empty_string_handling at 0x75015e30f100>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x75015e30f570>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_empty_string_handling>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_hash.py>
            name: test_validate_rule
            obj: <function test_validate_rule at 0x75015e30f1a0>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x75015e30f6b0>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_validate_rule>] [hook]
      finish pytest_make_collect_report --> <CollectReport 'pandaflow/tests/test_strategies/test_hash.py' lenresult=4 outcome='passed'> [hook]
    genitems <Function test_hash_generation> [collection]
      pytest_itemcollected [hook]
          item: <Function test_hash_generation>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_missing_column_raises> [collection]
      pytest_itemcollected [hook]
          item: <Function test_missing_column_raises>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_empty_string_handling> [collection]
      pytest_itemcollected [hook]
          item: <Function test_empty_string_handling>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_validate_rule> [collection]
      pytest_itemcollected [hook]
          item: <Function test_validate_rule>
      finish pytest_itemcollected --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'pandaflow/tests/test_strategies/test_hash.py' lenresult=4 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <Module test_merge.py> [collection]
      pytest_collectstart [hook]
          collector: <Module test_merge.py>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Module test_merge.py>
      find_module called for: test_merge [assertion]
      matched test file '/home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/tests/test_strategies/test_merge.py' [assertion]
      found cached rewritten pyc for /home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/tests/test_strategies/test_merge.py [assertion]
      early skip of rewriting module: pandaflow.strategies.merge [assertion]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_merge.py>
            name: @py_builtins
            obj: <module 'builtins' (built-in)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_merge.py>
            name: @pytest_ar
            obj: <module '_pytest.assertion.rewrite' from '/home/jack/dev/mypf/mypf_hledger/pandaflow/.venv/lib/python3.13/site-packages/_pytest/assertion/rewrite.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_merge.py>
            name: pd
            obj: <module 'pandas' from '/home/jack/dev/mypf/mypf_hledger/pandaflow/.venv/lib/python3.13/site-packages/pandas/__init__.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_merge.py>
            name: pytest
            obj: <module 'pytest' from '/home/jack/dev/mypf/mypf_hledger/pandaflow/.venv/lib/python3.13/site-packages/pytest/__init__.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_merge.py>
            name: MergeStrategy
            obj: <class 'pandaflow.strategies.merge.MergeStrategy'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_merge.py>
            name: strategy
            obj: <pytest_fixture(<function strategy at 0x75015e30dc60>)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_merge.py>
            name: sample_df
            obj: <pytest_fixture(<function sample_df at 0x75015e30df80>)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_merge.py>
            name: test_merge_multiple_columns_with_separator
            obj: <function test_merge_multiple_columns_with_separator at 0x75015e30f2e0>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x75015e30f750>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_merge_multiple_columns_with_separator>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_merge.py>
            name: test_merge_with_nan_like_strings
            obj: <function test_merge_with_nan_like_strings at 0x75015e30f4c0>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x75015e30f890>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_merge_with_nan_like_strings>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_merge.py>
            name: test_merge_with_source_as_string
            obj: <function test_merge_with_source_as_string at 0x75015e30f420>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x75015e30f9d0>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_merge_with_source_as_string>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_merge.py>
            name: test_merge_missing_column_raises
            obj: <function test_merge_missing_column_raises at 0x75015e30f600>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x75015e30fb10>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_merge_missing_column_raises>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_merge.py>
            name: test_validate_rule
            obj: <function test_validate_rule at 0x75015e30f6a0>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x75015e30fc50>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_validate_rule>] [hook]
      finish pytest_make_collect_report --> <CollectReport 'pandaflow/tests/test_strategies/test_merge.py' lenresult=5 outcome='passed'> [hook]
    genitems <Function test_merge_multiple_columns_with_separator> [collection]
      pytest_itemcollected [hook]
          item: <Function test_merge_multiple_columns_with_separator>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_merge_with_nan_like_strings> [collection]
      pytest_itemcollected [hook]
          item: <Function test_merge_with_nan_like_strings>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_merge_with_source_as_string> [collection]
      pytest_itemcollected [hook]
          item: <Function test_merge_with_source_as_string>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_merge_missing_column_raises> [collection]
      pytest_itemcollected [hook]
          item: <Function test_merge_missing_column_raises>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_validate_rule> [collection]
      pytest_itemcollected [hook]
          item: <Function test_validate_rule>
      finish pytest_itemcollected --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'pandaflow/tests/test_strategies/test_merge.py' lenresult=5 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <Module test_mergestring.py> [collection]
      pytest_collectstart [hook]
          collector: <Module test_mergestring.py>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Module test_mergestring.py>
      find_module called for: test_mergestring [assertion]
      matched test file '/home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/tests/test_strategies/test_mergestring.py' [assertion]
      found cached rewritten pyc for /home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/tests/test_strategies/test_mergestring.py [assertion]
      early skip of rewriting module: pandaflow.strategies.mergestring [assertion]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_mergestring.py>
            name: @py_builtins
            obj: <module 'builtins' (built-in)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_mergestring.py>
            name: @pytest_ar
            obj: <module '_pytest.assertion.rewrite' from '/home/jack/dev/mypf/mypf_hledger/pandaflow/.venv/lib/python3.13/site-packages/_pytest/assertion/rewrite.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_mergestring.py>
            name: pd
            obj: <module 'pandas' from '/home/jack/dev/mypf/mypf_hledger/pandaflow/.venv/lib/python3.13/site-packages/pandas/__init__.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_mergestring.py>
            name: pytest
            obj: <module 'pytest' from '/home/jack/dev/mypf/mypf_hledger/pandaflow/.venv/lib/python3.13/site-packages/pytest/__init__.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_mergestring.py>
            name: MergeStringStrategy
            obj: <class 'pandaflow.strategies.mergestring.MergeStringStrategy'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_mergestring.py>
            name: strategy
            obj: <pytest_fixture(<function strategy at 0x75015e354040>)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_mergestring.py>
            name: sample_df
            obj: <pytest_fixture(<function sample_df at 0x75015e3542c0>)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_mergestring.py>
            name: test_merge_with_formula
            obj: <function test_merge_with_formula at 0x75015e354540>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x75015e491e50>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_merge_with_formula>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_mergestring.py>
            name: test_merge_with_source_columns
            obj: <function test_merge_with_source_columns at 0x75015e3545e0>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x75015e30f7f0>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_merge_with_source_columns>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_mergestring.py>
            name: test_missing_formula_and_source_raises
            obj: <function test_missing_formula_and_source_raises at 0x75015e354680>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x75015e30f930>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_missing_formula_and_source_raises>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_mergestring.py>
            name: test_validate_rule
            obj: <function test_validate_rule at 0x75015e354720>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x75015e30fa70>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_validate_rule>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_mergestring.py>
            name: test_merge_with_missing_column_in_formula
            obj: <function test_merge_with_missing_column_in_formula at 0x75015e3547c0>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x75015e30fbb0>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_merge_with_missing_column_in_formula>] [hook]
      finish pytest_make_collect_report --> <CollectReport 'pandaflow/tests/test_strategies/test_mergestring.py' lenresult=5 outcome='passed'> [hook]
    genitems <Function test_merge_with_formula> [collection]
      pytest_itemcollected [hook]
          item: <Function test_merge_with_formula>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_merge_with_source_columns> [collection]
      pytest_itemcollected [hook]
          item: <Function test_merge_with_source_columns>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_missing_formula_and_source_raises> [collection]
      pytest_itemcollected [hook]
          item: <Function test_missing_formula_and_source_raises>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_validate_rule> [collection]
      pytest_itemcollected [hook]
          item: <Function test_validate_rule>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_merge_with_missing_column_in_formula> [collection]
      pytest_itemcollected [hook]
          item: <Function test_merge_with_missing_column_in_formula>
      finish pytest_itemcollected --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'pandaflow/tests/test_strategies/test_mergestring.py' lenresult=5 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <Module test_regex.py> [collection]
      pytest_collectstart [hook]
          collector: <Module test_regex.py>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Module test_regex.py>
      find_module called for: test_regex [assertion]
      matched test file '/home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/tests/test_strategies/test_regex.py' [assertion]
      found cached rewritten pyc for /home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/tests/test_strategies/test_regex.py [assertion]
      early skip of rewriting module: pandaflow.strategies.regex [assertion]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_regex.py>
            name: @py_builtins
            obj: <module 'builtins' (built-in)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_regex.py>
            name: @pytest_ar
            obj: <module '_pytest.assertion.rewrite' from '/home/jack/dev/mypf/mypf_hledger/pandaflow/.venv/lib/python3.13/site-packages/_pytest/assertion/rewrite.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_regex.py>
            name: pd
            obj: <module 'pandas' from '/home/jack/dev/mypf/mypf_hledger/pandaflow/.venv/lib/python3.13/site-packages/pandas/__init__.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_regex.py>
            name: pytest
            obj: <module 'pytest' from '/home/jack/dev/mypf/mypf_hledger/pandaflow/.venv/lib/python3.13/site-packages/pytest/__init__.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_regex.py>
            name: RegExStrategy
            obj: <class 'pandaflow.strategies.regex.RegExStrategy'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_regex.py>
            name: mock_formatter
            obj: <function mock_formatter at 0x75015e354860>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_regex.py>
            name: strategy
            obj: <pytest_fixture(<function strategy at 0x75015e354a40>)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_regex.py>
            name: sample_df
            obj: <pytest_fixture(<function sample_df at 0x75015e354ae0>)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_regex.py>
            name: test_valid_regex_extraction
            obj: <function test_valid_regex_extraction at 0x75015e354d60>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x75015e491e50>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_valid_regex_extraction>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_regex.py>
            name: test_missing_source_column_raises
            obj: <function test_missing_source_column_raises at 0x75015e354e00>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x75015e30f750>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_missing_source_column_raises>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_regex.py>
            name: test_invalid_regex_returns_empty
            obj: <function test_invalid_regex_returns_empty at 0x75015e354ea0>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x75015e30f890>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_invalid_regex_returns_empty>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_regex.py>
            name: test_group_id_out_of_range_returns_none
            obj: <function test_group_id_out_of_range_returns_none at 0x75015e354f40>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x75015e30f9d0>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_group_id_out_of_range_returns_none>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_regex.py>
            name: test_validate_rule
            obj: <function test_validate_rule at 0x75015e354fe0>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x75015e30ff70>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_validate_rule>] [hook]
      finish pytest_make_collect_report --> <CollectReport 'pandaflow/tests/test_strategies/test_regex.py' lenresult=5 outcome='passed'> [hook]
    genitems <Function test_valid_regex_extraction> [collection]
      pytest_itemcollected [hook]
          item: <Function test_valid_regex_extraction>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_missing_source_column_raises> [collection]
      pytest_itemcollected [hook]
          item: <Function test_missing_source_column_raises>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_invalid_regex_returns_empty> [collection]
      pytest_itemcollected [hook]
          item: <Function test_invalid_regex_returns_empty>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_group_id_out_of_range_returns_none> [collection]
      pytest_itemcollected [hook]
          item: <Function test_group_id_out_of_range_returns_none>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_validate_rule> [collection]
      pytest_itemcollected [hook]
          item: <Function test_validate_rule>
      finish pytest_itemcollected --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'pandaflow/tests/test_strategies/test_regex.py' lenresult=5 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <Module test_reorder_columns.py> [collection]
      pytest_collectstart [hook]
          collector: <Module test_reorder_columns.py>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Module test_reorder_columns.py>
      find_module called for: test_reorder_columns [assertion]
      matched test file '/home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/tests/test_strategies/test_reorder_columns.py' [assertion]
      found cached rewritten pyc for /home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/tests/test_strategies/test_reorder_columns.py [assertion]
      early skip of rewriting module: pandaflow.strategies.reorder_columns [assertion]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_reorder_columns.py>
            name: @py_builtins
            obj: <module 'builtins' (built-in)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_reorder_columns.py>
            name: @pytest_ar
            obj: <module '_pytest.assertion.rewrite' from '/home/jack/dev/mypf/mypf_hledger/pandaflow/.venv/lib/python3.13/site-packages/_pytest/assertion/rewrite.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_reorder_columns.py>
            name: pytest
            obj: <module 'pytest' from '/home/jack/dev/mypf/mypf_hledger/pandaflow/.venv/lib/python3.13/site-packages/pytest/__init__.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_reorder_columns.py>
            name: pd
            obj: <module 'pandas' from '/home/jack/dev/mypf/mypf_hledger/pandaflow/.venv/lib/python3.13/site-packages/pandas/__init__.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_reorder_columns.py>
            name: ReorderColumnsStrategy
            obj: <class 'pandaflow.strategies.reorder_columns.ReorderColumnsStrategy'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_reorder_columns.py>
            name: sample_df
            obj: <pytest_fixture(<function sample_df at 0x75015e355300>)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_reorder_columns.py>
            name: test_reorder_columns_valid
            obj: <function test_reorder_columns_valid at 0x75015e355580>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x75015e3558b0>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_reorder_columns_valid>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_reorder_columns.py>
            name: test_reorder_columns_missing_column
            obj: <function test_reorder_columns_missing_column at 0x75015e3556c0>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x75015e3559f0>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_reorder_columns_missing_column>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_reorder_columns.py>
            name: test_reorder_columns_empty_rule
            obj: <function test_reorder_columns_empty_rule at 0x75015e355760>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x75015e355b30>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_reorder_columns_empty_rule>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_reorder_columns.py>
            name: test_reorder_columns_partial_order
            obj: <function test_reorder_columns_partial_order at 0x75015e355800>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x75015e355c70>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_reorder_columns_partial_order>] [hook]
      finish pytest_make_collect_report --> <CollectReport 'pandaflow/tests/test_strategies/test_reorder_columns.py' lenresult=4 outcome='passed'> [hook]
    genitems <Function test_reorder_columns_valid> [collection]
      pytest_itemcollected [hook]
          item: <Function test_reorder_columns_valid>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_reorder_columns_missing_column> [collection]
      pytest_itemcollected [hook]
          item: <Function test_reorder_columns_missing_column>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_reorder_columns_empty_rule> [collection]
      pytest_itemcollected [hook]
          item: <Function test_reorder_columns_empty_rule>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_reorder_columns_partial_order> [collection]
      pytest_itemcollected [hook]
          item: <Function test_reorder_columns_partial_order>
      finish pytest_itemcollected --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'pandaflow/tests/test_strategies/test_reorder_columns.py' lenresult=4 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <Module test_replace.py> [collection]
      pytest_collectstart [hook]
          collector: <Module test_replace.py>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Module test_replace.py>
      find_module called for: test_replace [assertion]
      matched test file '/home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/tests/test_strategies/test_replace.py' [assertion]
      found cached rewritten pyc for /home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/tests/test_strategies/test_replace.py [assertion]
      early skip of rewriting module: pandaflow.strategies.replace [assertion]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_replace.py>
            name: @py_builtins
            obj: <module 'builtins' (built-in)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_replace.py>
            name: @pytest_ar
            obj: <module '_pytest.assertion.rewrite' from '/home/jack/dev/mypf/mypf_hledger/pandaflow/.venv/lib/python3.13/site-packages/_pytest/assertion/rewrite.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_replace.py>
            name: pd
            obj: <module 'pandas' from '/home/jack/dev/mypf/mypf_hledger/pandaflow/.venv/lib/python3.13/site-packages/pandas/__init__.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_replace.py>
            name: pytest
            obj: <module 'pytest' from '/home/jack/dev/mypf/mypf_hledger/pandaflow/.venv/lib/python3.13/site-packages/pytest/__init__.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_replace.py>
            name: ReplaceStrategy
            obj: <class 'pandaflow.strategies.replace.ReplaceStrategy'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_replace.py>
            name: strategy
            obj: <pytest_fixture(<function strategy at 0x75015e30f7e0>)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_replace.py>
            name: sample_df
            obj: <pytest_fixture(<function sample_df at 0x75015e30f880>)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_replace.py>
            name: test_replace_string_occurrence
            obj: <function test_replace_string_occurrence at 0x75015e3553a0>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x75015e30db30>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_replace_string_occurrence>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_replace.py>
            name: test_replace_numeric_occurrence
            obj: <function test_replace_numeric_occurrence at 0x75015e355120>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x75015e355bd0>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_replace_numeric_occurrence>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_replace.py>
            name: test_missing_column_raises
            obj: <function test_missing_column_raises at 0x75015e355260>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x75015e355d10>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_missing_column_raises>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_replace.py>
            name: test_replace_with_empty_from
            obj: <function test_replace_with_empty_from at 0x75015e355940>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x75015e355e50>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_replace_with_empty_from>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_replace.py>
            name: test_validate_rule_maps_keys
            obj: <function test_validate_rule_maps_keys at 0x75015e3558a0>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x75015e355f90>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_validate_rule_maps_keys>] [hook]
      finish pytest_make_collect_report --> <CollectReport 'pandaflow/tests/test_strategies/test_replace.py' lenresult=5 outcome='passed'> [hook]
    genitems <Function test_replace_string_occurrence> [collection]
      pytest_itemcollected [hook]
          item: <Function test_replace_string_occurrence>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_replace_numeric_occurrence> [collection]
      pytest_itemcollected [hook]
          item: <Function test_replace_numeric_occurrence>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_missing_column_raises> [collection]
      pytest_itemcollected [hook]
          item: <Function test_missing_column_raises>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_replace_with_empty_from> [collection]
      pytest_itemcollected [hook]
          item: <Function test_replace_with_empty_from>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_validate_rule_maps_keys> [collection]
      pytest_itemcollected [hook]
          item: <Function test_validate_rule_maps_keys>
      finish pytest_itemcollected --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'pandaflow/tests/test_strategies/test_replace.py' lenresult=5 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <Module test_sort_by_column.py> [collection]
      pytest_collectstart [hook]
          collector: <Module test_sort_by_column.py>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Module test_sort_by_column.py>
      find_module called for: test_sort_by_column [assertion]
      matched test file '/home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/tests/test_strategies/test_sort_by_column.py' [assertion]
      found cached rewritten pyc for /home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/tests/test_strategies/test_sort_by_column.py [assertion]
      early skip of rewriting module: pandaflow.strategies.sort_by_column [assertion]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_sort_by_column.py>
            name: @py_builtins
            obj: <module 'builtins' (built-in)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_sort_by_column.py>
            name: @pytest_ar
            obj: <module '_pytest.assertion.rewrite' from '/home/jack/dev/mypf/mypf_hledger/pandaflow/.venv/lib/python3.13/site-packages/_pytest/assertion/rewrite.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_sort_by_column.py>
            name: pytest
            obj: <module 'pytest' from '/home/jack/dev/mypf/mypf_hledger/pandaflow/.venv/lib/python3.13/site-packages/pytest/__init__.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_sort_by_column.py>
            name: pd
            obj: <module 'pandas' from '/home/jack/dev/mypf/mypf_hledger/pandaflow/.venv/lib/python3.13/site-packages/pandas/__init__.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_sort_by_column.py>
            name: SortByColumnStrategy
            obj: <class 'pandaflow.strategies.sort_by_column.SortByColumnStrategy'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_sort_by_column.py>
            name: sample_df
            obj: <pytest_fixture(<function sample_df at 0x75015e356200>)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_sort_by_column.py>
            name: test_sort_single_column
            obj: <function test_sort_single_column at 0x75015e355a80>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x75015e356490>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_sort_single_column>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_sort_by_column.py>
            name: test_sort_multiple_columns
            obj: <function test_sort_multiple_columns at 0x75015e355bc0>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x75015e3565d0>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_sort_multiple_columns>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_sort_by_column.py>
            name: test_sort_with_na_first
            obj: <function test_sort_with_na_first at 0x75015e355da0>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x75015e356710>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_sort_with_na_first>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_sort_by_column.py>
            name: test_sort_with_mismatched_ascending
            obj: <function test_sort_with_mismatched_ascending at 0x75015e355d00>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x75015e356850>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_sort_with_mismatched_ascending>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_sort_by_column.py>
            name: test_sort_with_missing_column
            obj: <function test_sort_with_missing_column at 0x75015e355ee0>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x75015e356990>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_sort_with_missing_column>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_sort_by_column.py>
            name: test_sort_empty_columns
            obj: <function test_sort_empty_columns at 0x75015e355e40>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x75015e356ad0>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_sort_empty_columns>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_sort_by_column.py>
            name: test_sort_default_ascending
            obj: <function test_sort_default_ascending at 0x75015e356340>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x75015e356c10>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_sort_default_ascending>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_sort_by_column.py>
            name: test_validate_rule
            obj: <function test_validate_rule at 0x75015e3563e0>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x75015e356d50>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_validate_rule>] [hook]
      finish pytest_make_collect_report --> <CollectReport 'pandaflow/tests/test_strategies/test_sort_by_column.py' lenresult=8 outcome='passed'> [hook]
    genitems <Function test_sort_single_column> [collection]
      pytest_itemcollected [hook]
          item: <Function test_sort_single_column>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_sort_multiple_columns> [collection]
      pytest_itemcollected [hook]
          item: <Function test_sort_multiple_columns>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_sort_with_na_first> [collection]
      pytest_itemcollected [hook]
          item: <Function test_sort_with_na_first>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_sort_with_mismatched_ascending> [collection]
      pytest_itemcollected [hook]
          item: <Function test_sort_with_mismatched_ascending>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_sort_with_missing_column> [collection]
      pytest_itemcollected [hook]
          item: <Function test_sort_with_missing_column>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_sort_empty_columns> [collection]
      pytest_itemcollected [hook]
          item: <Function test_sort_empty_columns>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_sort_default_ascending> [collection]
      pytest_itemcollected [hook]
          item: <Function test_sort_default_ascending>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_validate_rule> [collection]
      pytest_itemcollected [hook]
          item: <Function test_validate_rule>
      finish pytest_itemcollected --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'pandaflow/tests/test_strategies/test_sort_by_column.py' lenresult=8 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <Module test_split_column.py> [collection]
      pytest_collectstart [hook]
          collector: <Module test_split_column.py>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Module test_split_column.py>
      find_module called for: test_split_column [assertion]
      matched test file '/home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/tests/test_strategies/test_split_column.py' [assertion]
      found cached rewritten pyc for /home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/tests/test_strategies/test_split_column.py [assertion]
      early skip of rewriting module: pandaflow.strategies.split_column [assertion]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_split_column.py>
            name: @py_builtins
            obj: <module 'builtins' (built-in)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_split_column.py>
            name: @pytest_ar
            obj: <module '_pytest.assertion.rewrite' from '/home/jack/dev/mypf/mypf_hledger/pandaflow/.venv/lib/python3.13/site-packages/_pytest/assertion/rewrite.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_split_column.py>
            name: pytest
            obj: <module 'pytest' from '/home/jack/dev/mypf/mypf_hledger/pandaflow/.venv/lib/python3.13/site-packages/pytest/__init__.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_split_column.py>
            name: pd
            obj: <module 'pandas' from '/home/jack/dev/mypf/mypf_hledger/pandaflow/.venv/lib/python3.13/site-packages/pandas/__init__.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_split_column.py>
            name: SplitColumnStrategy
            obj: <class 'pandaflow.strategies.split_column.SplitColumnStrategy'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_split_column.py>
            name: sample_df
            obj: <pytest_fixture(<function sample_df at 0x75015e357060>)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_split_column.py>
            name: test_split_basic
            obj: <function test_split_basic at 0x75015e357380>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x75015e356530>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_split_basic>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_split_column.py>
            name: test_split_with_maxsplit
            obj: <function test_split_with_maxsplit at 0x75015e357560>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x75015e356670>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_split_with_maxsplit>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_split_column.py>
            name: test_split_drop_original
            obj: <function test_split_drop_original at 0x75015e357600>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x75015e3567b0>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_split_drop_original>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_split_column.py>
            name: test_split_column_missing
            obj: <function test_split_column_missing at 0x75015e3576a0>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x75015e3568f0>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_split_column_missing>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_split_column.py>
            name: test_split_empty_string
            obj: <function test_split_empty_string at 0x75015e357740>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x75015e356a30>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_split_empty_string>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_split_column.py>
            name: test_split_custom_prefix
            obj: <function test_split_custom_prefix at 0x75015e3577e0>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x75015e356b70>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_split_custom_prefix>] [hook]
      finish pytest_make_collect_report --> <CollectReport 'pandaflow/tests/test_strategies/test_split_column.py' lenresult=6 outcome='passed'> [hook]
    genitems <Function test_split_basic> [collection]
      pytest_itemcollected [hook]
          item: <Function test_split_basic>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_split_with_maxsplit> [collection]
      pytest_itemcollected [hook]
          item: <Function test_split_with_maxsplit>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_split_drop_original> [collection]
      pytest_itemcollected [hook]
          item: <Function test_split_drop_original>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_split_column_missing> [collection]
      pytest_itemcollected [hook]
          item: <Function test_split_column_missing>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_split_empty_string> [collection]
      pytest_itemcollected [hook]
          item: <Function test_split_empty_string>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_split_custom_prefix> [collection]
      pytest_itemcollected [hook]
          item: <Function test_split_custom_prefix>
      finish pytest_itemcollected --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'pandaflow/tests/test_strategies/test_split_column.py' lenresult=6 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <Module test_uuid.py> [collection]
      pytest_collectstart [hook]
          collector: <Module test_uuid.py>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Module test_uuid.py>
      find_module called for: test_uuid [assertion]
      matched test file '/home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/tests/test_strategies/test_uuid.py' [assertion]
      found cached rewritten pyc for /home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/tests/test_strategies/test_uuid.py [assertion]
      early skip of rewriting module: pandaflow.strategies.uuid [assertion]
      early skip of rewriting module: uuid_extension [assertion]
      early skip of rewriting module: uuid_extension.models [assertion]
      early skip of rewriting module: uuid_extension.utils [assertion]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_uuid.py>
            name: @py_builtins
            obj: <module 'builtins' (built-in)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_uuid.py>
            name: @pytest_ar
            obj: <module '_pytest.assertion.rewrite' from '/home/jack/dev/mypf/mypf_hledger/pandaflow/.venv/lib/python3.13/site-packages/_pytest/assertion/rewrite.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_uuid.py>
            name: pd
            obj: <module 'pandas' from '/home/jack/dev/mypf/mypf_hledger/pandaflow/.venv/lib/python3.13/site-packages/pandas/__init__.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_uuid.py>
            name: pytest
            obj: <module 'pytest' from '/home/jack/dev/mypf/mypf_hledger/pandaflow/.venv/lib/python3.13/site-packages/pytest/__init__.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_uuid.py>
            name: UUIDStrategy
            obj: <class 'pandaflow.strategies.uuid.UUIDStrategy'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_uuid.py>
            name: uuid7
            obj: <function uuid7 at 0x75015e38c2c0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_uuid.py>
            name: strategy
            obj: <pytest_fixture(<function strategy at 0x75015e356d40>)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_uuid.py>
            name: sample_df
            obj: <pytest_fixture(<function sample_df at 0x75015e357a60>)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_uuid.py>
            name: test_uuid_column_created
            obj: <function test_uuid_column_created at 0x75015e38c220>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x75015e356490>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_uuid_column_created>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_uuid.py>
            name: test_uuid_values_are_unique
            obj: <function test_uuid_values_are_unique at 0x75015e38c860>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x75015e3565d0>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_uuid_values_are_unique>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_uuid.py>
            name: test_uuid_format
            obj: <function test_uuid_format at 0x75015e38c900>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x75015e356710>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_uuid_format>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_uuid.py>
            name: test_missing_field_key
            obj: <function test_missing_field_key at 0x75015e38c9a0>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x75015e3567b0>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_missing_field_key>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_uuid.py>
            name: test_validate_rule_
            obj: <function test_validate_rule_ at 0x75015e38ca40>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x75015e356a30>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_validate_rule_>] [hook]
      finish pytest_make_collect_report --> <CollectReport 'pandaflow/tests/test_strategies/test_uuid.py' lenresult=5 outcome='passed'> [hook]
    genitems <Function test_uuid_column_created> [collection]
      pytest_itemcollected [hook]
          item: <Function test_uuid_column_created>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_uuid_values_are_unique> [collection]
      pytest_itemcollected [hook]
          item: <Function test_uuid_values_are_unique>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_uuid_format> [collection]
      pytest_itemcollected [hook]
          item: <Function test_uuid_format>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_missing_field_key> [collection]
      pytest_itemcollected [hook]
          item: <Function test_missing_field_key>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_validate_rule_> [collection]
      pytest_itemcollected [hook]
          item: <Function test_validate_rule_>
      finish pytest_itemcollected --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'pandaflow/tests/test_strategies/test_uuid.py' lenresult=5 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'pandaflow/tests/test_strategies' lenresult=19 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <Module test_utils.py> [collection]
      pytest_collectstart [hook]
          collector: <Module test_utils.py>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Module test_utils.py>
      early skip of rewriting module: pandaflow.tests [assertion]
      find_module called for: pandaflow.tests.test_utils [assertion]
      matched test file '/home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/tests/test_utils.py' [assertion]
      found cached rewritten pyc for /home/jack/dev/mypf/mypf_new/pandaflow/pandaflow/tests/test_utils.py [assertion]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_utils.py>
            name: @py_builtins
            obj: <module 'builtins' (built-in)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_utils.py>
            name: @pytest_ar
            obj: <module '_pytest.assertion.rewrite' from '/home/jack/dev/mypf/mypf_hledger/pandaflow/.venv/lib/python3.13/site-packages/_pytest/assertion/rewrite.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_utils.py>
            name: pytest
            obj: <module 'pytest' from '/home/jack/dev/mypf/mypf_hledger/pandaflow/.venv/lib/python3.13/site-packages/pytest/__init__.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_utils.py>
            name: datetime
            obj: <class 'datetime.datetime'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_utils.py>
            name: parse_date
            obj: <function parse_date at 0x75015e4c5e40>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_utils.py>
            name: parse_float
            obj: <function parse_float at 0x75015e4c5ee0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_utils.py>
            name: formatter_float
            obj: <function formatter_float at 0x75015e4c5f80>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_utils.py>
            name: formatter_date
            obj: <function formatter_date at 0x75015e4c6020>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_utils.py>
            name: get_input_parser
            obj: <function get_input_parser at 0x75015e4c60c0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_utils.py>
            name: get_output_formatter
            obj: <function get_output_formatter at 0x75015e4c6160>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_utils.py>
            name: test_parse_date_valid
            obj: <function test_parse_date_valid at 0x75015e38ce00>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x75015e38cd70>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_parse_date_valid>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_utils.py>
            name: test_parse_date_invalid
            obj: <function test_parse_date_invalid at 0x75015e38cea0>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x75015e38dc70>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_parse_date_invalid>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_utils.py>
            name: test_parse_date_empty
            obj: <function test_parse_date_empty at 0x75015e38cf40>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x75015e356490>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_parse_date_empty>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_utils.py>
            name: test_parse_date_with_locale
            obj: <function test_parse_date_with_locale at 0x75015e38cfe0>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x75015e3565d0>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_parse_date_with_locale>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_utils.py>
            name: test_parse_float_basic
            obj: <function test_parse_float_basic at 0x75015e38d080>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x75015e356710>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_parse_float_basic>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_utils.py>
            name: test_parse_float_us_format
            obj: <function test_parse_float_us_format at 0x75015e38d120>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x75015e3567b0>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_parse_float_us_format>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_utils.py>
            name: test_parse_float_empty
            obj: <function test_parse_float_empty at 0x75015e38d1c0>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x75015e356a30>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_parse_float_empty>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_utils.py>
            name: test_parse_float_invalid
            obj: <function test_parse_float_invalid at 0x75015e38d260>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x75015e38caf0>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_parse_float_invalid>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_utils.py>
            name: test_formatter_float_as_string
            obj: <function test_formatter_float_as_string at 0x75015e38d300>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x75015e38dbd0>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_formatter_float_as_string>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_utils.py>
            name: test_formatter_float_as_number
            obj: <function test_formatter_float_as_number at 0x75015e38d3a0>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x75015e38ddb0>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_formatter_float_as_number>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_utils.py>
            name: test_formatter_float_invalid_input
            obj: <function test_formatter_float_invalid_input at 0x75015e38d440>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x75015e38def0>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_formatter_float_invalid_input>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_utils.py>
            name: test_formatter_date_string_input
            obj: <function test_formatter_date_string_input at 0x75015e38d4e0>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x75015e38e030>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_formatter_date_string_input>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_utils.py>
            name: test_formatter_date_datetime_input
            obj: <function test_formatter_date_datetime_input at 0x75015e38d580>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x75015e38e170>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_formatter_date_datetime_input>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_utils.py>
            name: test_formatter_date_pass_through
            obj: <function test_formatter_date_pass_through at 0x75015e38d620>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x75015e38e2b0>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_formatter_date_pass_through>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_utils.py>
            name: test_formatter_date_invalid_string
            obj: <function test_formatter_date_invalid_string at 0x75015e38d6c0>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x75015e38e3f0>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_formatter_date_invalid_string>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_utils.py>
            name: test_formatter_date_none
            obj: <function test_formatter_date_none at 0x75015e38d760>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x75015e38e530>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_formatter_date_none>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_utils.py>
            name: test_get_input_parser_known
            obj: <function test_get_input_parser_known at 0x75015e38d800>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x75015e38e670>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_get_input_parser_known>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_utils.py>
            name: test_get_input_parser_none
            obj: <function test_get_input_parser_none at 0x75015e38d8a0>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x75015e38e7b0>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_get_input_parser_none>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_utils.py>
            name: test_get_input_parser_unknown
            obj: <function test_get_input_parser_unknown at 0x75015e38d940>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x75015e38e8f0>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_get_input_parser_unknown>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_utils.py>
            name: test_get_output_formatter_known
            obj: <function test_get_output_formatter_known at 0x75015e38d9e0>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x75015e356170>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_get_output_formatter_known>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_utils.py>
            name: test_get_output_formatter_none
            obj: <function test_get_output_formatter_none at 0x75015e38da80>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x75015e356490>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_get_output_formatter_none>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_utils.py>
            name: test_get_output_formatter_unknown
            obj: <function test_get_output_formatter_unknown at 0x75015e38db20>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x75015e3565d0>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_get_output_formatter_unknown>] [hook]
      finish pytest_make_collect_report --> <CollectReport 'pandaflow/tests/test_utils.py' lenresult=22 outcome='passed'> [hook]
    genitems <Function test_parse_date_valid> [collection]
      pytest_itemcollected [hook]
          item: <Function test_parse_date_valid>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_parse_date_invalid> [collection]
      pytest_itemcollected [hook]
          item: <Function test_parse_date_invalid>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_parse_date_empty> [collection]
      pytest_itemcollected [hook]
          item: <Function test_parse_date_empty>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_parse_date_with_locale> [collection]
      pytest_itemcollected [hook]
          item: <Function test_parse_date_with_locale>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_parse_float_basic> [collection]
      pytest_itemcollected [hook]
          item: <Function test_parse_float_basic>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_parse_float_us_format> [collection]
      pytest_itemcollected [hook]
          item: <Function test_parse_float_us_format>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_parse_float_empty> [collection]
      pytest_itemcollected [hook]
          item: <Function test_parse_float_empty>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_parse_float_invalid> [collection]
      pytest_itemcollected [hook]
          item: <Function test_parse_float_invalid>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_formatter_float_as_string> [collection]
      pytest_itemcollected [hook]
          item: <Function test_formatter_float_as_string>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_formatter_float_as_number> [collection]
      pytest_itemcollected [hook]
          item: <Function test_formatter_float_as_number>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_formatter_float_invalid_input> [collection]
      pytest_itemcollected [hook]
          item: <Function test_formatter_float_invalid_input>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_formatter_date_string_input> [collection]
      pytest_itemcollected [hook]
          item: <Function test_formatter_date_string_input>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_formatter_date_datetime_input> [collection]
      pytest_itemcollected [hook]
          item: <Function test_formatter_date_datetime_input>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_formatter_date_pass_through> [collection]
      pytest_itemcollected [hook]
          item: <Function test_formatter_date_pass_through>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_formatter_date_invalid_string> [collection]
      pytest_itemcollected [hook]
          item: <Function test_formatter_date_invalid_string>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_formatter_date_none> [collection]
      pytest_itemcollected [hook]
          item: <Function test_formatter_date_none>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_get_input_parser_known> [collection]
      pytest_itemcollected [hook]
          item: <Function test_get_input_parser_known>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_get_input_parser_none> [collection]
      pytest_itemcollected [hook]
          item: <Function test_get_input_parser_none>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_get_input_parser_unknown> [collection]
      pytest_itemcollected [hook]
          item: <Function test_get_input_parser_unknown>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_get_output_formatter_known> [collection]
      pytest_itemcollected [hook]
          item: <Function test_get_output_formatter_known>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_get_output_formatter_none> [collection]
      pytest_itemcollected [hook]
          item: <Function test_get_output_formatter_none>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_get_output_formatter_unknown> [collection]
      pytest_itemcollected [hook]
          item: <Function test_get_output_formatter_unknown>
      finish pytest_itemcollected --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'pandaflow/tests/test_utils.py' lenresult=22 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'pandaflow/tests' lenresult=4 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'pandaflow' lenresult=4 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport '.' lenresult=3 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
      pytest_collection_modifyitems [hook]
          session: <Session  exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
          config: <_pytest.config.Config object at 0x750178ba7b60>
          items: [<Function test_archive_command>, <Function test_check_command_valid>, <Function test_check_command_invalid_strategy>, <Function test_duplicates_found>, <Function test_duplicates_none_found>, <Function test_duplicates_missing_column>, <Function test_run_single_file_to_stdout>, <Function test_run_directory_to_file>, <Function test_run_skipped_files>, <Function test_strategies_success>, <Function test_strategies_none>, <Function test_archive_by_month_creates_correct_files>, <Function test_archive_by_year_creates_correct_structure>, <Function test_invalid_date_column_raises_error>, <Function test_validate_config_accepts_valid_schema>, <Function test_load_json_config>, <Function test_load_toml_config>, <Function test_load_config_unsupported_extension>, <Function test_factory_initialization>, <Function test_get_strategy_by_name_and_version>, <Function test_get_strategy_by_name_highest_version>, <Function test_get_strategy_missing_name_raises>, <Function test_get_strategy_missing_version_raises>, <Function test_get_registered_strategies_success>, <Function test_load_strategies_success>, <Function test_load_strategies_invalid_type>, <Function test_load_strategies_attribute_error_fallback>, <Function test_run_applies_strategy>, <Function test_check_valid_rule>, <Function test_check_invalid_rule_raises>, <Function test_validate_rule_not_implemented>, <Function test_apply_not_implemented>, <Function test_validate_rule_parses_correctly>, <Function test_apply_calculates_and_formats_amount>, <Function test_apply_without_output_rule>, <Function test_apply_with_invalid_formula_raises>, <Function test_validate_rule>, <Function test_basic_ratio>, <Function test_ratio_with_rounding>, <Function test_missing_numerator>, <Function test_missing_denominator>, <Function test_division_by_zero>, <Function test_custom_field_name>, <Function test_validate_rule_parses_correctly>, <Function test_apply_sets_constant_value>, <Function test_apply_with_missing_value_defaults_to_empty>, <Function test_run_method_sets_constant_value>, <Function test_validate_rule_parses_correctly>, <Function test_apply_with_input_and_output_rules>, <Function test_apply_with_fillna_replaces_empty_and_null>, <Function test_apply_without_input_or_output_rules>, <Function test_apply_raises_if_source_column_missing>, <Function test_validate_rule>, <Function test_validate_rule>, <Function test_missing_file_returns_not_found>, <Function test_missing_key_or_value_raises>, <Function test_missing_lookup_columns_raises>, <Function test_missing_source_column_raises>, <Function test_successful_lookup>, <Function test_debug_strategy_prints_field_and_head>, <Function test_debug_strategy_does_not_modify_df>, <Function test_deduplicate_by_field>, <Function test_deduplicate_by_subset>, <Function test_no_duplicates>, <Function test_validate_rule>, <Function test_drop_single_column>, <Function test_drop_multiple_columns>, <Function test_drop_missing_column_raises>, <Function test_validate_rule>, <Function test_valid_formula_filters_rows>, <Function test_non_boolean_formula_raises_error>, <Function test_field_not_in_df_does_not_format>, <Function test_formula_with_multiple_conditions>, <Function test_validate_rule>, <Function test_hash_generation>, <Function test_missing_column_raises>, <Function test_empty_string_handling>, <Function test_validate_rule>, <Function test_merge_multiple_columns_with_separator>, <Function test_merge_with_nan_like_strings>, <Function test_merge_with_source_as_string>, <Function test_merge_missing_column_raises>, <Function test_validate_rule>, <Function test_merge_with_formula>, <Function test_merge_with_source_columns>, <Function test_missing_formula_and_source_raises>, <Function test_validate_rule>, <Function test_merge_with_missing_column_in_formula>, <Function test_valid_regex_extraction>, <Function test_missing_source_column_raises>, <Function test_invalid_regex_returns_empty>, <Function test_group_id_out_of_range_returns_none>, <Function test_validate_rule>, <Function test_reorder_columns_valid>, <Function test_reorder_columns_missing_column>, <Function test_reorder_columns_empty_rule>, <Function test_reorder_columns_partial_order>, <Function test_replace_string_occurrence>, <Function test_replace_numeric_occurrence>, <Function test_missing_column_raises>, <Function test_replace_with_empty_from>, <Function test_validate_rule_maps_keys>, <Function test_sort_single_column>, <Function test_sort_multiple_columns>, <Function test_sort_with_na_first>, <Function test_sort_with_mismatched_ascending>, <Function test_sort_with_missing_column>, <Function test_sort_empty_columns>, <Function test_sort_default_ascending>, <Function test_validate_rule>, <Function test_split_basic>, <Function test_split_with_maxsplit>, <Function test_split_drop_original>, <Function test_split_column_missing>, <Function test_split_empty_string>, <Function test_split_custom_prefix>, <Function test_uuid_column_created>, <Function test_uuid_values_are_unique>, <Function test_uuid_format>, <Function test_missing_field_key>, <Function test_validate_rule_>, <Function test_parse_date_valid>, <Function test_parse_date_invalid>, <Function test_parse_date_empty>, <Function test_parse_date_with_locale>, <Function test_parse_float_basic>, <Function test_parse_float_us_format>, <Function test_parse_float_empty>, <Function test_parse_float_invalid>, <Function test_formatter_float_as_string>, <Function test_formatter_float_as_number>, <Function test_formatter_float_invalid_input>, <Function test_formatter_date_string_input>, <Function test_formatter_date_datetime_input>, <Function test_formatter_date_pass_through>, <Function test_formatter_date_invalid_string>, <Function test_formatter_date_none>, <Function test_get_input_parser_known>, <Function test_get_input_parser_none>, <Function test_get_input_parser_unknown>, <Function test_get_output_formatter_known>, <Function test_get_output_formatter_none>, <Function test_get_output_formatter_unknown>]
      finish pytest_collection_modifyitems --> [] [hook]
      pytest_collection_finish [hook]
          session: <Session  exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
        pytest_report_collectionfinish [hook]
            config: <_pytest.config.Config object at 0x750178ba7b60>
            items: [<Function test_archive_command>, <Function test_check_command_valid>, <Function test_check_command_invalid_strategy>, <Function test_duplicates_found>, <Function test_duplicates_none_found>, <Function test_duplicates_missing_column>, <Function test_run_single_file_to_stdout>, <Function test_run_directory_to_file>, <Function test_run_skipped_files>, <Function test_strategies_success>, <Function test_strategies_none>, <Function test_archive_by_month_creates_correct_files>, <Function test_archive_by_year_creates_correct_structure>, <Function test_invalid_date_column_raises_error>, <Function test_validate_config_accepts_valid_schema>, <Function test_load_json_config>, <Function test_load_toml_config>, <Function test_load_config_unsupported_extension>, <Function test_factory_initialization>, <Function test_get_strategy_by_name_and_version>, <Function test_get_strategy_by_name_highest_version>, <Function test_get_strategy_missing_name_raises>, <Function test_get_strategy_missing_version_raises>, <Function test_get_registered_strategies_success>, <Function test_load_strategies_success>, <Function test_load_strategies_invalid_type>, <Function test_load_strategies_attribute_error_fallback>, <Function test_run_applies_strategy>, <Function test_check_valid_rule>, <Function test_check_invalid_rule_raises>, <Function test_validate_rule_not_implemented>, <Function test_apply_not_implemented>, <Function test_validate_rule_parses_correctly>, <Function test_apply_calculates_and_formats_amount>, <Function test_apply_without_output_rule>, <Function test_apply_with_invalid_formula_raises>, <Function test_validate_rule>, <Function test_basic_ratio>, <Function test_ratio_with_rounding>, <Function test_missing_numerator>, <Function test_missing_denominator>, <Function test_division_by_zero>, <Function test_custom_field_name>, <Function test_validate_rule_parses_correctly>, <Function test_apply_sets_constant_value>, <Function test_apply_with_missing_value_defaults_to_empty>, <Function test_run_method_sets_constant_value>, <Function test_validate_rule_parses_correctly>, <Function test_apply_with_input_and_output_rules>, <Function test_apply_with_fillna_replaces_empty_and_null>, <Function test_apply_without_input_or_output_rules>, <Function test_apply_raises_if_source_column_missing>, <Function test_validate_rule>, <Function test_validate_rule>, <Function test_missing_file_returns_not_found>, <Function test_missing_key_or_value_raises>, <Function test_missing_lookup_columns_raises>, <Function test_missing_source_column_raises>, <Function test_successful_lookup>, <Function test_debug_strategy_prints_field_and_head>, <Function test_debug_strategy_does_not_modify_df>, <Function test_deduplicate_by_field>, <Function test_deduplicate_by_subset>, <Function test_no_duplicates>, <Function test_validate_rule>, <Function test_drop_single_column>, <Function test_drop_multiple_columns>, <Function test_drop_missing_column_raises>, <Function test_validate_rule>, <Function test_valid_formula_filters_rows>, <Function test_non_boolean_formula_raises_error>, <Function test_field_not_in_df_does_not_format>, <Function test_formula_with_multiple_conditions>, <Function test_validate_rule>, <Function test_hash_generation>, <Function test_missing_column_raises>, <Function test_empty_string_handling>, <Function test_validate_rule>, <Function test_merge_multiple_columns_with_separator>, <Function test_merge_with_nan_like_strings>, <Function test_merge_with_source_as_string>, <Function test_merge_missing_column_raises>, <Function test_validate_rule>, <Function test_merge_with_formula>, <Function test_merge_with_source_columns>, <Function test_missing_formula_and_source_raises>, <Function test_validate_rule>, <Function test_merge_with_missing_column_in_formula>, <Function test_valid_regex_extraction>, <Function test_missing_source_column_raises>, <Function test_invalid_regex_returns_empty>, <Function test_group_id_out_of_range_returns_none>, <Function test_validate_rule>, <Function test_reorder_columns_valid>, <Function test_reorder_columns_missing_column>, <Function test_reorder_columns_empty_rule>, <Function test_reorder_columns_partial_order>, <Function test_replace_string_occurrence>, <Function test_replace_numeric_occurrence>, <Function test_missing_column_raises>, <Function test_replace_with_empty_from>, <Function test_validate_rule_maps_keys>, <Function test_sort_single_column>, <Function test_sort_multiple_columns>, <Function test_sort_with_na_first>, <Function test_sort_with_mismatched_ascending>, <Function test_sort_with_missing_column>, <Function test_sort_empty_columns>, <Function test_sort_default_ascending>, <Function test_validate_rule>, <Function test_split_basic>, <Function test_split_with_maxsplit>, <Function test_split_drop_original>, <Function test_split_column_missing>, <Function test_split_empty_string>, <Function test_split_custom_prefix>, <Function test_uuid_column_created>, <Function test_uuid_values_are_unique>, <Function test_uuid_format>, <Function test_missing_field_key>, <Function test_validate_rule_>, <Function test_parse_date_valid>, <Function test_parse_date_invalid>, <Function test_parse_date_empty>, <Function test_parse_date_with_locale>, <Function test_parse_float_basic>, <Function test_parse_float_us_format>, <Function test_parse_float_empty>, <Function test_parse_float_invalid>, <Function test_formatter_float_as_string>, <Function test_formatter_float_as_number>, <Function test_formatter_float_invalid_input>, <Function test_formatter_date_string_input>, <Function test_formatter_date_datetime_input>, <Function test_formatter_date_pass_through>, <Function test_formatter_date_invalid_string>, <Function test_formatter_date_none>, <Function test_get_input_parser_known>, <Function test_get_input_parser_none>, <Function test_get_input_parser_unknown>, <Function test_get_output_formatter_known>, <Function test_get_output_formatter_none>, <Function test_get_output_formatter_unknown>]
            start_path: /home/jack/dev/mypf/mypf_new/pandaflow
            startdir: /home/jack/dev/mypf/mypf_new/pandaflow
        finish pytest_report_collectionfinish --> [] [hook]
      finish pytest_collection_finish --> [] [hook]
    finish pytest_collection --> None [hook]
    pytest_runtestloop [hook]
        session: <Session  exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=143>
      pytest_runtest_protocol [hook]
          item: <Function test_archive_command>
          nextitem: <Function test_check_command_valid>
        pytest_runtest_logstart [hook]
            nodeid: pandaflow/tests/test_cli/test_archive.py::test_archive_command
            location: ('pandaflow/tests/test_cli/test_archive.py', 12, 'test_archive_command')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_archive_command>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='tmp_path_factory' scope='session' baseid=''>
              request: <SubRequest 'tmp_path_factory' for <Function test_archive_command>>
          finish pytest_fixture_setup --> TempPathFactory(_given_basetemp=None, _trace=<pluggy._tracing.TagTracerSub object at 0x7501781f6b10>, _basetemp=None, _retention_count=3, _retention_policy='all') [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='runner' scope='function' baseid='pandaflow/tests/test_cli/test_archive.py'>
              request: <SubRequest 'runner' for <Function test_archive_command>>
          finish pytest_fixture_setup --> <click.testing.CliRunner object at 0x750177dabe00> [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='tmp_path' scope='function' baseid=''>
              request: <SubRequest 'tmp_path' for <Function test_archive_command>>
          early skip of rewriting module: getpass [assertion]
          early skip of rewriting module: termios [assertion]
          new basetemp /tmp/pytest-of-jack/pytest-84 [config:tmpdir]
          mktemp /tmp/pytest-of-jack/pytest-84/test_archive_command0 [config:tmpdir]
          finish pytest_fixture_setup --> /tmp/pytest-of-jack/pytest-84/test_archive_command0 [hook]
        finish pytest_runtest_setup --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_archive_command>
            call: <CallInfo when='setup' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_cli/test_archive.py::test_archive_command' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_cli/test_archive.py::test_archive_command' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_cli/test_archive.py::test_archive_command' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_archive_command>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_archive_command>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_archive_command>
            call: <CallInfo when='call' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_cli/test_archive.py::test_archive_command' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_cli/test_archive.py::test_archive_command' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_cli/test_archive.py::test_archive_command' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_archive_command>
            nextitem: <Function test_check_command_valid>
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='tmp_path' scope='function' baseid=''>
              request: <SubRequest 'tmp_path' for <Function test_archive_command>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='runner' scope='function' baseid='pandaflow/tests/test_cli/test_archive.py'>
              request: <SubRequest 'runner' for <Function test_archive_command>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_archive_command>
            call: <CallInfo when='teardown' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_cli/test_archive.py::test_archive_command' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_cli/test_archive.py::test_archive_command' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_cli/test_archive.py::test_archive_command' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: pandaflow/tests/test_cli/test_archive.py::test_archive_command
            location: ('pandaflow/tests/test_cli/test_archive.py', 12, 'test_archive_command')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_check_command_valid>
          nextitem: <Function test_check_command_invalid_strategy>
        pytest_runtest_logstart [hook]
            nodeid: pandaflow/tests/test_cli/test_check.py::test_check_command_valid
            location: ('pandaflow/tests/test_cli/test_check.py', 12, 'test_check_command_valid')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_check_command_valid>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='runner' scope='function' baseid='pandaflow/tests/test_cli/test_check.py'>
              request: <SubRequest 'runner' for <Function test_check_command_valid>>
          finish pytest_fixture_setup --> <click.testing.CliRunner object at 0x75015e499e50> [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='tmp_path' scope='function' baseid=''>
              request: <SubRequest 'tmp_path' for <Function test_check_command_valid>>
          mktemp /tmp/pytest-of-jack/pytest-84/test_check_command_valid0 [config:tmpdir]
          finish pytest_fixture_setup --> /tmp/pytest-of-jack/pytest-84/test_check_command_valid0 [hook]
        finish pytest_runtest_setup --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_check_command_valid>
            call: <CallInfo when='setup' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_cli/test_check.py::test_check_command_valid' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_cli/test_check.py::test_check_command_valid' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_cli/test_check.py::test_check_command_valid' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_check_command_valid>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_check_command_valid>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_check_command_valid>
            call: <CallInfo when='call' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_cli/test_check.py::test_check_command_valid' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_cli/test_check.py::test_check_command_valid' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_cli/test_check.py::test_check_command_valid' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_check_command_valid>
            nextitem: <Function test_check_command_invalid_strategy>
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='tmp_path' scope='function' baseid=''>
              request: <SubRequest 'tmp_path' for <Function test_check_command_valid>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='runner' scope='function' baseid='pandaflow/tests/test_cli/test_check.py'>
              request: <SubRequest 'runner' for <Function test_check_command_valid>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_check_command_valid>
            call: <CallInfo when='teardown' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_cli/test_check.py::test_check_command_valid' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_cli/test_check.py::test_check_command_valid' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_cli/test_check.py::test_check_command_valid' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: pandaflow/tests/test_cli/test_check.py::test_check_command_valid
            location: ('pandaflow/tests/test_cli/test_check.py', 12, 'test_check_command_valid')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_check_command_invalid_strategy>
          nextitem: <Function test_duplicates_found>
        pytest_runtest_logstart [hook]
            nodeid: pandaflow/tests/test_cli/test_check.py::test_check_command_invalid_strategy
            location: ('pandaflow/tests/test_cli/test_check.py', 27, 'test_check_command_invalid_strategy')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_check_command_invalid_strategy>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='runner' scope='function' baseid='pandaflow/tests/test_cli/test_check.py'>
              request: <SubRequest 'runner' for <Function test_check_command_invalid_strategy>>
          finish pytest_fixture_setup --> <click.testing.CliRunner object at 0x75015e49b750> [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='tmp_path' scope='function' baseid=''>
              request: <SubRequest 'tmp_path' for <Function test_check_command_invalid_strategy>>
          mktemp /tmp/pytest-of-jack/pytest-84/test_check_command_invalid_str0 [config:tmpdir]
          finish pytest_fixture_setup --> /tmp/pytest-of-jack/pytest-84/test_check_command_invalid_str0 [hook]
        finish pytest_runtest_setup --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_check_command_invalid_strategy>
            call: <CallInfo when='setup' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_cli/test_check.py::test_check_command_invalid_strategy' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_cli/test_check.py::test_check_command_invalid_strategy' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_cli/test_check.py::test_check_command_invalid_strategy' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_check_command_invalid_strategy>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_check_command_invalid_strategy>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_check_command_invalid_strategy>
            call: <CallInfo when='call' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_cli/test_check.py::test_check_command_invalid_strategy' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_cli/test_check.py::test_check_command_invalid_strategy' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_cli/test_check.py::test_check_command_invalid_strategy' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_check_command_invalid_strategy>
            nextitem: <Function test_duplicates_found>
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='tmp_path' scope='function' baseid=''>
              request: <SubRequest 'tmp_path' for <Function test_check_command_invalid_strategy>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='runner' scope='function' baseid='pandaflow/tests/test_cli/test_check.py'>
              request: <SubRequest 'runner' for <Function test_check_command_invalid_strategy>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_check_command_invalid_strategy>
            call: <CallInfo when='teardown' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_cli/test_check.py::test_check_command_invalid_strategy' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_cli/test_check.py::test_check_command_invalid_strategy' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_cli/test_check.py::test_check_command_invalid_strategy' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: pandaflow/tests/test_cli/test_check.py::test_check_command_invalid_strategy
            location: ('pandaflow/tests/test_cli/test_check.py', 27, 'test_check_command_invalid_strategy')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_duplicates_found>
          nextitem: <Function test_duplicates_none_found>
        pytest_runtest_logstart [hook]
            nodeid: pandaflow/tests/test_cli/test_duplicates.py::test_duplicates_found
            location: ('pandaflow/tests/test_cli/test_duplicates.py', 12, 'test_duplicates_found')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_duplicates_found>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='runner' scope='function' baseid='pandaflow/tests/test_cli/test_duplicates.py'>
              request: <SubRequest 'runner' for <Function test_duplicates_found>>
          finish pytest_fixture_setup --> <click.testing.CliRunner object at 0x75015e3c1f30> [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='tmp_path' scope='function' baseid=''>
              request: <SubRequest 'tmp_path' for <Function test_duplicates_found>>
          mktemp /tmp/pytest-of-jack/pytest-84/test_duplicates_found0 [config:tmpdir]
          finish pytest_fixture_setup --> /tmp/pytest-of-jack/pytest-84/test_duplicates_found0 [hook]
        finish pytest_runtest_setup --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_duplicates_found>
            call: <CallInfo when='setup' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_cli/test_duplicates.py::test_duplicates_found' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_cli/test_duplicates.py::test_duplicates_found' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_cli/test_duplicates.py::test_duplicates_found' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_duplicates_found>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_duplicates_found>
          early skip of rewriting module: pandas.io.formats.csvs [assertion]
          early skip of rewriting module: numpy.rec [assertion]
          early skip of rewriting module: zstandard [assertion]
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_duplicates_found>
            call: <CallInfo when='call' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_cli/test_duplicates.py::test_duplicates_found' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_cli/test_duplicates.py::test_duplicates_found' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_cli/test_duplicates.py::test_duplicates_found' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_duplicates_found>
            nextitem: <Function test_duplicates_none_found>
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='tmp_path' scope='function' baseid=''>
              request: <SubRequest 'tmp_path' for <Function test_duplicates_found>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='runner' scope='function' baseid='pandaflow/tests/test_cli/test_duplicates.py'>
              request: <SubRequest 'runner' for <Function test_duplicates_found>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_duplicates_found>
            call: <CallInfo when='teardown' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_cli/test_duplicates.py::test_duplicates_found' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_cli/test_duplicates.py::test_duplicates_found' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_cli/test_duplicates.py::test_duplicates_found' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: pandaflow/tests/test_cli/test_duplicates.py::test_duplicates_found
            location: ('pandaflow/tests/test_cli/test_duplicates.py', 12, 'test_duplicates_found')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_duplicates_none_found>
          nextitem: <Function test_duplicates_missing_column>
        pytest_runtest_logstart [hook]
            nodeid: pandaflow/tests/test_cli/test_duplicates.py::test_duplicates_none_found
            location: ('pandaflow/tests/test_cli/test_duplicates.py', 27, 'test_duplicates_none_found')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_duplicates_none_found>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='runner' scope='function' baseid='pandaflow/tests/test_cli/test_duplicates.py'>
              request: <SubRequest 'runner' for <Function test_duplicates_none_found>>
          finish pytest_fixture_setup --> <click.testing.CliRunner object at 0x75015e3c1350> [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='tmp_path' scope='function' baseid=''>
              request: <SubRequest 'tmp_path' for <Function test_duplicates_none_found>>
          mktemp /tmp/pytest-of-jack/pytest-84/test_duplicates_none_found0 [config:tmpdir]
          finish pytest_fixture_setup --> /tmp/pytest-of-jack/pytest-84/test_duplicates_none_found0 [hook]
        finish pytest_runtest_setup --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_duplicates_none_found>
            call: <CallInfo when='setup' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_cli/test_duplicates.py::test_duplicates_none_found' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_cli/test_duplicates.py::test_duplicates_none_found' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_cli/test_duplicates.py::test_duplicates_none_found' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_duplicates_none_found>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_duplicates_none_found>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_duplicates_none_found>
            call: <CallInfo when='call' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_cli/test_duplicates.py::test_duplicates_none_found' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_cli/test_duplicates.py::test_duplicates_none_found' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_cli/test_duplicates.py::test_duplicates_none_found' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_duplicates_none_found>
            nextitem: <Function test_duplicates_missing_column>
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='tmp_path' scope='function' baseid=''>
              request: <SubRequest 'tmp_path' for <Function test_duplicates_none_found>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='runner' scope='function' baseid='pandaflow/tests/test_cli/test_duplicates.py'>
              request: <SubRequest 'runner' for <Function test_duplicates_none_found>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_duplicates_none_found>
            call: <CallInfo when='teardown' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_cli/test_duplicates.py::test_duplicates_none_found' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_cli/test_duplicates.py::test_duplicates_none_found' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_cli/test_duplicates.py::test_duplicates_none_found' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: pandaflow/tests/test_cli/test_duplicates.py::test_duplicates_none_found
            location: ('pandaflow/tests/test_cli/test_duplicates.py', 27, 'test_duplicates_none_found')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_duplicates_missing_column>
          nextitem: <Function test_run_single_file_to_stdout>
        pytest_runtest_logstart [hook]
            nodeid: pandaflow/tests/test_cli/test_duplicates.py::test_duplicates_missing_column
            location: ('pandaflow/tests/test_cli/test_duplicates.py', 41, 'test_duplicates_missing_column')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_duplicates_missing_column>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='runner' scope='function' baseid='pandaflow/tests/test_cli/test_duplicates.py'>
              request: <SubRequest 'runner' for <Function test_duplicates_missing_column>>
          finish pytest_fixture_setup --> <click.testing.CliRunner object at 0x75015e4ee9f0> [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='tmp_path' scope='function' baseid=''>
              request: <SubRequest 'tmp_path' for <Function test_duplicates_missing_column>>
          mktemp /tmp/pytest-of-jack/pytest-84/test_duplicates_missing_column0 [config:tmpdir]
          finish pytest_fixture_setup --> /tmp/pytest-of-jack/pytest-84/test_duplicates_missing_column0 [hook]
        finish pytest_runtest_setup --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_duplicates_missing_column>
            call: <CallInfo when='setup' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_cli/test_duplicates.py::test_duplicates_missing_column' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_cli/test_duplicates.py::test_duplicates_missing_column' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_cli/test_duplicates.py::test_duplicates_missing_column' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_duplicates_missing_column>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_duplicates_missing_column>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_duplicates_missing_column>
            call: <CallInfo when='call' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_cli/test_duplicates.py::test_duplicates_missing_column' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_cli/test_duplicates.py::test_duplicates_missing_column' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_cli/test_duplicates.py::test_duplicates_missing_column' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_duplicates_missing_column>
            nextitem: <Function test_run_single_file_to_stdout>
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='tmp_path' scope='function' baseid=''>
              request: <SubRequest 'tmp_path' for <Function test_duplicates_missing_column>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='runner' scope='function' baseid='pandaflow/tests/test_cli/test_duplicates.py'>
              request: <SubRequest 'runner' for <Function test_duplicates_missing_column>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_duplicates_missing_column>
            call: <CallInfo when='teardown' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_cli/test_duplicates.py::test_duplicates_missing_column' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_cli/test_duplicates.py::test_duplicates_missing_column' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_cli/test_duplicates.py::test_duplicates_missing_column' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: pandaflow/tests/test_cli/test_duplicates.py::test_duplicates_missing_column
            location: ('pandaflow/tests/test_cli/test_duplicates.py', 41, 'test_duplicates_missing_column')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_run_single_file_to_stdout>
          nextitem: <Function test_run_directory_to_file>
        pytest_runtest_logstart [hook]
            nodeid: pandaflow/tests/test_cli/test_run.py::test_run_single_file_to_stdout
            location: ('pandaflow/tests/test_cli/test_run.py', 30, 'test_run_single_file_to_stdout')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_run_single_file_to_stdout>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='tmp_path' scope='function' baseid=''>
              request: <SubRequest 'tmp_path' for <Function test_run_single_file_to_stdout>>
          mktemp /tmp/pytest-of-jack/pytest-84/test_run_single_file_to_stdout0 [config:tmpdir]
          finish pytest_fixture_setup --> /tmp/pytest-of-jack/pytest-84/test_run_single_file_to_stdout0 [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='input_file' scope='function' baseid='pandaflow/tests/test_cli/test_run.py'>
              request: <SubRequest 'input_file' for <Function test_run_single_file_to_stdout>>
          finish pytest_fixture_setup --> /tmp/pytest-of-jack/pytest-84/test_run_single_file_to_stdout0/data.csv [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='config_file' scope='function' baseid='pandaflow/tests/test_cli/test_run.py'>
              request: <SubRequest 'config_file' for <Function test_run_single_file_to_stdout>>
          finish pytest_fixture_setup --> /tmp/pytest-of-jack/pytest-84/test_run_single_file_to_stdout0/config.yaml [hook]
        finish pytest_runtest_setup --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_run_single_file_to_stdout>
            call: <CallInfo when='setup' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_cli/test_run.py::test_run_single_file_to_stdout' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_cli/test_run.py::test_run_single_file_to_stdout' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_cli/test_run.py::test_run_single_file_to_stdout' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_run_single_file_to_stdout>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_run_single_file_to_stdout>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_run_single_file_to_stdout>
            call: <CallInfo when='call' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_cli/test_run.py::test_run_single_file_to_stdout' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_cli/test_run.py::test_run_single_file_to_stdout' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_cli/test_run.py::test_run_single_file_to_stdout' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_run_single_file_to_stdout>
            nextitem: <Function test_run_directory_to_file>
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='config_file' scope='function' baseid='pandaflow/tests/test_cli/test_run.py'>
              request: <SubRequest 'config_file' for <Function test_run_single_file_to_stdout>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='input_file' scope='function' baseid='pandaflow/tests/test_cli/test_run.py'>
              request: <SubRequest 'input_file' for <Function test_run_single_file_to_stdout>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='config_file' scope='function' baseid='pandaflow/tests/test_cli/test_run.py'>
              request: <SubRequest 'config_file' for <Function test_run_single_file_to_stdout>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='input_file' scope='function' baseid='pandaflow/tests/test_cli/test_run.py'>
              request: <SubRequest 'input_file' for <Function test_run_single_file_to_stdout>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='tmp_path' scope='function' baseid=''>
              request: <SubRequest 'tmp_path' for <Function test_run_single_file_to_stdout>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_run_single_file_to_stdout>
            call: <CallInfo when='teardown' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_cli/test_run.py::test_run_single_file_to_stdout' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_cli/test_run.py::test_run_single_file_to_stdout' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_cli/test_run.py::test_run_single_file_to_stdout' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: pandaflow/tests/test_cli/test_run.py::test_run_single_file_to_stdout
            location: ('pandaflow/tests/test_cli/test_run.py', 30, 'test_run_single_file_to_stdout')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_run_directory_to_file>
          nextitem: <Function test_run_skipped_files>
        pytest_runtest_logstart [hook]
            nodeid: pandaflow/tests/test_cli/test_run.py::test_run_directory_to_file
            location: ('pandaflow/tests/test_cli/test_run.py', 50, 'test_run_directory_to_file')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_run_directory_to_file>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='tmp_path' scope='function' baseid=''>
              request: <SubRequest 'tmp_path' for <Function test_run_directory_to_file>>
          mktemp /tmp/pytest-of-jack/pytest-84/test_run_directory_to_file0 [config:tmpdir]
          finish pytest_fixture_setup --> /tmp/pytest-of-jack/pytest-84/test_run_directory_to_file0 [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='input_dir' scope='function' baseid='pandaflow/tests/test_cli/test_run.py'>
              request: <SubRequest 'input_dir' for <Function test_run_directory_to_file>>
          finish pytest_fixture_setup --> /tmp/pytest-of-jack/pytest-84/test_run_directory_to_file0/csvs [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='config_file' scope='function' baseid='pandaflow/tests/test_cli/test_run.py'>
              request: <SubRequest 'config_file' for <Function test_run_directory_to_file>>
          finish pytest_fixture_setup --> /tmp/pytest-of-jack/pytest-84/test_run_directory_to_file0/config.yaml [hook]
        finish pytest_runtest_setup --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_run_directory_to_file>
            call: <CallInfo when='setup' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_cli/test_run.py::test_run_directory_to_file' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_cli/test_run.py::test_run_directory_to_file' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_cli/test_run.py::test_run_directory_to_file' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_run_directory_to_file>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_run_directory_to_file>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_run_directory_to_file>
            call: <CallInfo when='call' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_cli/test_run.py::test_run_directory_to_file' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_cli/test_run.py::test_run_directory_to_file' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_cli/test_run.py::test_run_directory_to_file' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_run_directory_to_file>
            nextitem: <Function test_run_skipped_files>
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='config_file' scope='function' baseid='pandaflow/tests/test_cli/test_run.py'>
              request: <SubRequest 'config_file' for <Function test_run_directory_to_file>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='input_dir' scope='function' baseid='pandaflow/tests/test_cli/test_run.py'>
              request: <SubRequest 'input_dir' for <Function test_run_directory_to_file>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='config_file' scope='function' baseid='pandaflow/tests/test_cli/test_run.py'>
              request: <SubRequest 'config_file' for <Function test_run_directory_to_file>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='input_dir' scope='function' baseid='pandaflow/tests/test_cli/test_run.py'>
              request: <SubRequest 'input_dir' for <Function test_run_directory_to_file>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='tmp_path' scope='function' baseid=''>
              request: <SubRequest 'tmp_path' for <Function test_run_directory_to_file>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_run_directory_to_file>
            call: <CallInfo when='teardown' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_cli/test_run.py::test_run_directory_to_file' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_cli/test_run.py::test_run_directory_to_file' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_cli/test_run.py::test_run_directory_to_file' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: pandaflow/tests/test_cli/test_run.py::test_run_directory_to_file
            location: ('pandaflow/tests/test_cli/test_run.py', 50, 'test_run_directory_to_file')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_run_skipped_files>
          nextitem: <Function test_strategies_success>
        pytest_runtest_logstart [hook]
            nodeid: pandaflow/tests/test_cli/test_run.py::test_run_skipped_files
            location: ('pandaflow/tests/test_cli/test_run.py', 86, 'test_run_skipped_files')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_run_skipped_files>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='tmp_path' scope='function' baseid=''>
              request: <SubRequest 'tmp_path' for <Function test_run_skipped_files>>
          mktemp /tmp/pytest-of-jack/pytest-84/test_run_skipped_files0 [config:tmpdir]
          finish pytest_fixture_setup --> /tmp/pytest-of-jack/pytest-84/test_run_skipped_files0 [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='input_file' scope='function' baseid='pandaflow/tests/test_cli/test_run.py'>
              request: <SubRequest 'input_file' for <Function test_run_skipped_files>>
          finish pytest_fixture_setup --> /tmp/pytest-of-jack/pytest-84/test_run_skipped_files0/data.csv [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='config_file' scope='function' baseid='pandaflow/tests/test_cli/test_run.py'>
              request: <SubRequest 'config_file' for <Function test_run_skipped_files>>
          finish pytest_fixture_setup --> /tmp/pytest-of-jack/pytest-84/test_run_skipped_files0/config.yaml [hook]
        finish pytest_runtest_setup --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_run_skipped_files>
            call: <CallInfo when='setup' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_cli/test_run.py::test_run_skipped_files' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_cli/test_run.py::test_run_skipped_files' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_cli/test_run.py::test_run_skipped_files' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_run_skipped_files>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_run_skipped_files>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_run_skipped_files>
            call: <CallInfo when='call' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_cli/test_run.py::test_run_skipped_files' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_cli/test_run.py::test_run_skipped_files' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_cli/test_run.py::test_run_skipped_files' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_run_skipped_files>
            nextitem: <Function test_strategies_success>
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='config_file' scope='function' baseid='pandaflow/tests/test_cli/test_run.py'>
              request: <SubRequest 'config_file' for <Function test_run_skipped_files>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='input_file' scope='function' baseid='pandaflow/tests/test_cli/test_run.py'>
              request: <SubRequest 'input_file' for <Function test_run_skipped_files>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='config_file' scope='function' baseid='pandaflow/tests/test_cli/test_run.py'>
              request: <SubRequest 'config_file' for <Function test_run_skipped_files>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='input_file' scope='function' baseid='pandaflow/tests/test_cli/test_run.py'>
              request: <SubRequest 'input_file' for <Function test_run_skipped_files>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='tmp_path' scope='function' baseid=''>
              request: <SubRequest 'tmp_path' for <Function test_run_skipped_files>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_run_skipped_files>
            call: <CallInfo when='teardown' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_cli/test_run.py::test_run_skipped_files' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_cli/test_run.py::test_run_skipped_files' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_cli/test_run.py::test_run_skipped_files' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: pandaflow/tests/test_cli/test_run.py::test_run_skipped_files
            location: ('pandaflow/tests/test_cli/test_run.py', 86, 'test_run_skipped_files')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_strategies_success>
          nextitem: <Function test_strategies_none>
        pytest_runtest_logstart [hook]
            nodeid: pandaflow/tests/test_cli/test_strategies.py::test_strategies_success
            location: ('pandaflow/tests/test_cli/test_strategies.py', 12, 'test_strategies_success')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_strategies_success>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='runner' scope='function' baseid='pandaflow/tests/test_cli/test_strategies.py'>
              request: <SubRequest 'runner' for <Function test_strategies_success>>
          finish pytest_fixture_setup --> <click.testing.CliRunner object at 0x75015e3d1950> [hook]
        finish pytest_runtest_setup --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_strategies_success>
            call: <CallInfo when='setup' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_cli/test_strategies.py::test_strategies_success' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_cli/test_strategies.py::test_strategies_success' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_cli/test_strategies.py::test_strategies_success' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_strategies_success>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_strategies_success>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_strategies_success>
            call: <CallInfo when='call' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_cli/test_strategies.py::test_strategies_success' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_cli/test_strategies.py::test_strategies_success' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_cli/test_strategies.py::test_strategies_success' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_strategies_success>
            nextitem: <Function test_strategies_none>
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='runner' scope='function' baseid='pandaflow/tests/test_cli/test_strategies.py'>
              request: <SubRequest 'runner' for <Function test_strategies_success>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_strategies_success>
            call: <CallInfo when='teardown' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_cli/test_strategies.py::test_strategies_success' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_cli/test_strategies.py::test_strategies_success' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_cli/test_strategies.py::test_strategies_success' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: pandaflow/tests/test_cli/test_strategies.py::test_strategies_success
            location: ('pandaflow/tests/test_cli/test_strategies.py', 12, 'test_strategies_success')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_strategies_none>
          nextitem: <Function test_archive_by_month_creates_correct_files>
        pytest_runtest_logstart [hook]
            nodeid: pandaflow/tests/test_cli/test_strategies.py::test_strategies_none
            location: ('pandaflow/tests/test_cli/test_strategies.py', 22, 'test_strategies_none')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_strategies_none>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='runner' scope='function' baseid='pandaflow/tests/test_cli/test_strategies.py'>
              request: <SubRequest 'runner' for <Function test_strategies_none>>
          finish pytest_fixture_setup --> <click.testing.CliRunner object at 0x750177e14c80> [hook]
        finish pytest_runtest_setup --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_strategies_none>
            call: <CallInfo when='setup' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_cli/test_strategies.py::test_strategies_none' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_cli/test_strategies.py::test_strategies_none' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_cli/test_strategies.py::test_strategies_none' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_strategies_none>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_strategies_none>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_strategies_none>
            call: <CallInfo when='call' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_cli/test_strategies.py::test_strategies_none' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_cli/test_strategies.py::test_strategies_none' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_cli/test_strategies.py::test_strategies_none' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_strategies_none>
            nextitem: <Function test_archive_by_month_creates_correct_files>
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='runner' scope='function' baseid='pandaflow/tests/test_cli/test_strategies.py'>
              request: <SubRequest 'runner' for <Function test_strategies_none>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_strategies_none>
            call: <CallInfo when='teardown' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_cli/test_strategies.py::test_strategies_none' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_cli/test_strategies.py::test_strategies_none' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_cli/test_strategies.py::test_strategies_none' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: pandaflow/tests/test_cli/test_strategies.py::test_strategies_none
            location: ('pandaflow/tests/test_cli/test_strategies.py', 22, 'test_strategies_none')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_archive_by_month_creates_correct_files>
          nextitem: <Function test_archive_by_year_creates_correct_structure>
        pytest_runtest_logstart [hook]
            nodeid: pandaflow/tests/test_core/test_archiver.py::test_archive_by_month_creates_correct_files
            location: ('pandaflow/tests/test_core/test_archiver.py', 19, 'test_archive_by_month_creates_correct_files')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_archive_by_month_creates_correct_files>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='tmp_path' scope='function' baseid=''>
              request: <SubRequest 'tmp_path' for <Function test_archive_by_month_creates_correct_files>>
          mktemp /tmp/pytest-of-jack/pytest-84/test_archive_by_month_creates_0 [config:tmpdir]
          finish pytest_fixture_setup --> /tmp/pytest-of-jack/pytest-84/test_archive_by_month_creates_0 [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='sample_csv' scope='function' baseid='pandaflow/tests/test_core/test_archiver.py'>
              request: <SubRequest 'sample_csv' for <Function test_archive_by_month_creates_correct_files>>
          finish pytest_fixture_setup --> /tmp/pytest-of-jack/pytest-84/test_archive_by_month_creates_0/data.csv [hook]
        finish pytest_runtest_setup --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_archive_by_month_creates_correct_files>
            call: <CallInfo when='setup' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_core/test_archiver.py::test_archive_by_month_creates_correct_files' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_core/test_archiver.py::test_archive_by_month_creates_correct_files' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_core/test_archiver.py::test_archive_by_month_creates_correct_files' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_archive_by_month_creates_correct_files>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_archive_by_month_creates_correct_files>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_archive_by_month_creates_correct_files>
            call: <CallInfo when='call' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_core/test_archiver.py::test_archive_by_month_creates_correct_files' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_core/test_archiver.py::test_archive_by_month_creates_correct_files' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_core/test_archiver.py::test_archive_by_month_creates_correct_files' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_archive_by_month_creates_correct_files>
            nextitem: <Function test_archive_by_year_creates_correct_structure>
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='sample_csv' scope='function' baseid='pandaflow/tests/test_core/test_archiver.py'>
              request: <SubRequest 'sample_csv' for <Function test_archive_by_month_creates_correct_files>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='sample_csv' scope='function' baseid='pandaflow/tests/test_core/test_archiver.py'>
              request: <SubRequest 'sample_csv' for <Function test_archive_by_month_creates_correct_files>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='tmp_path' scope='function' baseid=''>
              request: <SubRequest 'tmp_path' for <Function test_archive_by_month_creates_correct_files>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_archive_by_month_creates_correct_files>
            call: <CallInfo when='teardown' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_core/test_archiver.py::test_archive_by_month_creates_correct_files' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_core/test_archiver.py::test_archive_by_month_creates_correct_files' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_core/test_archiver.py::test_archive_by_month_creates_correct_files' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: pandaflow/tests/test_core/test_archiver.py::test_archive_by_month_creates_correct_files
            location: ('pandaflow/tests/test_core/test_archiver.py', 19, 'test_archive_by_month_creates_correct_files')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_archive_by_year_creates_correct_structure>
          nextitem: <Function test_invalid_date_column_raises_error>
        pytest_runtest_logstart [hook]
            nodeid: pandaflow/tests/test_core/test_archiver.py::test_archive_by_year_creates_correct_structure
            location: ('pandaflow/tests/test_core/test_archiver.py', 40, 'test_archive_by_year_creates_correct_structure')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_archive_by_year_creates_correct_structure>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='tmp_path' scope='function' baseid=''>
              request: <SubRequest 'tmp_path' for <Function test_archive_by_year_creates_correct_structure>>
          mktemp /tmp/pytest-of-jack/pytest-84/test_archive_by_year_creates_c0 [config:tmpdir]
          finish pytest_fixture_setup --> /tmp/pytest-of-jack/pytest-84/test_archive_by_year_creates_c0 [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='sample_csv' scope='function' baseid='pandaflow/tests/test_core/test_archiver.py'>
              request: <SubRequest 'sample_csv' for <Function test_archive_by_year_creates_correct_structure>>
          finish pytest_fixture_setup --> /tmp/pytest-of-jack/pytest-84/test_archive_by_year_creates_c0/data.csv [hook]
        finish pytest_runtest_setup --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_archive_by_year_creates_correct_structure>
            call: <CallInfo when='setup' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_core/test_archiver.py::test_archive_by_year_creates_correct_structure' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_core/test_archiver.py::test_archive_by_year_creates_correct_structure' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_core/test_archiver.py::test_archive_by_year_creates_correct_structure' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_archive_by_year_creates_correct_structure>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_archive_by_year_creates_correct_structure>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_archive_by_year_creates_correct_structure>
            call: <CallInfo when='call' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_core/test_archiver.py::test_archive_by_year_creates_correct_structure' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_core/test_archiver.py::test_archive_by_year_creates_correct_structure' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_core/test_archiver.py::test_archive_by_year_creates_correct_structure' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_archive_by_year_creates_correct_structure>
            nextitem: <Function test_invalid_date_column_raises_error>
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='sample_csv' scope='function' baseid='pandaflow/tests/test_core/test_archiver.py'>
              request: <SubRequest 'sample_csv' for <Function test_archive_by_year_creates_correct_structure>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='sample_csv' scope='function' baseid='pandaflow/tests/test_core/test_archiver.py'>
              request: <SubRequest 'sample_csv' for <Function test_archive_by_year_creates_correct_structure>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='tmp_path' scope='function' baseid=''>
              request: <SubRequest 'tmp_path' for <Function test_archive_by_year_creates_correct_structure>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_archive_by_year_creates_correct_structure>
            call: <CallInfo when='teardown' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_core/test_archiver.py::test_archive_by_year_creates_correct_structure' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_core/test_archiver.py::test_archive_by_year_creates_correct_structure' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_core/test_archiver.py::test_archive_by_year_creates_correct_structure' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: pandaflow/tests/test_core/test_archiver.py::test_archive_by_year_creates_correct_structure
            location: ('pandaflow/tests/test_core/test_archiver.py', 40, 'test_archive_by_year_creates_correct_structure')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_invalid_date_column_raises_error>
          nextitem: <Function test_validate_config_accepts_valid_schema>
        pytest_runtest_logstart [hook]
            nodeid: pandaflow/tests/test_core/test_archiver.py::test_invalid_date_column_raises_error
            location: ('pandaflow/tests/test_core/test_archiver.py', 57, 'test_invalid_date_column_raises_error')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_invalid_date_column_raises_error>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='tmp_path' scope='function' baseid=''>
              request: <SubRequest 'tmp_path' for <Function test_invalid_date_column_raises_error>>
          mktemp /tmp/pytest-of-jack/pytest-84/test_invalid_date_column_raise0 [config:tmpdir]
          finish pytest_fixture_setup --> /tmp/pytest-of-jack/pytest-84/test_invalid_date_column_raise0 [hook]
        finish pytest_runtest_setup --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_invalid_date_column_raises_error>
            call: <CallInfo when='setup' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_core/test_archiver.py::test_invalid_date_column_raises_error' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_core/test_archiver.py::test_invalid_date_column_raises_error' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_core/test_archiver.py::test_invalid_date_column_raises_error' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_invalid_date_column_raises_error>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_invalid_date_column_raises_error>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_invalid_date_column_raises_error>
            call: <CallInfo when='call' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_core/test_archiver.py::test_invalid_date_column_raises_error' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_core/test_archiver.py::test_invalid_date_column_raises_error' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_core/test_archiver.py::test_invalid_date_column_raises_error' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_invalid_date_column_raises_error>
            nextitem: <Function test_validate_config_accepts_valid_schema>
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='tmp_path' scope='function' baseid=''>
              request: <SubRequest 'tmp_path' for <Function test_invalid_date_column_raises_error>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_invalid_date_column_raises_error>
            call: <CallInfo when='teardown' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_core/test_archiver.py::test_invalid_date_column_raises_error' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_core/test_archiver.py::test_invalid_date_column_raises_error' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_core/test_archiver.py::test_invalid_date_column_raises_error' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: pandaflow/tests/test_core/test_archiver.py::test_invalid_date_column_raises_error
            location: ('pandaflow/tests/test_core/test_archiver.py', 57, 'test_invalid_date_column_raises_error')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_validate_config_accepts_valid_schema>
          nextitem: <Function test_load_json_config>
        pytest_runtest_logstart [hook]
            nodeid: pandaflow/tests/test_core/test_config.py::test_validate_config_accepts_valid_schema
            location: ('pandaflow/tests/test_core/test_config.py', 20, 'test_validate_config_accepts_valid_schema')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_validate_config_accepts_valid_schema>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='valid_config_dict' scope='function' baseid='pandaflow/tests/test_core/test_config.py'>
              request: <SubRequest 'valid_config_dict' for <Function test_validate_config_accepts_valid_schema>>
          finish pytest_fixture_setup --> [hook]
              meta: {'author': 'pandaflow team'}
              match: {'filename': '*.csv'}
              rules: [{'strategy': 'drop', 'field': 'unused_column'}, {'strategy': 'hash', 'field': '__md5__', 'source': ['A', 'B']}]
        finish pytest_runtest_setup --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_validate_config_accepts_valid_schema>
            call: <CallInfo when='setup' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_core/test_config.py::test_validate_config_accepts_valid_schema' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_core/test_config.py::test_validate_config_accepts_valid_schema' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_core/test_config.py::test_validate_config_accepts_valid_schema' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_validate_config_accepts_valid_schema>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_validate_config_accepts_valid_schema>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_validate_config_accepts_valid_schema>
            call: <CallInfo when='call' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_core/test_config.py::test_validate_config_accepts_valid_schema' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_core/test_config.py::test_validate_config_accepts_valid_schema' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_core/test_config.py::test_validate_config_accepts_valid_schema' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_validate_config_accepts_valid_schema>
            nextitem: <Function test_load_json_config>
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='valid_config_dict' scope='function' baseid='pandaflow/tests/test_core/test_config.py'>
              request: <SubRequest 'valid_config_dict' for <Function test_validate_config_accepts_valid_schema>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_validate_config_accepts_valid_schema>
            call: <CallInfo when='teardown' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_core/test_config.py::test_validate_config_accepts_valid_schema' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_core/test_config.py::test_validate_config_accepts_valid_schema' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_core/test_config.py::test_validate_config_accepts_valid_schema' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: pandaflow/tests/test_core/test_config.py::test_validate_config_accepts_valid_schema
            location: ('pandaflow/tests/test_core/test_config.py', 20, 'test_validate_config_accepts_valid_schema')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_load_json_config>
          nextitem: <Function test_load_toml_config>
        pytest_runtest_logstart [hook]
            nodeid: pandaflow/tests/test_core/test_config.py::test_load_json_config
            location: ('pandaflow/tests/test_core/test_config.py', 27, 'test_load_json_config')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_load_json_config>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='valid_config_dict' scope='function' baseid='pandaflow/tests/test_core/test_config.py'>
              request: <SubRequest 'valid_config_dict' for <Function test_load_json_config>>
          finish pytest_fixture_setup --> [hook]
              meta: {'author': 'pandaflow team'}
              match: {'filename': '*.csv'}
              rules: [{'strategy': 'drop', 'field': 'unused_column'}, {'strategy': 'hash', 'field': '__md5__', 'source': ['A', 'B']}]
        finish pytest_runtest_setup --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_load_json_config>
            call: <CallInfo when='setup' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_core/test_config.py::test_load_json_config' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_core/test_config.py::test_load_json_config' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_core/test_config.py::test_load_json_config' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_load_json_config>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_load_json_config>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_load_json_config>
            call: <CallInfo when='call' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_core/test_config.py::test_load_json_config' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_core/test_config.py::test_load_json_config' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_core/test_config.py::test_load_json_config' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_load_json_config>
            nextitem: <Function test_load_toml_config>
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='valid_config_dict' scope='function' baseid='pandaflow/tests/test_core/test_config.py'>
              request: <SubRequest 'valid_config_dict' for <Function test_load_json_config>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_load_json_config>
            call: <CallInfo when='teardown' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_core/test_config.py::test_load_json_config' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_core/test_config.py::test_load_json_config' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_core/test_config.py::test_load_json_config' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: pandaflow/tests/test_core/test_config.py::test_load_json_config
            location: ('pandaflow/tests/test_core/test_config.py', 27, 'test_load_json_config')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_load_toml_config>
          nextitem: <Function test_load_config_unsupported_extension>
        pytest_runtest_logstart [hook]
            nodeid: pandaflow/tests/test_core/test_config.py::test_load_toml_config
            location: ('pandaflow/tests/test_core/test_config.py', 38, 'test_load_toml_config')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_load_toml_config>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='valid_config_dict' scope='function' baseid='pandaflow/tests/test_core/test_config.py'>
              request: <SubRequest 'valid_config_dict' for <Function test_load_toml_config>>
          finish pytest_fixture_setup --> [hook]
              meta: {'author': 'pandaflow team'}
              match: {'filename': '*.csv'}
              rules: [{'strategy': 'drop', 'field': 'unused_column'}, {'strategy': 'hash', 'field': '__md5__', 'source': ['A', 'B']}]
        finish pytest_runtest_setup --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_load_toml_config>
            call: <CallInfo when='setup' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_core/test_config.py::test_load_toml_config' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_core/test_config.py::test_load_toml_config' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_core/test_config.py::test_load_toml_config' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_load_toml_config>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_load_toml_config>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_load_toml_config>
            call: <CallInfo when='call' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_core/test_config.py::test_load_toml_config' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_core/test_config.py::test_load_toml_config' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_core/test_config.py::test_load_toml_config' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_load_toml_config>
            nextitem: <Function test_load_config_unsupported_extension>
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='valid_config_dict' scope='function' baseid='pandaflow/tests/test_core/test_config.py'>
              request: <SubRequest 'valid_config_dict' for <Function test_load_toml_config>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_load_toml_config>
            call: <CallInfo when='teardown' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_core/test_config.py::test_load_toml_config' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_core/test_config.py::test_load_toml_config' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_core/test_config.py::test_load_toml_config' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: pandaflow/tests/test_core/test_config.py::test_load_toml_config
            location: ('pandaflow/tests/test_core/test_config.py', 38, 'test_load_toml_config')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_load_config_unsupported_extension>
          nextitem: <Function test_factory_initialization>
        pytest_runtest_logstart [hook]
            nodeid: pandaflow/tests/test_core/test_config.py::test_load_config_unsupported_extension
            location: ('pandaflow/tests/test_core/test_config.py', 49, 'test_load_config_unsupported_extension')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_load_config_unsupported_extension>
        finish pytest_runtest_setup --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_load_config_unsupported_extension>
            call: <CallInfo when='setup' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_core/test_config.py::test_load_config_unsupported_extension' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_core/test_config.py::test_load_config_unsupported_extension' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_core/test_config.py::test_load_config_unsupported_extension' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_load_config_unsupported_extension>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_load_config_unsupported_extension>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_load_config_unsupported_extension>
            call: <CallInfo when='call' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_core/test_config.py::test_load_config_unsupported_extension' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_core/test_config.py::test_load_config_unsupported_extension' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_core/test_config.py::test_load_config_unsupported_extension' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_load_config_unsupported_extension>
            nextitem: <Function test_factory_initialization>
        finish pytest_runtest_teardown --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_load_config_unsupported_extension>
            call: <CallInfo when='teardown' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_core/test_config.py::test_load_config_unsupported_extension' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_core/test_config.py::test_load_config_unsupported_extension' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_core/test_config.py::test_load_config_unsupported_extension' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: pandaflow/tests/test_core/test_config.py::test_load_config_unsupported_extension
            location: ('pandaflow/tests/test_core/test_config.py', 49, 'test_load_config_unsupported_extension')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_factory_initialization>
          nextitem: <Function test_get_strategy_by_name_and_version>
        pytest_runtest_logstart [hook]
            nodeid: pandaflow/tests/test_core/test_factory.py::test_factory_initialization
            location: ('pandaflow/tests/test_core/test_factory.py', 24, 'test_factory_initialization')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_factory_initialization>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='dummy_registry' scope='function' baseid='pandaflow/tests/test_core/test_factory.py'>
              request: <SubRequest 'dummy_registry' for <Function test_factory_initialization>>
          finish pytest_fixture_setup --> [hook]
              dummy: {'1.0.0': <test_factory.DummyStrategy object at 0x75015e209400>, '1.2.3': <test_factory.DummyStrategy object at 0x75015e224910>}
              other: {'0.1.0': <test_factory.DummyStrategy object at 0x75015e224e10>}
        finish pytest_runtest_setup --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_factory_initialization>
            call: <CallInfo when='setup' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_core/test_factory.py::test_factory_initialization' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_core/test_factory.py::test_factory_initialization' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_core/test_factory.py::test_factory_initialization' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_factory_initialization>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_factory_initialization>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_factory_initialization>
            call: <CallInfo when='call' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_core/test_factory.py::test_factory_initialization' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_core/test_factory.py::test_factory_initialization' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_core/test_factory.py::test_factory_initialization' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_factory_initialization>
            nextitem: <Function test_get_strategy_by_name_and_version>
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='dummy_registry' scope='function' baseid='pandaflow/tests/test_core/test_factory.py'>
              request: <SubRequest 'dummy_registry' for <Function test_factory_initialization>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_factory_initialization>
            call: <CallInfo when='teardown' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_core/test_factory.py::test_factory_initialization' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_core/test_factory.py::test_factory_initialization' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_core/test_factory.py::test_factory_initialization' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: pandaflow/tests/test_core/test_factory.py::test_factory_initialization
            location: ('pandaflow/tests/test_core/test_factory.py', 24, 'test_factory_initialization')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_get_strategy_by_name_and_version>
          nextitem: <Function test_get_strategy_by_name_highest_version>
        pytest_runtest_logstart [hook]
            nodeid: pandaflow/tests/test_core/test_factory.py::test_get_strategy_by_name_and_version
            location: ('pandaflow/tests/test_core/test_factory.py', 32, 'test_get_strategy_by_name_and_version')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_get_strategy_by_name_and_version>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='dummy_registry' scope='function' baseid='pandaflow/tests/test_core/test_factory.py'>
              request: <SubRequest 'dummy_registry' for <Function test_get_strategy_by_name_and_version>>
          finish pytest_fixture_setup --> [hook]
              dummy: {'1.0.0': <test_factory.DummyStrategy object at 0x75015e3c22c0>, '1.2.3': <test_factory.DummyStrategy object at 0x75015e3c3820>}
              other: {'0.1.0': <test_factory.DummyStrategy object at 0x75015e3aa330>}
        finish pytest_runtest_setup --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_get_strategy_by_name_and_version>
            call: <CallInfo when='setup' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_core/test_factory.py::test_get_strategy_by_name_and_version' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_core/test_factory.py::test_get_strategy_by_name_and_version' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_core/test_factory.py::test_get_strategy_by_name_and_version' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_get_strategy_by_name_and_version>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_get_strategy_by_name_and_version>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_get_strategy_by_name_and_version>
            call: <CallInfo when='call' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_core/test_factory.py::test_get_strategy_by_name_and_version' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_core/test_factory.py::test_get_strategy_by_name_and_version' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_core/test_factory.py::test_get_strategy_by_name_and_version' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_get_strategy_by_name_and_version>
            nextitem: <Function test_get_strategy_by_name_highest_version>
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='dummy_registry' scope='function' baseid='pandaflow/tests/test_core/test_factory.py'>
              request: <SubRequest 'dummy_registry' for <Function test_get_strategy_by_name_and_version>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_get_strategy_by_name_and_version>
            call: <CallInfo when='teardown' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_core/test_factory.py::test_get_strategy_by_name_and_version' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_core/test_factory.py::test_get_strategy_by_name_and_version' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_core/test_factory.py::test_get_strategy_by_name_and_version' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: pandaflow/tests/test_core/test_factory.py::test_get_strategy_by_name_and_version
            location: ('pandaflow/tests/test_core/test_factory.py', 32, 'test_get_strategy_by_name_and_version')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_get_strategy_by_name_highest_version>
          nextitem: <Function test_get_strategy_missing_name_raises>
        pytest_runtest_logstart [hook]
            nodeid: pandaflow/tests/test_core/test_factory.py::test_get_strategy_by_name_highest_version
            location: ('pandaflow/tests/test_core/test_factory.py', 40, 'test_get_strategy_by_name_highest_version')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_get_strategy_by_name_highest_version>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='dummy_registry' scope='function' baseid='pandaflow/tests/test_core/test_factory.py'>
              request: <SubRequest 'dummy_registry' for <Function test_get_strategy_by_name_highest_version>>
          finish pytest_fixture_setup --> [hook]
              dummy: {'1.0.0': <test_factory.DummyStrategy object at 0x75015e3cead0>, '1.2.3': <test_factory.DummyStrategy object at 0x75015e3ce580>}
              other: {'0.1.0': <test_factory.DummyStrategy object at 0x75015e3d0b50>}
        finish pytest_runtest_setup --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_get_strategy_by_name_highest_version>
            call: <CallInfo when='setup' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_core/test_factory.py::test_get_strategy_by_name_highest_version' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_core/test_factory.py::test_get_strategy_by_name_highest_version' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_core/test_factory.py::test_get_strategy_by_name_highest_version' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_get_strategy_by_name_highest_version>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_get_strategy_by_name_highest_version>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_get_strategy_by_name_highest_version>
            call: <CallInfo when='call' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_core/test_factory.py::test_get_strategy_by_name_highest_version' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_core/test_factory.py::test_get_strategy_by_name_highest_version' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_core/test_factory.py::test_get_strategy_by_name_highest_version' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_get_strategy_by_name_highest_version>
            nextitem: <Function test_get_strategy_missing_name_raises>
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='dummy_registry' scope='function' baseid='pandaflow/tests/test_core/test_factory.py'>
              request: <SubRequest 'dummy_registry' for <Function test_get_strategy_by_name_highest_version>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_get_strategy_by_name_highest_version>
            call: <CallInfo when='teardown' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_core/test_factory.py::test_get_strategy_by_name_highest_version' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_core/test_factory.py::test_get_strategy_by_name_highest_version' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_core/test_factory.py::test_get_strategy_by_name_highest_version' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: pandaflow/tests/test_core/test_factory.py::test_get_strategy_by_name_highest_version
            location: ('pandaflow/tests/test_core/test_factory.py', 40, 'test_get_strategy_by_name_highest_version')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_get_strategy_missing_name_raises>
          nextitem: <Function test_get_strategy_missing_version_raises>
        pytest_runtest_logstart [hook]
            nodeid: pandaflow/tests/test_core/test_factory.py::test_get_strategy_missing_name_raises
            location: ('pandaflow/tests/test_core/test_factory.py', 48, 'test_get_strategy_missing_name_raises')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_get_strategy_missing_name_raises>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='dummy_registry' scope='function' baseid='pandaflow/tests/test_core/test_factory.py'>
              request: <SubRequest 'dummy_registry' for <Function test_get_strategy_missing_name_raises>>
          finish pytest_fixture_setup --> [hook]
              dummy: {'1.0.0': <test_factory.DummyStrategy object at 0x75015e3d3050>, '1.2.3': <test_factory.DummyStrategy object at 0x75015e3f23f0>}
              other: {'0.1.0': <test_factory.DummyStrategy object at 0x75015e3f3020>}
        finish pytest_runtest_setup --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_get_strategy_missing_name_raises>
            call: <CallInfo when='setup' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_core/test_factory.py::test_get_strategy_missing_name_raises' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_core/test_factory.py::test_get_strategy_missing_name_raises' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_core/test_factory.py::test_get_strategy_missing_name_raises' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_get_strategy_missing_name_raises>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_get_strategy_missing_name_raises>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_get_strategy_missing_name_raises>
            call: <CallInfo when='call' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_core/test_factory.py::test_get_strategy_missing_name_raises' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_core/test_factory.py::test_get_strategy_missing_name_raises' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_core/test_factory.py::test_get_strategy_missing_name_raises' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_get_strategy_missing_name_raises>
            nextitem: <Function test_get_strategy_missing_version_raises>
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='dummy_registry' scope='function' baseid='pandaflow/tests/test_core/test_factory.py'>
              request: <SubRequest 'dummy_registry' for <Function test_get_strategy_missing_name_raises>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_get_strategy_missing_name_raises>
            call: <CallInfo when='teardown' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_core/test_factory.py::test_get_strategy_missing_name_raises' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_core/test_factory.py::test_get_strategy_missing_name_raises' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_core/test_factory.py::test_get_strategy_missing_name_raises' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: pandaflow/tests/test_core/test_factory.py::test_get_strategy_missing_name_raises
            location: ('pandaflow/tests/test_core/test_factory.py', 48, 'test_get_strategy_missing_name_raises')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_get_strategy_missing_version_raises>
          nextitem: <Function test_get_registered_strategies_success>
        pytest_runtest_logstart [hook]
            nodeid: pandaflow/tests/test_core/test_factory.py::test_get_strategy_missing_version_raises
            location: ('pandaflow/tests/test_core/test_factory.py', 56, 'test_get_strategy_missing_version_raises')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_get_strategy_missing_version_raises>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='dummy_registry' scope='function' baseid='pandaflow/tests/test_core/test_factory.py'>
              request: <SubRequest 'dummy_registry' for <Function test_get_strategy_missing_version_raises>>
          finish pytest_fixture_setup --> [hook]
              dummy: {'1.0.0': <test_factory.DummyStrategy object at 0x75015e3ff930>, '1.2.3': <test_factory.DummyStrategy object at 0x75015e3fecf0>}
              other: {'0.1.0': <test_factory.DummyStrategy object at 0x75015e3e6680>}
        finish pytest_runtest_setup --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_get_strategy_missing_version_raises>
            call: <CallInfo when='setup' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_core/test_factory.py::test_get_strategy_missing_version_raises' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_core/test_factory.py::test_get_strategy_missing_version_raises' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_core/test_factory.py::test_get_strategy_missing_version_raises' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_get_strategy_missing_version_raises>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_get_strategy_missing_version_raises>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_get_strategy_missing_version_raises>
            call: <CallInfo when='call' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_core/test_factory.py::test_get_strategy_missing_version_raises' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_core/test_factory.py::test_get_strategy_missing_version_raises' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_core/test_factory.py::test_get_strategy_missing_version_raises' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_get_strategy_missing_version_raises>
            nextitem: <Function test_get_registered_strategies_success>
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='dummy_registry' scope='function' baseid='pandaflow/tests/test_core/test_factory.py'>
              request: <SubRequest 'dummy_registry' for <Function test_get_strategy_missing_version_raises>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_get_strategy_missing_version_raises>
            call: <CallInfo when='teardown' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_core/test_factory.py::test_get_strategy_missing_version_raises' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_core/test_factory.py::test_get_strategy_missing_version_raises' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_core/test_factory.py::test_get_strategy_missing_version_raises' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: pandaflow/tests/test_core/test_factory.py::test_get_strategy_missing_version_raises
            location: ('pandaflow/tests/test_core/test_factory.py', 56, 'test_get_strategy_missing_version_raises')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_get_registered_strategies_success>
          nextitem: <Function test_load_strategies_success>
        pytest_runtest_logstart [hook]
            nodeid: pandaflow/tests/test_core/test_registry.py::test_get_registered_strategies_success
            location: ('pandaflow/tests/test_core/test_registry.py', 27, 'test_get_registered_strategies_success')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_get_registered_strategies_success>
        finish pytest_runtest_setup --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_get_registered_strategies_success>
            call: <CallInfo when='setup' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_core/test_registry.py::test_get_registered_strategies_success' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_core/test_registry.py::test_get_registered_strategies_success' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_core/test_registry.py::test_get_registered_strategies_success' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_get_registered_strategies_success>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_get_registered_strategies_success>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_get_registered_strategies_success>
            call: <CallInfo when='call' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_core/test_registry.py::test_get_registered_strategies_success' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_core/test_registry.py::test_get_registered_strategies_success' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_core/test_registry.py::test_get_registered_strategies_success' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_get_registered_strategies_success>
            nextitem: <Function test_load_strategies_success>
        finish pytest_runtest_teardown --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_get_registered_strategies_success>
            call: <CallInfo when='teardown' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_core/test_registry.py::test_get_registered_strategies_success' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_core/test_registry.py::test_get_registered_strategies_success' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_core/test_registry.py::test_get_registered_strategies_success' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: pandaflow/tests/test_core/test_registry.py::test_get_registered_strategies_success
            location: ('pandaflow/tests/test_core/test_registry.py', 27, 'test_get_registered_strategies_success')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_load_strategies_success>
          nextitem: <Function test_load_strategies_invalid_type>
        pytest_runtest_logstart [hook]
            nodeid: pandaflow/tests/test_core/test_registry.py::test_load_strategies_success
            location: ('pandaflow/tests/test_core/test_registry.py', 37, 'test_load_strategies_success')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_load_strategies_success>
        finish pytest_runtest_setup --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_load_strategies_success>
            call: <CallInfo when='setup' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_core/test_registry.py::test_load_strategies_success' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_core/test_registry.py::test_load_strategies_success' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_core/test_registry.py::test_load_strategies_success' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_load_strategies_success>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_load_strategies_success>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_load_strategies_success>
            call: <CallInfo when='call' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_core/test_registry.py::test_load_strategies_success' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_core/test_registry.py::test_load_strategies_success' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_core/test_registry.py::test_load_strategies_success' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_load_strategies_success>
            nextitem: <Function test_load_strategies_invalid_type>
        finish pytest_runtest_teardown --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_load_strategies_success>
            call: <CallInfo when='teardown' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_core/test_registry.py::test_load_strategies_success' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_core/test_registry.py::test_load_strategies_success' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_core/test_registry.py::test_load_strategies_success' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: pandaflow/tests/test_core/test_registry.py::test_load_strategies_success
            location: ('pandaflow/tests/test_core/test_registry.py', 37, 'test_load_strategies_success')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_load_strategies_invalid_type>
          nextitem: <Function test_load_strategies_attribute_error_fallback>
        pytest_runtest_logstart [hook]
            nodeid: pandaflow/tests/test_core/test_registry.py::test_load_strategies_invalid_type
            location: ('pandaflow/tests/test_core/test_registry.py', 46, 'test_load_strategies_invalid_type')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_load_strategies_invalid_type>
        finish pytest_runtest_setup --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_load_strategies_invalid_type>
            call: <CallInfo when='setup' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_core/test_registry.py::test_load_strategies_invalid_type' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_core/test_registry.py::test_load_strategies_invalid_type' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_core/test_registry.py::test_load_strategies_invalid_type' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_load_strategies_invalid_type>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_load_strategies_invalid_type>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_load_strategies_invalid_type>
            call: <CallInfo when='call' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_core/test_registry.py::test_load_strategies_invalid_type' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_core/test_registry.py::test_load_strategies_invalid_type' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_core/test_registry.py::test_load_strategies_invalid_type' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_load_strategies_invalid_type>
            nextitem: <Function test_load_strategies_attribute_error_fallback>
        finish pytest_runtest_teardown --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_load_strategies_invalid_type>
            call: <CallInfo when='teardown' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_core/test_registry.py::test_load_strategies_invalid_type' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_core/test_registry.py::test_load_strategies_invalid_type' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_core/test_registry.py::test_load_strategies_invalid_type' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: pandaflow/tests/test_core/test_registry.py::test_load_strategies_invalid_type
            location: ('pandaflow/tests/test_core/test_registry.py', 46, 'test_load_strategies_invalid_type')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_load_strategies_attribute_error_fallback>
          nextitem: <Function test_run_applies_strategy>
        pytest_runtest_logstart [hook]
            nodeid: pandaflow/tests/test_core/test_registry.py::test_load_strategies_attribute_error_fallback
            location: ('pandaflow/tests/test_core/test_registry.py', 58, 'test_load_strategies_attribute_error_fallback')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_load_strategies_attribute_error_fallback>
        finish pytest_runtest_setup --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_load_strategies_attribute_error_fallback>
            call: <CallInfo when='setup' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_core/test_registry.py::test_load_strategies_attribute_error_fallback' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_core/test_registry.py::test_load_strategies_attribute_error_fallback' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_core/test_registry.py::test_load_strategies_attribute_error_fallback' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_load_strategies_attribute_error_fallback>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_load_strategies_attribute_error_fallback>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_load_strategies_attribute_error_fallback>
            call: <CallInfo when='call' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_core/test_registry.py::test_load_strategies_attribute_error_fallback' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_core/test_registry.py::test_load_strategies_attribute_error_fallback' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_core/test_registry.py::test_load_strategies_attribute_error_fallback' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_load_strategies_attribute_error_fallback>
            nextitem: <Function test_run_applies_strategy>
        finish pytest_runtest_teardown --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_load_strategies_attribute_error_fallback>
            call: <CallInfo when='teardown' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_core/test_registry.py::test_load_strategies_attribute_error_fallback' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_core/test_registry.py::test_load_strategies_attribute_error_fallback' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_core/test_registry.py::test_load_strategies_attribute_error_fallback' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: pandaflow/tests/test_core/test_registry.py::test_load_strategies_attribute_error_fallback
            location: ('pandaflow/tests/test_core/test_registry.py', 58, 'test_load_strategies_attribute_error_fallback')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_run_applies_strategy>
          nextitem: <Function test_check_valid_rule>
        pytest_runtest_logstart [hook]
            nodeid: pandaflow/tests/test_strategies/test_base.py::test_run_applies_strategy
            location: ('pandaflow/tests/test_strategies/test_base.py', 18, 'test_run_applies_strategy')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_run_applies_strategy>
        finish pytest_runtest_setup --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_run_applies_strategy>
            call: <CallInfo when='setup' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_strategies/test_base.py::test_run_applies_strategy' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_strategies/test_base.py::test_run_applies_strategy' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_strategies/test_base.py::test_run_applies_strategy' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_run_applies_strategy>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_run_applies_strategy>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_run_applies_strategy>
            call: <CallInfo when='call' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_strategies/test_base.py::test_run_applies_strategy' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_strategies/test_base.py::test_run_applies_strategy' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_strategies/test_base.py::test_run_applies_strategy' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_run_applies_strategy>
            nextitem: <Function test_check_valid_rule>
        finish pytest_runtest_teardown --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_run_applies_strategy>
            call: <CallInfo when='teardown' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_strategies/test_base.py::test_run_applies_strategy' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_strategies/test_base.py::test_run_applies_strategy' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_strategies/test_base.py::test_run_applies_strategy' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: pandaflow/tests/test_strategies/test_base.py::test_run_applies_strategy
            location: ('pandaflow/tests/test_strategies/test_base.py', 18, 'test_run_applies_strategy')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_check_valid_rule>
          nextitem: <Function test_check_invalid_rule_raises>
        pytest_runtest_logstart [hook]
            nodeid: pandaflow/tests/test_strategies/test_base.py::test_check_valid_rule
            location: ('pandaflow/tests/test_strategies/test_base.py', 27, 'test_check_valid_rule')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_check_valid_rule>
        finish pytest_runtest_setup --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_check_valid_rule>
            call: <CallInfo when='setup' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_strategies/test_base.py::test_check_valid_rule' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_strategies/test_base.py::test_check_valid_rule' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_strategies/test_base.py::test_check_valid_rule' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_check_valid_rule>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_check_valid_rule>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_check_valid_rule>
            call: <CallInfo when='call' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_strategies/test_base.py::test_check_valid_rule' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_strategies/test_base.py::test_check_valid_rule' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_strategies/test_base.py::test_check_valid_rule' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_check_valid_rule>
            nextitem: <Function test_check_invalid_rule_raises>
        finish pytest_runtest_teardown --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_check_valid_rule>
            call: <CallInfo when='teardown' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_strategies/test_base.py::test_check_valid_rule' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_strategies/test_base.py::test_check_valid_rule' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_strategies/test_base.py::test_check_valid_rule' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: pandaflow/tests/test_strategies/test_base.py::test_check_valid_rule
            location: ('pandaflow/tests/test_strategies/test_base.py', 27, 'test_check_valid_rule')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_check_invalid_rule_raises>
          nextitem: <Function test_validate_rule_not_implemented>
        pytest_runtest_logstart [hook]
            nodeid: pandaflow/tests/test_strategies/test_base.py::test_check_invalid_rule_raises
            location: ('pandaflow/tests/test_strategies/test_base.py', 34, 'test_check_invalid_rule_raises')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_check_invalid_rule_raises>
        finish pytest_runtest_setup --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_check_invalid_rule_raises>
            call: <CallInfo when='setup' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_strategies/test_base.py::test_check_invalid_rule_raises' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_strategies/test_base.py::test_check_invalid_rule_raises' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_strategies/test_base.py::test_check_invalid_rule_raises' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_check_invalid_rule_raises>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_check_invalid_rule_raises>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_check_invalid_rule_raises>
            call: <CallInfo when='call' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_strategies/test_base.py::test_check_invalid_rule_raises' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_strategies/test_base.py::test_check_invalid_rule_raises' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_strategies/test_base.py::test_check_invalid_rule_raises' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_check_invalid_rule_raises>
            nextitem: <Function test_validate_rule_not_implemented>
        finish pytest_runtest_teardown --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_check_invalid_rule_raises>
            call: <CallInfo when='teardown' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_strategies/test_base.py::test_check_invalid_rule_raises' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_strategies/test_base.py::test_check_invalid_rule_raises' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_strategies/test_base.py::test_check_invalid_rule_raises' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: pandaflow/tests/test_strategies/test_base.py::test_check_invalid_rule_raises
            location: ('pandaflow/tests/test_strategies/test_base.py', 34, 'test_check_invalid_rule_raises')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_validate_rule_not_implemented>
          nextitem: <Function test_apply_not_implemented>
        pytest_runtest_logstart [hook]
            nodeid: pandaflow/tests/test_strategies/test_base.py::test_validate_rule_not_implemented
            location: ('pandaflow/tests/test_strategies/test_base.py', 42, 'test_validate_rule_not_implemented')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_validate_rule_not_implemented>
        finish pytest_runtest_setup --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_validate_rule_not_implemented>
            call: <CallInfo when='setup' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_strategies/test_base.py::test_validate_rule_not_implemented' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_strategies/test_base.py::test_validate_rule_not_implemented' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_strategies/test_base.py::test_validate_rule_not_implemented' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_validate_rule_not_implemented>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_validate_rule_not_implemented>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_validate_rule_not_implemented>
            call: <CallInfo when='call' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_strategies/test_base.py::test_validate_rule_not_implemented' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_strategies/test_base.py::test_validate_rule_not_implemented' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_strategies/test_base.py::test_validate_rule_not_implemented' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_validate_rule_not_implemented>
            nextitem: <Function test_apply_not_implemented>
        finish pytest_runtest_teardown --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_validate_rule_not_implemented>
            call: <CallInfo when='teardown' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_strategies/test_base.py::test_validate_rule_not_implemented' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_strategies/test_base.py::test_validate_rule_not_implemented' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_strategies/test_base.py::test_validate_rule_not_implemented' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: pandaflow/tests/test_strategies/test_base.py::test_validate_rule_not_implemented
            location: ('pandaflow/tests/test_strategies/test_base.py', 42, 'test_validate_rule_not_implemented')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_apply_not_implemented>
          nextitem: <Function test_validate_rule_parses_correctly>
        pytest_runtest_logstart [hook]
            nodeid: pandaflow/tests/test_strategies/test_base.py::test_apply_not_implemented
            location: ('pandaflow/tests/test_strategies/test_base.py', 51, 'test_apply_not_implemented')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_apply_not_implemented>
        finish pytest_runtest_setup --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_apply_not_implemented>
            call: <CallInfo when='setup' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_strategies/test_base.py::test_apply_not_implemented' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_strategies/test_base.py::test_apply_not_implemented' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_strategies/test_base.py::test_apply_not_implemented' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_apply_not_implemented>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_apply_not_implemented>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_apply_not_implemented>
            call: <CallInfo when='call' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_strategies/test_base.py::test_apply_not_implemented' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_strategies/test_base.py::test_apply_not_implemented' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_strategies/test_base.py::test_apply_not_implemented' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_apply_not_implemented>
            nextitem: <Function test_validate_rule_parses_correctly>
        finish pytest_runtest_teardown --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_apply_not_implemented>
            call: <CallInfo when='teardown' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_strategies/test_base.py::test_apply_not_implemented' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_strategies/test_base.py::test_apply_not_implemented' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_strategies/test_base.py::test_apply_not_implemented' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: pandaflow/tests/test_strategies/test_base.py::test_apply_not_implemented
            location: ('pandaflow/tests/test_strategies/test_base.py', 51, 'test_apply_not_implemented')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_validate_rule_parses_correctly>
          nextitem: <Function test_apply_calculates_and_formats_amount>
        pytest_runtest_logstart [hook]
            nodeid: pandaflow/tests/test_strategies/test_calculate_amount.py::test_validate_rule_parses_correctly
            location: ('pandaflow/tests/test_strategies/test_calculate_amount.py', 15, 'test_validate_rule_parses_correctly')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_validate_rule_parses_correctly>
        finish pytest_runtest_setup --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_validate_rule_parses_correctly>
            call: <CallInfo when='setup' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_strategies/test_calculate_amount.py::test_validate_rule_parses_correctly' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_strategies/test_calculate_amount.py::test_validate_rule_parses_correctly' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_strategies/test_calculate_amount.py::test_validate_rule_parses_correctly' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_validate_rule_parses_correctly>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_validate_rule_parses_correctly>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_validate_rule_parses_correctly>
            call: <CallInfo when='call' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_strategies/test_calculate_amount.py::test_validate_rule_parses_correctly' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_strategies/test_calculate_amount.py::test_validate_rule_parses_correctly' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_strategies/test_calculate_amount.py::test_validate_rule_parses_correctly' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_validate_rule_parses_correctly>
            nextitem: <Function test_apply_calculates_and_formats_amount>
        finish pytest_runtest_teardown --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_validate_rule_parses_correctly>
            call: <CallInfo when='teardown' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_strategies/test_calculate_amount.py::test_validate_rule_parses_correctly' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_strategies/test_calculate_amount.py::test_validate_rule_parses_correctly' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_strategies/test_calculate_amount.py::test_validate_rule_parses_correctly' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: pandaflow/tests/test_strategies/test_calculate_amount.py::test_validate_rule_parses_correctly
            location: ('pandaflow/tests/test_strategies/test_calculate_amount.py', 15, 'test_validate_rule_parses_correctly')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_apply_calculates_and_formats_amount>
          nextitem: <Function test_apply_without_output_rule>
        pytest_runtest_logstart [hook]
            nodeid: pandaflow/tests/test_strategies/test_calculate_amount.py::test_apply_calculates_and_formats_amount
            location: ('pandaflow/tests/test_strategies/test_calculate_amount.py', 29, 'test_apply_calculates_and_formats_amount')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_apply_calculates_and_formats_amount>
        finish pytest_runtest_setup --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_apply_calculates_and_formats_amount>
            call: <CallInfo when='setup' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_strategies/test_calculate_amount.py::test_apply_calculates_and_formats_amount' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_strategies/test_calculate_amount.py::test_apply_calculates_and_formats_amount' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_strategies/test_calculate_amount.py::test_apply_calculates_and_formats_amount' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_apply_calculates_and_formats_amount>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_apply_calculates_and_formats_amount>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_apply_calculates_and_formats_amount>
            call: <CallInfo when='call' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_strategies/test_calculate_amount.py::test_apply_calculates_and_formats_amount' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_strategies/test_calculate_amount.py::test_apply_calculates_and_formats_amount' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_strategies/test_calculate_amount.py::test_apply_calculates_and_formats_amount' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_apply_calculates_and_formats_amount>
            nextitem: <Function test_apply_without_output_rule>
        finish pytest_runtest_teardown --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_apply_calculates_and_formats_amount>
            call: <CallInfo when='teardown' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_strategies/test_calculate_amount.py::test_apply_calculates_and_formats_amount' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_strategies/test_calculate_amount.py::test_apply_calculates_and_formats_amount' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_strategies/test_calculate_amount.py::test_apply_calculates_and_formats_amount' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: pandaflow/tests/test_strategies/test_calculate_amount.py::test_apply_calculates_and_formats_amount
            location: ('pandaflow/tests/test_strategies/test_calculate_amount.py', 29, 'test_apply_calculates_and_formats_amount')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_apply_without_output_rule>
          nextitem: <Function test_apply_with_invalid_formula_raises>
        pytest_runtest_logstart [hook]
            nodeid: pandaflow/tests/test_strategies/test_calculate_amount.py::test_apply_without_output_rule
            location: ('pandaflow/tests/test_strategies/test_calculate_amount.py', 49, 'test_apply_without_output_rule')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_apply_without_output_rule>
        finish pytest_runtest_setup --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_apply_without_output_rule>
            call: <CallInfo when='setup' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_strategies/test_calculate_amount.py::test_apply_without_output_rule' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_strategies/test_calculate_amount.py::test_apply_without_output_rule' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_strategies/test_calculate_amount.py::test_apply_without_output_rule' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_apply_without_output_rule>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_apply_without_output_rule>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_apply_without_output_rule>
            call: <CallInfo when='call' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_strategies/test_calculate_amount.py::test_apply_without_output_rule' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_strategies/test_calculate_amount.py::test_apply_without_output_rule' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_strategies/test_calculate_amount.py::test_apply_without_output_rule' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_apply_without_output_rule>
            nextitem: <Function test_apply_with_invalid_formula_raises>
        finish pytest_runtest_teardown --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_apply_without_output_rule>
            call: <CallInfo when='teardown' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_strategies/test_calculate_amount.py::test_apply_without_output_rule' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_strategies/test_calculate_amount.py::test_apply_without_output_rule' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_strategies/test_calculate_amount.py::test_apply_without_output_rule' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: pandaflow/tests/test_strategies/test_calculate_amount.py::test_apply_without_output_rule
            location: ('pandaflow/tests/test_strategies/test_calculate_amount.py', 49, 'test_apply_without_output_rule')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_apply_with_invalid_formula_raises>
          nextitem: <Function test_validate_rule>
        pytest_runtest_logstart [hook]
            nodeid: pandaflow/tests/test_strategies/test_calculate_amount.py::test_apply_with_invalid_formula_raises
            location: ('pandaflow/tests/test_strategies/test_calculate_amount.py', 64, 'test_apply_with_invalid_formula_raises')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_apply_with_invalid_formula_raises>
        finish pytest_runtest_setup --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_apply_with_invalid_formula_raises>
            call: <CallInfo when='setup' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_strategies/test_calculate_amount.py::test_apply_with_invalid_formula_raises' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_strategies/test_calculate_amount.py::test_apply_with_invalid_formula_raises' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_strategies/test_calculate_amount.py::test_apply_with_invalid_formula_raises' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_apply_with_invalid_formula_raises>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_apply_with_invalid_formula_raises>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_apply_with_invalid_formula_raises>
            call: <CallInfo when='call' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_strategies/test_calculate_amount.py::test_apply_with_invalid_formula_raises' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_strategies/test_calculate_amount.py::test_apply_with_invalid_formula_raises' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_strategies/test_calculate_amount.py::test_apply_with_invalid_formula_raises' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_apply_with_invalid_formula_raises>
            nextitem: <Function test_validate_rule>
        finish pytest_runtest_teardown --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_apply_with_invalid_formula_raises>
            call: <CallInfo when='teardown' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_strategies/test_calculate_amount.py::test_apply_with_invalid_formula_raises' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_strategies/test_calculate_amount.py::test_apply_with_invalid_formula_raises' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_strategies/test_calculate_amount.py::test_apply_with_invalid_formula_raises' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: pandaflow/tests/test_strategies/test_calculate_amount.py::test_apply_with_invalid_formula_raises
            location: ('pandaflow/tests/test_strategies/test_calculate_amount.py', 64, 'test_apply_with_invalid_formula_raises')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_validate_rule>
          nextitem: <Function test_basic_ratio>
        pytest_runtest_logstart [hook]
            nodeid: pandaflow/tests/test_strategies/test_calculate_amount.py::test_validate_rule
            location: ('pandaflow/tests/test_strategies/test_calculate_amount.py', 72, 'test_validate_rule')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_validate_rule>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='strategy' scope='function' baseid='pandaflow/tests/test_strategies/test_calculate_amount.py'>
              request: <SubRequest 'strategy' for <Function test_validate_rule>>
          finish pytest_fixture_setup --> <pandaflow.strategies.calculate_amount.CalculateAmountStrategy object at 0x75015e3c3360> [hook]
        finish pytest_runtest_setup --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_validate_rule>
            call: <CallInfo when='setup' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_strategies/test_calculate_amount.py::test_validate_rule' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_strategies/test_calculate_amount.py::test_validate_rule' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_strategies/test_calculate_amount.py::test_validate_rule' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_validate_rule>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_validate_rule>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_validate_rule>
            call: <CallInfo when='call' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_strategies/test_calculate_amount.py::test_validate_rule' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_strategies/test_calculate_amount.py::test_validate_rule' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_strategies/test_calculate_amount.py::test_validate_rule' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_validate_rule>
            nextitem: <Function test_basic_ratio>
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='strategy' scope='function' baseid='pandaflow/tests/test_strategies/test_calculate_amount.py'>
              request: <SubRequest 'strategy' for <Function test_validate_rule>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_validate_rule>
            call: <CallInfo when='teardown' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_strategies/test_calculate_amount.py::test_validate_rule' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_strategies/test_calculate_amount.py::test_validate_rule' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_strategies/test_calculate_amount.py::test_validate_rule' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: pandaflow/tests/test_strategies/test_calculate_amount.py::test_validate_rule
            location: ('pandaflow/tests/test_strategies/test_calculate_amount.py', 72, 'test_validate_rule')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_basic_ratio>
          nextitem: <Function test_ratio_with_rounding>
        pytest_runtest_logstart [hook]
            nodeid: pandaflow/tests/test_strategies/test_calculate_ratio.py::test_basic_ratio
            location: ('pandaflow/tests/test_strategies/test_calculate_ratio.py', 12, 'test_basic_ratio')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_basic_ratio>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='sample_df' scope='function' baseid='pandaflow/tests/test_strategies/test_calculate_ratio.py'>
              request: <SubRequest 'sample_df' for <Function test_basic_ratio>>
          early skip of rewriting module: pandas.io.formats.string [assertion]
          finish pytest_fixture_setup -->    sales  cost
0  100.0    50
1  200.0    80
2  300.0   120
3    NaN     0 [hook]
        finish pytest_runtest_setup --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_basic_ratio>
            call: <CallInfo when='setup' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_strategies/test_calculate_ratio.py::test_basic_ratio' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_strategies/test_calculate_ratio.py::test_basic_ratio' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_strategies/test_calculate_ratio.py::test_basic_ratio' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_basic_ratio>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_basic_ratio>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_basic_ratio>
            call: <CallInfo when='call' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_strategies/test_calculate_ratio.py::test_basic_ratio' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_strategies/test_calculate_ratio.py::test_basic_ratio' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_strategies/test_calculate_ratio.py::test_basic_ratio' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_basic_ratio>
            nextitem: <Function test_ratio_with_rounding>
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='sample_df' scope='function' baseid='pandaflow/tests/test_strategies/test_calculate_ratio.py'>
              request: <SubRequest 'sample_df' for <Function test_basic_ratio>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_basic_ratio>
            call: <CallInfo when='teardown' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_strategies/test_calculate_ratio.py::test_basic_ratio' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_strategies/test_calculate_ratio.py::test_basic_ratio' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_strategies/test_calculate_ratio.py::test_basic_ratio' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: pandaflow/tests/test_strategies/test_calculate_ratio.py::test_basic_ratio
            location: ('pandaflow/tests/test_strategies/test_calculate_ratio.py', 12, 'test_basic_ratio')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_ratio_with_rounding>
          nextitem: <Function test_missing_numerator>
        pytest_runtest_logstart [hook]
            nodeid: pandaflow/tests/test_strategies/test_calculate_ratio.py::test_ratio_with_rounding
            location: ('pandaflow/tests/test_strategies/test_calculate_ratio.py', 23, 'test_ratio_with_rounding')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_ratio_with_rounding>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='sample_df' scope='function' baseid='pandaflow/tests/test_strategies/test_calculate_ratio.py'>
              request: <SubRequest 'sample_df' for <Function test_ratio_with_rounding>>
          finish pytest_fixture_setup -->    sales  cost
0  100.0    50
1  200.0    80
2  300.0   120
3    NaN     0 [hook]
        finish pytest_runtest_setup --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_ratio_with_rounding>
            call: <CallInfo when='setup' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_strategies/test_calculate_ratio.py::test_ratio_with_rounding' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_strategies/test_calculate_ratio.py::test_ratio_with_rounding' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_strategies/test_calculate_ratio.py::test_ratio_with_rounding' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_ratio_with_rounding>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_ratio_with_rounding>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_ratio_with_rounding>
            call: <CallInfo when='call' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_strategies/test_calculate_ratio.py::test_ratio_with_rounding' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_strategies/test_calculate_ratio.py::test_ratio_with_rounding' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_strategies/test_calculate_ratio.py::test_ratio_with_rounding' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_ratio_with_rounding>
            nextitem: <Function test_missing_numerator>
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='sample_df' scope='function' baseid='pandaflow/tests/test_strategies/test_calculate_ratio.py'>
              request: <SubRequest 'sample_df' for <Function test_ratio_with_rounding>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_ratio_with_rounding>
            call: <CallInfo when='teardown' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_strategies/test_calculate_ratio.py::test_ratio_with_rounding' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_strategies/test_calculate_ratio.py::test_ratio_with_rounding' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_strategies/test_calculate_ratio.py::test_ratio_with_rounding' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: pandaflow/tests/test_strategies/test_calculate_ratio.py::test_ratio_with_rounding
            location: ('pandaflow/tests/test_strategies/test_calculate_ratio.py', 23, 'test_ratio_with_rounding')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_missing_numerator>
          nextitem: <Function test_missing_denominator>
        pytest_runtest_logstart [hook]
            nodeid: pandaflow/tests/test_strategies/test_calculate_ratio.py::test_missing_numerator
            location: ('pandaflow/tests/test_strategies/test_calculate_ratio.py', 35, 'test_missing_numerator')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_missing_numerator>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='sample_df' scope='function' baseid='pandaflow/tests/test_strategies/test_calculate_ratio.py'>
              request: <SubRequest 'sample_df' for <Function test_missing_numerator>>
          finish pytest_fixture_setup -->    sales  cost
0  100.0    50
1  200.0    80
2  300.0   120
3    NaN     0 [hook]
        finish pytest_runtest_setup --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_missing_numerator>
            call: <CallInfo when='setup' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_strategies/test_calculate_ratio.py::test_missing_numerator' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_strategies/test_calculate_ratio.py::test_missing_numerator' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_strategies/test_calculate_ratio.py::test_missing_numerator' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_missing_numerator>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_missing_numerator>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_missing_numerator>
            call: <CallInfo when='call' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_strategies/test_calculate_ratio.py::test_missing_numerator' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_strategies/test_calculate_ratio.py::test_missing_numerator' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_strategies/test_calculate_ratio.py::test_missing_numerator' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_missing_numerator>
            nextitem: <Function test_missing_denominator>
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='sample_df' scope='function' baseid='pandaflow/tests/test_strategies/test_calculate_ratio.py'>
              request: <SubRequest 'sample_df' for <Function test_missing_numerator>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_missing_numerator>
            call: <CallInfo when='teardown' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_strategies/test_calculate_ratio.py::test_missing_numerator' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_strategies/test_calculate_ratio.py::test_missing_numerator' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_strategies/test_calculate_ratio.py::test_missing_numerator' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: pandaflow/tests/test_strategies/test_calculate_ratio.py::test_missing_numerator
            location: ('pandaflow/tests/test_strategies/test_calculate_ratio.py', 35, 'test_missing_numerator')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_missing_denominator>
          nextitem: <Function test_division_by_zero>
        pytest_runtest_logstart [hook]
            nodeid: pandaflow/tests/test_strategies/test_calculate_ratio.py::test_missing_denominator
            location: ('pandaflow/tests/test_strategies/test_calculate_ratio.py', 45, 'test_missing_denominator')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_missing_denominator>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='sample_df' scope='function' baseid='pandaflow/tests/test_strategies/test_calculate_ratio.py'>
              request: <SubRequest 'sample_df' for <Function test_missing_denominator>>
          finish pytest_fixture_setup -->    sales  cost
0  100.0    50
1  200.0    80
2  300.0   120
3    NaN     0 [hook]
        finish pytest_runtest_setup --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_missing_denominator>
            call: <CallInfo when='setup' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_strategies/test_calculate_ratio.py::test_missing_denominator' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_strategies/test_calculate_ratio.py::test_missing_denominator' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_strategies/test_calculate_ratio.py::test_missing_denominator' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_missing_denominator>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_missing_denominator>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_missing_denominator>
            call: <CallInfo when='call' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_strategies/test_calculate_ratio.py::test_missing_denominator' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_strategies/test_calculate_ratio.py::test_missing_denominator' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_strategies/test_calculate_ratio.py::test_missing_denominator' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_missing_denominator>
            nextitem: <Function test_division_by_zero>
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='sample_df' scope='function' baseid='pandaflow/tests/test_strategies/test_calculate_ratio.py'>
              request: <SubRequest 'sample_df' for <Function test_missing_denominator>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_missing_denominator>
            call: <CallInfo when='teardown' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_strategies/test_calculate_ratio.py::test_missing_denominator' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_strategies/test_calculate_ratio.py::test_missing_denominator' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_strategies/test_calculate_ratio.py::test_missing_denominator' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: pandaflow/tests/test_strategies/test_calculate_ratio.py::test_missing_denominator
            location: ('pandaflow/tests/test_strategies/test_calculate_ratio.py', 45, 'test_missing_denominator')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_division_by_zero>
          nextitem: <Function test_custom_field_name>
        pytest_runtest_logstart [hook]
            nodeid: pandaflow/tests/test_strategies/test_calculate_ratio.py::test_division_by_zero
            location: ('pandaflow/tests/test_strategies/test_calculate_ratio.py', 55, 'test_division_by_zero')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_division_by_zero>
        finish pytest_runtest_setup --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_division_by_zero>
            call: <CallInfo when='setup' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_strategies/test_calculate_ratio.py::test_division_by_zero' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_strategies/test_calculate_ratio.py::test_division_by_zero' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_strategies/test_calculate_ratio.py::test_division_by_zero' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_division_by_zero>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_division_by_zero>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_division_by_zero>
            call: <CallInfo when='call' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_strategies/test_calculate_ratio.py::test_division_by_zero' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_strategies/test_calculate_ratio.py::test_division_by_zero' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_strategies/test_calculate_ratio.py::test_division_by_zero' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_division_by_zero>
            nextitem: <Function test_custom_field_name>
        finish pytest_runtest_teardown --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_division_by_zero>
            call: <CallInfo when='teardown' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_strategies/test_calculate_ratio.py::test_division_by_zero' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_strategies/test_calculate_ratio.py::test_division_by_zero' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_strategies/test_calculate_ratio.py::test_division_by_zero' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: pandaflow/tests/test_strategies/test_calculate_ratio.py::test_division_by_zero
            location: ('pandaflow/tests/test_strategies/test_calculate_ratio.py', 55, 'test_division_by_zero')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_custom_field_name>
          nextitem: <Function test_validate_rule_parses_correctly>
        pytest_runtest_logstart [hook]
            nodeid: pandaflow/tests/test_strategies/test_calculate_ratio.py::test_custom_field_name
            location: ('pandaflow/tests/test_strategies/test_calculate_ratio.py', 70, 'test_custom_field_name')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_custom_field_name>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='sample_df' scope='function' baseid='pandaflow/tests/test_strategies/test_calculate_ratio.py'>
              request: <SubRequest 'sample_df' for <Function test_custom_field_name>>
          finish pytest_fixture_setup -->    sales  cost
0  100.0    50
1  200.0    80
2  300.0   120
3    NaN     0 [hook]
        finish pytest_runtest_setup --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_custom_field_name>
            call: <CallInfo when='setup' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_strategies/test_calculate_ratio.py::test_custom_field_name' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_strategies/test_calculate_ratio.py::test_custom_field_name' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_strategies/test_calculate_ratio.py::test_custom_field_name' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_custom_field_name>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_custom_field_name>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_custom_field_name>
            call: <CallInfo when='call' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_strategies/test_calculate_ratio.py::test_custom_field_name' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_strategies/test_calculate_ratio.py::test_custom_field_name' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_strategies/test_calculate_ratio.py::test_custom_field_name' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_custom_field_name>
            nextitem: <Function test_validate_rule_parses_correctly>
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='sample_df' scope='function' baseid='pandaflow/tests/test_strategies/test_calculate_ratio.py'>
              request: <SubRequest 'sample_df' for <Function test_custom_field_name>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_custom_field_name>
            call: <CallInfo when='teardown' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_strategies/test_calculate_ratio.py::test_custom_field_name' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_strategies/test_calculate_ratio.py::test_custom_field_name' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_strategies/test_calculate_ratio.py::test_custom_field_name' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: pandaflow/tests/test_strategies/test_calculate_ratio.py::test_custom_field_name
            location: ('pandaflow/tests/test_strategies/test_calculate_ratio.py', 70, 'test_custom_field_name')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_validate_rule_parses_correctly>
          nextitem: <Function test_apply_sets_constant_value>
        pytest_runtest_logstart [hook]
            nodeid: pandaflow/tests/test_strategies/test_constant.py::test_validate_rule_parses_correctly
            location: ('pandaflow/tests/test_strategies/test_constant.py', 6, 'test_validate_rule_parses_correctly')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_validate_rule_parses_correctly>
        finish pytest_runtest_setup --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_validate_rule_parses_correctly>
            call: <CallInfo when='setup' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_strategies/test_constant.py::test_validate_rule_parses_correctly' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_strategies/test_constant.py::test_validate_rule_parses_correctly' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_strategies/test_constant.py::test_validate_rule_parses_correctly' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_validate_rule_parses_correctly>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_validate_rule_parses_correctly>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_validate_rule_parses_correctly>
            call: <CallInfo when='call' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_strategies/test_constant.py::test_validate_rule_parses_correctly' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_strategies/test_constant.py::test_validate_rule_parses_correctly' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_strategies/test_constant.py::test_validate_rule_parses_correctly' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_validate_rule_parses_correctly>
            nextitem: <Function test_apply_sets_constant_value>
        finish pytest_runtest_teardown --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_validate_rule_parses_correctly>
            call: <CallInfo when='teardown' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_strategies/test_constant.py::test_validate_rule_parses_correctly' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_strategies/test_constant.py::test_validate_rule_parses_correctly' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_strategies/test_constant.py::test_validate_rule_parses_correctly' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: pandaflow/tests/test_strategies/test_constant.py::test_validate_rule_parses_correctly
            location: ('pandaflow/tests/test_strategies/test_constant.py', 6, 'test_validate_rule_parses_correctly')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_apply_sets_constant_value>
          nextitem: <Function test_apply_with_missing_value_defaults_to_empty>
        pytest_runtest_logstart [hook]
            nodeid: pandaflow/tests/test_strategies/test_constant.py::test_apply_sets_constant_value
            location: ('pandaflow/tests/test_strategies/test_constant.py', 13, 'test_apply_sets_constant_value')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_apply_sets_constant_value>
        finish pytest_runtest_setup --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_apply_sets_constant_value>
            call: <CallInfo when='setup' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_strategies/test_constant.py::test_apply_sets_constant_value' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_strategies/test_constant.py::test_apply_sets_constant_value' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_strategies/test_constant.py::test_apply_sets_constant_value' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_apply_sets_constant_value>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_apply_sets_constant_value>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_apply_sets_constant_value>
            call: <CallInfo when='call' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_strategies/test_constant.py::test_apply_sets_constant_value' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_strategies/test_constant.py::test_apply_sets_constant_value' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_strategies/test_constant.py::test_apply_sets_constant_value' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_apply_sets_constant_value>
            nextitem: <Function test_apply_with_missing_value_defaults_to_empty>
        finish pytest_runtest_teardown --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_apply_sets_constant_value>
            call: <CallInfo when='teardown' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_strategies/test_constant.py::test_apply_sets_constant_value' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_strategies/test_constant.py::test_apply_sets_constant_value' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_strategies/test_constant.py::test_apply_sets_constant_value' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: pandaflow/tests/test_strategies/test_constant.py::test_apply_sets_constant_value
            location: ('pandaflow/tests/test_strategies/test_constant.py', 13, 'test_apply_sets_constant_value')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_apply_with_missing_value_defaults_to_empty>
          nextitem: <Function test_run_method_sets_constant_value>
        pytest_runtest_logstart [hook]
            nodeid: pandaflow/tests/test_strategies/test_constant.py::test_apply_with_missing_value_defaults_to_empty
            location: ('pandaflow/tests/test_strategies/test_constant.py', 29, 'test_apply_with_missing_value_defaults_to_empty')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_apply_with_missing_value_defaults_to_empty>
        finish pytest_runtest_setup --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_apply_with_missing_value_defaults_to_empty>
            call: <CallInfo when='setup' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_strategies/test_constant.py::test_apply_with_missing_value_defaults_to_empty' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_strategies/test_constant.py::test_apply_with_missing_value_defaults_to_empty' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_strategies/test_constant.py::test_apply_with_missing_value_defaults_to_empty' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_apply_with_missing_value_defaults_to_empty>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_apply_with_missing_value_defaults_to_empty>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_apply_with_missing_value_defaults_to_empty>
            call: <CallInfo when='call' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_strategies/test_constant.py::test_apply_with_missing_value_defaults_to_empty' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_strategies/test_constant.py::test_apply_with_missing_value_defaults_to_empty' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_strategies/test_constant.py::test_apply_with_missing_value_defaults_to_empty' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_apply_with_missing_value_defaults_to_empty>
            nextitem: <Function test_run_method_sets_constant_value>
        finish pytest_runtest_teardown --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_apply_with_missing_value_defaults_to_empty>
            call: <CallInfo when='teardown' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_strategies/test_constant.py::test_apply_with_missing_value_defaults_to_empty' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_strategies/test_constant.py::test_apply_with_missing_value_defaults_to_empty' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_strategies/test_constant.py::test_apply_with_missing_value_defaults_to_empty' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: pandaflow/tests/test_strategies/test_constant.py::test_apply_with_missing_value_defaults_to_empty
            location: ('pandaflow/tests/test_strategies/test_constant.py', 29, 'test_apply_with_missing_value_defaults_to_empty')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_run_method_sets_constant_value>
          nextitem: <Function test_validate_rule_parses_correctly>
        pytest_runtest_logstart [hook]
            nodeid: pandaflow/tests/test_strategies/test_constant.py::test_run_method_sets_constant_value
            location: ('pandaflow/tests/test_strategies/test_constant.py', 47, 'test_run_method_sets_constant_value')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_run_method_sets_constant_value>
        finish pytest_runtest_setup --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_run_method_sets_constant_value>
            call: <CallInfo when='setup' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_strategies/test_constant.py::test_run_method_sets_constant_value' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_strategies/test_constant.py::test_run_method_sets_constant_value' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_strategies/test_constant.py::test_run_method_sets_constant_value' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_run_method_sets_constant_value>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_run_method_sets_constant_value>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_run_method_sets_constant_value>
            call: <CallInfo when='call' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_strategies/test_constant.py::test_run_method_sets_constant_value' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_strategies/test_constant.py::test_run_method_sets_constant_value' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_strategies/test_constant.py::test_run_method_sets_constant_value' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_run_method_sets_constant_value>
            nextitem: <Function test_validate_rule_parses_correctly>
        finish pytest_runtest_teardown --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_run_method_sets_constant_value>
            call: <CallInfo when='teardown' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_strategies/test_constant.py::test_run_method_sets_constant_value' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_strategies/test_constant.py::test_run_method_sets_constant_value' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_strategies/test_constant.py::test_run_method_sets_constant_value' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: pandaflow/tests/test_strategies/test_constant.py::test_run_method_sets_constant_value
            location: ('pandaflow/tests/test_strategies/test_constant.py', 47, 'test_run_method_sets_constant_value')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_validate_rule_parses_correctly>
          nextitem: <Function test_apply_with_input_and_output_rules>
        pytest_runtest_logstart [hook]
            nodeid: pandaflow/tests/test_strategies/test_copy.py::test_validate_rule_parses_correctly
            location: ('pandaflow/tests/test_strategies/test_copy.py', 12, 'test_validate_rule_parses_correctly')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_validate_rule_parses_correctly>
        finish pytest_runtest_setup --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_validate_rule_parses_correctly>
            call: <CallInfo when='setup' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_strategies/test_copy.py::test_validate_rule_parses_correctly' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_strategies/test_copy.py::test_validate_rule_parses_correctly' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_strategies/test_copy.py::test_validate_rule_parses_correctly' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_validate_rule_parses_correctly>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_validate_rule_parses_correctly>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_validate_rule_parses_correctly>
            call: <CallInfo when='call' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_strategies/test_copy.py::test_validate_rule_parses_correctly' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_strategies/test_copy.py::test_validate_rule_parses_correctly' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_strategies/test_copy.py::test_validate_rule_parses_correctly' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_validate_rule_parses_correctly>
            nextitem: <Function test_apply_with_input_and_output_rules>
        finish pytest_runtest_teardown --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_validate_rule_parses_correctly>
            call: <CallInfo when='teardown' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_strategies/test_copy.py::test_validate_rule_parses_correctly' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_strategies/test_copy.py::test_validate_rule_parses_correctly' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_strategies/test_copy.py::test_validate_rule_parses_correctly' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: pandaflow/tests/test_strategies/test_copy.py::test_validate_rule_parses_correctly
            location: ('pandaflow/tests/test_strategies/test_copy.py', 12, 'test_validate_rule_parses_correctly')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_apply_with_input_and_output_rules>
          nextitem: <Function test_apply_with_fillna_replaces_empty_and_null>
        pytest_runtest_logstart [hook]
            nodeid: pandaflow/tests/test_strategies/test_copy.py::test_apply_with_input_and_output_rules
            location: ('pandaflow/tests/test_strategies/test_copy.py', 29, 'test_apply_with_input_and_output_rules')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_apply_with_input_and_output_rules>
        finish pytest_runtest_setup --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_apply_with_input_and_output_rules>
            call: <CallInfo when='setup' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_strategies/test_copy.py::test_apply_with_input_and_output_rules' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_strategies/test_copy.py::test_apply_with_input_and_output_rules' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_strategies/test_copy.py::test_apply_with_input_and_output_rules' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_apply_with_input_and_output_rules>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_apply_with_input_and_output_rules>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_apply_with_input_and_output_rules>
            call: <CallInfo when='call' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_strategies/test_copy.py::test_apply_with_input_and_output_rules' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_strategies/test_copy.py::test_apply_with_input_and_output_rules' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_strategies/test_copy.py::test_apply_with_input_and_output_rules' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_apply_with_input_and_output_rules>
            nextitem: <Function test_apply_with_fillna_replaces_empty_and_null>
        finish pytest_runtest_teardown --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_apply_with_input_and_output_rules>
            call: <CallInfo when='teardown' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_strategies/test_copy.py::test_apply_with_input_and_output_rules' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_strategies/test_copy.py::test_apply_with_input_and_output_rules' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_strategies/test_copy.py::test_apply_with_input_and_output_rules' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: pandaflow/tests/test_strategies/test_copy.py::test_apply_with_input_and_output_rules
            location: ('pandaflow/tests/test_strategies/test_copy.py', 29, 'test_apply_with_input_and_output_rules')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_apply_with_fillna_replaces_empty_and_null>
          nextitem: <Function test_apply_without_input_or_output_rules>
        pytest_runtest_logstart [hook]
            nodeid: pandaflow/tests/test_strategies/test_copy.py::test_apply_with_fillna_replaces_empty_and_null
            location: ('pandaflow/tests/test_strategies/test_copy.py', 46, 'test_apply_with_fillna_replaces_empty_and_null')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_apply_with_fillna_replaces_empty_and_null>
        finish pytest_runtest_setup --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_apply_with_fillna_replaces_empty_and_null>
            call: <CallInfo when='setup' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_strategies/test_copy.py::test_apply_with_fillna_replaces_empty_and_null' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_strategies/test_copy.py::test_apply_with_fillna_replaces_empty_and_null' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_strategies/test_copy.py::test_apply_with_fillna_replaces_empty_and_null' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_apply_with_fillna_replaces_empty_and_null>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_apply_with_fillna_replaces_empty_and_null>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_apply_with_fillna_replaces_empty_and_null>
            call: <CallInfo when='call' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_strategies/test_copy.py::test_apply_with_fillna_replaces_empty_and_null' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_strategies/test_copy.py::test_apply_with_fillna_replaces_empty_and_null' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_strategies/test_copy.py::test_apply_with_fillna_replaces_empty_and_null' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_apply_with_fillna_replaces_empty_and_null>
            nextitem: <Function test_apply_without_input_or_output_rules>
        finish pytest_runtest_teardown --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_apply_with_fillna_replaces_empty_and_null>
            call: <CallInfo when='teardown' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_strategies/test_copy.py::test_apply_with_fillna_replaces_empty_and_null' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_strategies/test_copy.py::test_apply_with_fillna_replaces_empty_and_null' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_strategies/test_copy.py::test_apply_with_fillna_replaces_empty_and_null' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: pandaflow/tests/test_strategies/test_copy.py::test_apply_with_fillna_replaces_empty_and_null
            location: ('pandaflow/tests/test_strategies/test_copy.py', 46, 'test_apply_with_fillna_replaces_empty_and_null')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_apply_without_input_or_output_rules>
          nextitem: <Function test_apply_raises_if_source_column_missing>
        pytest_runtest_logstart [hook]
            nodeid: pandaflow/tests/test_strategies/test_copy.py::test_apply_without_input_or_output_rules
            location: ('pandaflow/tests/test_strategies/test_copy.py', 64, 'test_apply_without_input_or_output_rules')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_apply_without_input_or_output_rules>
        finish pytest_runtest_setup --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_apply_without_input_or_output_rules>
            call: <CallInfo when='setup' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_strategies/test_copy.py::test_apply_without_input_or_output_rules' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_strategies/test_copy.py::test_apply_without_input_or_output_rules' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_strategies/test_copy.py::test_apply_without_input_or_output_rules' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_apply_without_input_or_output_rules>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_apply_without_input_or_output_rules>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_apply_without_input_or_output_rules>
            call: <CallInfo when='call' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_strategies/test_copy.py::test_apply_without_input_or_output_rules' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_strategies/test_copy.py::test_apply_without_input_or_output_rules' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_strategies/test_copy.py::test_apply_without_input_or_output_rules' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_apply_without_input_or_output_rules>
            nextitem: <Function test_apply_raises_if_source_column_missing>
        finish pytest_runtest_teardown --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_apply_without_input_or_output_rules>
            call: <CallInfo when='teardown' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_strategies/test_copy.py::test_apply_without_input_or_output_rules' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_strategies/test_copy.py::test_apply_without_input_or_output_rules' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_strategies/test_copy.py::test_apply_without_input_or_output_rules' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: pandaflow/tests/test_strategies/test_copy.py::test_apply_without_input_or_output_rules
            location: ('pandaflow/tests/test_strategies/test_copy.py', 64, 'test_apply_without_input_or_output_rules')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_apply_raises_if_source_column_missing>
          nextitem: <Function test_validate_rule>
        pytest_runtest_logstart [hook]
            nodeid: pandaflow/tests/test_strategies/test_copy.py::test_apply_raises_if_source_column_missing
            location: ('pandaflow/tests/test_strategies/test_copy.py', 73, 'test_apply_raises_if_source_column_missing')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_apply_raises_if_source_column_missing>
        finish pytest_runtest_setup --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_apply_raises_if_source_column_missing>
            call: <CallInfo when='setup' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_strategies/test_copy.py::test_apply_raises_if_source_column_missing' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_strategies/test_copy.py::test_apply_raises_if_source_column_missing' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_strategies/test_copy.py::test_apply_raises_if_source_column_missing' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_apply_raises_if_source_column_missing>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_apply_raises_if_source_column_missing>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_apply_raises_if_source_column_missing>
            call: <CallInfo when='call' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_strategies/test_copy.py::test_apply_raises_if_source_column_missing' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_strategies/test_copy.py::test_apply_raises_if_source_column_missing' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_strategies/test_copy.py::test_apply_raises_if_source_column_missing' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_apply_raises_if_source_column_missing>
            nextitem: <Function test_validate_rule>
        finish pytest_runtest_teardown --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_apply_raises_if_source_column_missing>
            call: <CallInfo when='teardown' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_strategies/test_copy.py::test_apply_raises_if_source_column_missing' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_strategies/test_copy.py::test_apply_raises_if_source_column_missing' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_strategies/test_copy.py::test_apply_raises_if_source_column_missing' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: pandaflow/tests/test_strategies/test_copy.py::test_apply_raises_if_source_column_missing
            location: ('pandaflow/tests/test_strategies/test_copy.py', 73, 'test_apply_raises_if_source_column_missing')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_validate_rule>
          nextitem: <Function test_validate_rule>
        pytest_runtest_logstart [hook]
            nodeid: pandaflow/tests/test_strategies/test_copy.py::test_validate_rule
            location: ('pandaflow/tests/test_strategies/test_copy.py', 81, 'test_validate_rule')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_validate_rule>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='strategy' scope='function' baseid='pandaflow/tests/test_strategies/test_copy.py'>
              request: <SubRequest 'strategy' for <Function test_validate_rule>>
          finish pytest_fixture_setup --> <pandaflow.strategies.copy.CopyStrategy object at 0x75015e29c640> [hook]
        finish pytest_runtest_setup --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_validate_rule>
            call: <CallInfo when='setup' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_strategies/test_copy.py::test_validate_rule' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_strategies/test_copy.py::test_validate_rule' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_strategies/test_copy.py::test_validate_rule' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_validate_rule>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_validate_rule>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_validate_rule>
            call: <CallInfo when='call' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_strategies/test_copy.py::test_validate_rule' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_strategies/test_copy.py::test_validate_rule' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_strategies/test_copy.py::test_validate_rule' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_validate_rule>
            nextitem: <Function test_validate_rule>
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='strategy' scope='function' baseid='pandaflow/tests/test_strategies/test_copy.py'>
              request: <SubRequest 'strategy' for <Function test_validate_rule>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_validate_rule>
            call: <CallInfo when='teardown' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_strategies/test_copy.py::test_validate_rule' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_strategies/test_copy.py::test_validate_rule' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_strategies/test_copy.py::test_validate_rule' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: pandaflow/tests/test_strategies/test_copy.py::test_validate_rule
            location: ('pandaflow/tests/test_strategies/test_copy.py', 81, 'test_validate_rule')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_validate_rule>
          nextitem: <Function test_missing_file_returns_not_found>
        pytest_runtest_logstart [hook]
            nodeid: pandaflow/tests/test_strategies/test_csvfile.py::test_validate_rule
            location: ('pandaflow/tests/test_strategies/test_csvfile.py', 17, 'test_validate_rule')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_validate_rule>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='strategy' scope='function' baseid='pandaflow/tests/test_strategies/test_csvfile.py'>
              request: <SubRequest 'strategy' for <Function test_validate_rule>>
          finish pytest_fixture_setup --> <pandaflow.strategies.csvfile.CsvFileStrategy object at 0x75015e20a900> [hook]
        finish pytest_runtest_setup --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_validate_rule>
            call: <CallInfo when='setup' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_strategies/test_csvfile.py::test_validate_rule' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_strategies/test_csvfile.py::test_validate_rule' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_strategies/test_csvfile.py::test_validate_rule' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_validate_rule>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_validate_rule>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_validate_rule>
            call: <CallInfo when='call' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_strategies/test_csvfile.py::test_validate_rule' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_strategies/test_csvfile.py::test_validate_rule' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_strategies/test_csvfile.py::test_validate_rule' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_validate_rule>
            nextitem: <Function test_missing_file_returns_not_found>
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='strategy' scope='function' baseid='pandaflow/tests/test_strategies/test_csvfile.py'>
              request: <SubRequest 'strategy' for <Function test_validate_rule>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_validate_rule>
            call: <CallInfo when='teardown' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_strategies/test_csvfile.py::test_validate_rule' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_strategies/test_csvfile.py::test_validate_rule' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_strategies/test_csvfile.py::test_validate_rule' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: pandaflow/tests/test_strategies/test_csvfile.py::test_validate_rule
            location: ('pandaflow/tests/test_strategies/test_csvfile.py', 17, 'test_validate_rule')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_missing_file_returns_not_found>
          nextitem: <Function test_missing_key_or_value_raises>
        pytest_runtest_logstart [hook]
            nodeid: pandaflow/tests/test_strategies/test_csvfile.py::test_missing_file_returns_not_found
            location: ('pandaflow/tests/test_strategies/test_csvfile.py', 32, 'test_missing_file_returns_not_found')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_missing_file_returns_not_found>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='strategy' scope='function' baseid='pandaflow/tests/test_strategies/test_csvfile.py'>
              request: <SubRequest 'strategy' for <Function test_missing_file_returns_not_found>>
          finish pytest_fixture_setup --> <pandaflow.strategies.csvfile.CsvFileStrategy object at 0x75015e225e50> [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='input_df' scope='function' baseid='pandaflow/tests/test_strategies/test_csvfile.py'>
              request: <SubRequest 'input_df' for <Function test_missing_file_returns_not_found>>
          finish pytest_fixture_setup -->   code other
0    A     x
1    B     y
2    C     z [hook]
        finish pytest_runtest_setup --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_missing_file_returns_not_found>
            call: <CallInfo when='setup' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_strategies/test_csvfile.py::test_missing_file_returns_not_found' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_strategies/test_csvfile.py::test_missing_file_returns_not_found' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_strategies/test_csvfile.py::test_missing_file_returns_not_found' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_missing_file_returns_not_found>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_missing_file_returns_not_found>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_missing_file_returns_not_found>
            call: <CallInfo when='call' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_strategies/test_csvfile.py::test_missing_file_returns_not_found' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_strategies/test_csvfile.py::test_missing_file_returns_not_found' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_strategies/test_csvfile.py::test_missing_file_returns_not_found' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_missing_file_returns_not_found>
            nextitem: <Function test_missing_key_or_value_raises>
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='input_df' scope='function' baseid='pandaflow/tests/test_strategies/test_csvfile.py'>
              request: <SubRequest 'input_df' for <Function test_missing_file_returns_not_found>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='strategy' scope='function' baseid='pandaflow/tests/test_strategies/test_csvfile.py'>
              request: <SubRequest 'strategy' for <Function test_missing_file_returns_not_found>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_missing_file_returns_not_found>
            call: <CallInfo when='teardown' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_strategies/test_csvfile.py::test_missing_file_returns_not_found' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_strategies/test_csvfile.py::test_missing_file_returns_not_found' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_strategies/test_csvfile.py::test_missing_file_returns_not_found' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: pandaflow/tests/test_strategies/test_csvfile.py::test_missing_file_returns_not_found
            location: ('pandaflow/tests/test_strategies/test_csvfile.py', 32, 'test_missing_file_returns_not_found')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_missing_key_or_value_raises>
          nextitem: <Function test_missing_lookup_columns_raises>
        pytest_runtest_logstart [hook]
            nodeid: pandaflow/tests/test_strategies/test_csvfile.py::test_missing_key_or_value_raises
            location: ('pandaflow/tests/test_strategies/test_csvfile.py', 45, 'test_missing_key_or_value_raises')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_missing_key_or_value_raises>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='strategy' scope='function' baseid='pandaflow/tests/test_strategies/test_csvfile.py'>
              request: <SubRequest 'strategy' for <Function test_missing_key_or_value_raises>>
          finish pytest_fixture_setup --> <pandaflow.strategies.csvfile.CsvFileStrategy object at 0x75015e224f50> [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='input_df' scope='function' baseid='pandaflow/tests/test_strategies/test_csvfile.py'>
              request: <SubRequest 'input_df' for <Function test_missing_key_or_value_raises>>
          finish pytest_fixture_setup -->   code other
0    A     x
1    B     y
2    C     z [hook]
        finish pytest_runtest_setup --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_missing_key_or_value_raises>
            call: <CallInfo when='setup' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_strategies/test_csvfile.py::test_missing_key_or_value_raises' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_strategies/test_csvfile.py::test_missing_key_or_value_raises' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_strategies/test_csvfile.py::test_missing_key_or_value_raises' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_missing_key_or_value_raises>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_missing_key_or_value_raises>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_missing_key_or_value_raises>
            call: <CallInfo when='call' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_strategies/test_csvfile.py::test_missing_key_or_value_raises' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_strategies/test_csvfile.py::test_missing_key_or_value_raises' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_strategies/test_csvfile.py::test_missing_key_or_value_raises' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_missing_key_or_value_raises>
            nextitem: <Function test_missing_lookup_columns_raises>
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='input_df' scope='function' baseid='pandaflow/tests/test_strategies/test_csvfile.py'>
              request: <SubRequest 'input_df' for <Function test_missing_key_or_value_raises>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='strategy' scope='function' baseid='pandaflow/tests/test_strategies/test_csvfile.py'>
              request: <SubRequest 'strategy' for <Function test_missing_key_or_value_raises>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_missing_key_or_value_raises>
            call: <CallInfo when='teardown' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_strategies/test_csvfile.py::test_missing_key_or_value_raises' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_strategies/test_csvfile.py::test_missing_key_or_value_raises' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_strategies/test_csvfile.py::test_missing_key_or_value_raises' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: pandaflow/tests/test_strategies/test_csvfile.py::test_missing_key_or_value_raises
            location: ('pandaflow/tests/test_strategies/test_csvfile.py', 45, 'test_missing_key_or_value_raises')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_missing_lookup_columns_raises>
          nextitem: <Function test_missing_source_column_raises>
        pytest_runtest_logstart [hook]
            nodeid: pandaflow/tests/test_strategies/test_csvfile.py::test_missing_lookup_columns_raises
            location: ('pandaflow/tests/test_strategies/test_csvfile.py', 51, 'test_missing_lookup_columns_raises')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_missing_lookup_columns_raises>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='strategy' scope='function' baseid='pandaflow/tests/test_strategies/test_csvfile.py'>
              request: <SubRequest 'strategy' for <Function test_missing_lookup_columns_raises>>
          finish pytest_fixture_setup --> <pandaflow.strategies.csvfile.CsvFileStrategy object at 0x75015e29c770> [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='input_df' scope='function' baseid='pandaflow/tests/test_strategies/test_csvfile.py'>
              request: <SubRequest 'input_df' for <Function test_missing_lookup_columns_raises>>
          finish pytest_fixture_setup -->   code other
0    A     x
1    B     y
2    C     z [hook]
        finish pytest_runtest_setup --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_missing_lookup_columns_raises>
            call: <CallInfo when='setup' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_strategies/test_csvfile.py::test_missing_lookup_columns_raises' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_strategies/test_csvfile.py::test_missing_lookup_columns_raises' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_strategies/test_csvfile.py::test_missing_lookup_columns_raises' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_missing_lookup_columns_raises>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_missing_lookup_columns_raises>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_missing_lookup_columns_raises>
            call: <CallInfo when='call' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_strategies/test_csvfile.py::test_missing_lookup_columns_raises' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_strategies/test_csvfile.py::test_missing_lookup_columns_raises' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_strategies/test_csvfile.py::test_missing_lookup_columns_raises' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_missing_lookup_columns_raises>
            nextitem: <Function test_missing_source_column_raises>
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='input_df' scope='function' baseid='pandaflow/tests/test_strategies/test_csvfile.py'>
              request: <SubRequest 'input_df' for <Function test_missing_lookup_columns_raises>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='strategy' scope='function' baseid='pandaflow/tests/test_strategies/test_csvfile.py'>
              request: <SubRequest 'strategy' for <Function test_missing_lookup_columns_raises>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_missing_lookup_columns_raises>
            call: <CallInfo when='teardown' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_strategies/test_csvfile.py::test_missing_lookup_columns_raises' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_strategies/test_csvfile.py::test_missing_lookup_columns_raises' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_strategies/test_csvfile.py::test_missing_lookup_columns_raises' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: pandaflow/tests/test_strategies/test_csvfile.py::test_missing_lookup_columns_raises
            location: ('pandaflow/tests/test_strategies/test_csvfile.py', 51, 'test_missing_lookup_columns_raises')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_missing_source_column_raises>
          nextitem: <Function test_successful_lookup>
        pytest_runtest_logstart [hook]
            nodeid: pandaflow/tests/test_strategies/test_csvfile.py::test_missing_source_column_raises
            location: ('pandaflow/tests/test_strategies/test_csvfile.py', 72, 'test_missing_source_column_raises')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_missing_source_column_raises>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='strategy' scope='function' baseid='pandaflow/tests/test_strategies/test_csvfile.py'>
              request: <SubRequest 'strategy' for <Function test_missing_source_column_raises>>
          finish pytest_fixture_setup --> <pandaflow.strategies.csvfile.CsvFileStrategy object at 0x75015e29c050> [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='input_df' scope='function' baseid='pandaflow/tests/test_strategies/test_csvfile.py'>
              request: <SubRequest 'input_df' for <Function test_missing_source_column_raises>>
          finish pytest_fixture_setup -->   code other
0    A     x
1    B     y
2    C     z [hook]
        finish pytest_runtest_setup --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_missing_source_column_raises>
            call: <CallInfo when='setup' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_strategies/test_csvfile.py::test_missing_source_column_raises' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_strategies/test_csvfile.py::test_missing_source_column_raises' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_strategies/test_csvfile.py::test_missing_source_column_raises' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_missing_source_column_raises>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_missing_source_column_raises>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_missing_source_column_raises>
            call: <CallInfo when='call' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_strategies/test_csvfile.py::test_missing_source_column_raises' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_strategies/test_csvfile.py::test_missing_source_column_raises' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_strategies/test_csvfile.py::test_missing_source_column_raises' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_missing_source_column_raises>
            nextitem: <Function test_successful_lookup>
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='input_df' scope='function' baseid='pandaflow/tests/test_strategies/test_csvfile.py'>
              request: <SubRequest 'input_df' for <Function test_missing_source_column_raises>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='strategy' scope='function' baseid='pandaflow/tests/test_strategies/test_csvfile.py'>
              request: <SubRequest 'strategy' for <Function test_missing_source_column_raises>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_missing_source_column_raises>
            call: <CallInfo when='teardown' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_strategies/test_csvfile.py::test_missing_source_column_raises' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_strategies/test_csvfile.py::test_missing_source_column_raises' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_strategies/test_csvfile.py::test_missing_source_column_raises' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: pandaflow/tests/test_strategies/test_csvfile.py::test_missing_source_column_raises
            location: ('pandaflow/tests/test_strategies/test_csvfile.py', 72, 'test_missing_source_column_raises')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_successful_lookup>
          nextitem: <Function test_debug_strategy_prints_field_and_head>
        pytest_runtest_logstart [hook]
            nodeid: pandaflow/tests/test_strategies/test_csvfile.py::test_successful_lookup
            location: ('pandaflow/tests/test_strategies/test_csvfile.py', 90, 'test_successful_lookup')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_successful_lookup>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='strategy' scope='function' baseid='pandaflow/tests/test_strategies/test_csvfile.py'>
              request: <SubRequest 'strategy' for <Function test_successful_lookup>>
          finish pytest_fixture_setup --> <pandaflow.strategies.csvfile.CsvFileStrategy object at 0x75015e288830> [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='input_df' scope='function' baseid='pandaflow/tests/test_strategies/test_csvfile.py'>
              request: <SubRequest 'input_df' for <Function test_successful_lookup>>
          finish pytest_fixture_setup -->   code other
0    A     x
1    B     y
2    C     z [hook]
        finish pytest_runtest_setup --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_successful_lookup>
            call: <CallInfo when='setup' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_strategies/test_csvfile.py::test_successful_lookup' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_strategies/test_csvfile.py::test_successful_lookup' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_strategies/test_csvfile.py::test_successful_lookup' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_successful_lookup>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_successful_lookup>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_successful_lookup>
            call: <CallInfo when='call' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_strategies/test_csvfile.py::test_successful_lookup' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_strategies/test_csvfile.py::test_successful_lookup' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_strategies/test_csvfile.py::test_successful_lookup' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_successful_lookup>
            nextitem: <Function test_debug_strategy_prints_field_and_head>
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='input_df' scope='function' baseid='pandaflow/tests/test_strategies/test_csvfile.py'>
              request: <SubRequest 'input_df' for <Function test_successful_lookup>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='strategy' scope='function' baseid='pandaflow/tests/test_strategies/test_csvfile.py'>
              request: <SubRequest 'strategy' for <Function test_successful_lookup>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_successful_lookup>
            call: <CallInfo when='teardown' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_strategies/test_csvfile.py::test_successful_lookup' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_strategies/test_csvfile.py::test_successful_lookup' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_strategies/test_csvfile.py::test_successful_lookup' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: pandaflow/tests/test_strategies/test_csvfile.py::test_successful_lookup
            location: ('pandaflow/tests/test_strategies/test_csvfile.py', 90, 'test_successful_lookup')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_debug_strategy_prints_field_and_head>
          nextitem: <Function test_debug_strategy_does_not_modify_df>
        pytest_runtest_logstart [hook]
            nodeid: pandaflow/tests/test_strategies/test_debug.py::test_debug_strategy_prints_field_and_head
            location: ('pandaflow/tests/test_strategies/test_debug.py', 15, 'test_debug_strategy_prints_field_and_head')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_debug_strategy_prints_field_and_head>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='strategy' scope='function' baseid='pandaflow/tests/test_strategies/test_debug.py'>
              request: <SubRequest 'strategy' for <Function test_debug_strategy_prints_field_and_head>>
          finish pytest_fixture_setup --> <pandaflow.strategies.debug.DebugStrategy object at 0x75015e20a900> [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='sample_df' scope='function' baseid='pandaflow/tests/test_strategies/test_debug.py'>
              request: <SubRequest 'sample_df' for <Function test_debug_strategy_prints_field_and_head>>
          finish pytest_fixture_setup -->    A  B
0  1  x
1  2  y
2  3  z [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='capsys' scope='function' baseid=''>
              request: <SubRequest 'capsys' for <Function test_debug_strategy_prints_field_and_head>>
          finish pytest_fixture_setup --> <_pytest.capture.CaptureFixture object at 0x75015e20acf0> [hook]
        finish pytest_runtest_setup --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_debug_strategy_prints_field_and_head>
            call: <CallInfo when='setup' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_strategies/test_debug.py::test_debug_strategy_prints_field_and_head' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_strategies/test_debug.py::test_debug_strategy_prints_field_and_head' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_strategies/test_debug.py::test_debug_strategy_prints_field_and_head' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_debug_strategy_prints_field_and_head>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_debug_strategy_prints_field_and_head>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_debug_strategy_prints_field_and_head>
            call: <CallInfo when='call' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_strategies/test_debug.py::test_debug_strategy_prints_field_and_head' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_strategies/test_debug.py::test_debug_strategy_prints_field_and_head' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_strategies/test_debug.py::test_debug_strategy_prints_field_and_head' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_debug_strategy_prints_field_and_head>
            nextitem: <Function test_debug_strategy_does_not_modify_df>
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='capsys' scope='function' baseid=''>
              request: <SubRequest 'capsys' for <Function test_debug_strategy_prints_field_and_head>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='sample_df' scope='function' baseid='pandaflow/tests/test_strategies/test_debug.py'>
              request: <SubRequest 'sample_df' for <Function test_debug_strategy_prints_field_and_head>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='strategy' scope='function' baseid='pandaflow/tests/test_strategies/test_debug.py'>
              request: <SubRequest 'strategy' for <Function test_debug_strategy_prints_field_and_head>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_debug_strategy_prints_field_and_head>
            call: <CallInfo when='teardown' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_strategies/test_debug.py::test_debug_strategy_prints_field_and_head' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_strategies/test_debug.py::test_debug_strategy_prints_field_and_head' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_strategies/test_debug.py::test_debug_strategy_prints_field_and_head' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: pandaflow/tests/test_strategies/test_debug.py::test_debug_strategy_prints_field_and_head
            location: ('pandaflow/tests/test_strategies/test_debug.py', 15, 'test_debug_strategy_prints_field_and_head')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_debug_strategy_does_not_modify_df>
          nextitem: <Function test_deduplicate_by_field>
        pytest_runtest_logstart [hook]
            nodeid: pandaflow/tests/test_strategies/test_debug.py::test_debug_strategy_does_not_modify_df
            location: ('pandaflow/tests/test_strategies/test_debug.py', 24, 'test_debug_strategy_does_not_modify_df')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_debug_strategy_does_not_modify_df>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='strategy' scope='function' baseid='pandaflow/tests/test_strategies/test_debug.py'>
              request: <SubRequest 'strategy' for <Function test_debug_strategy_does_not_modify_df>>
          finish pytest_fixture_setup --> <pandaflow.strategies.debug.DebugStrategy object at 0x75015e224f50> [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='sample_df' scope='function' baseid='pandaflow/tests/test_strategies/test_debug.py'>
              request: <SubRequest 'sample_df' for <Function test_debug_strategy_does_not_modify_df>>
          finish pytest_fixture_setup -->    A  B
0  1  x
1  2  y
2  3  z [hook]
        finish pytest_runtest_setup --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_debug_strategy_does_not_modify_df>
            call: <CallInfo when='setup' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_strategies/test_debug.py::test_debug_strategy_does_not_modify_df' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_strategies/test_debug.py::test_debug_strategy_does_not_modify_df' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_strategies/test_debug.py::test_debug_strategy_does_not_modify_df' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_debug_strategy_does_not_modify_df>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_debug_strategy_does_not_modify_df>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_debug_strategy_does_not_modify_df>
            call: <CallInfo when='call' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_strategies/test_debug.py::test_debug_strategy_does_not_modify_df' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_strategies/test_debug.py::test_debug_strategy_does_not_modify_df' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_strategies/test_debug.py::test_debug_strategy_does_not_modify_df' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_debug_strategy_does_not_modify_df>
            nextitem: <Function test_deduplicate_by_field>
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='sample_df' scope='function' baseid='pandaflow/tests/test_strategies/test_debug.py'>
              request: <SubRequest 'sample_df' for <Function test_debug_strategy_does_not_modify_df>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='strategy' scope='function' baseid='pandaflow/tests/test_strategies/test_debug.py'>
              request: <SubRequest 'strategy' for <Function test_debug_strategy_does_not_modify_df>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_debug_strategy_does_not_modify_df>
            call: <CallInfo when='teardown' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_strategies/test_debug.py::test_debug_strategy_does_not_modify_df' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_strategies/test_debug.py::test_debug_strategy_does_not_modify_df' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_strategies/test_debug.py::test_debug_strategy_does_not_modify_df' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: pandaflow/tests/test_strategies/test_debug.py::test_debug_strategy_does_not_modify_df
            location: ('pandaflow/tests/test_strategies/test_debug.py', 24, 'test_debug_strategy_does_not_modify_df')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_deduplicate_by_field>
          nextitem: <Function test_deduplicate_by_subset>
        pytest_runtest_logstart [hook]
            nodeid: pandaflow/tests/test_strategies/test_deduplicate.py::test_deduplicate_by_field
            location: ('pandaflow/tests/test_strategies/test_deduplicate.py', 21, 'test_deduplicate_by_field')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_deduplicate_by_field>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='strategy' scope='function' baseid='pandaflow/tests/test_strategies/test_deduplicate.py'>
              request: <SubRequest 'strategy' for <Function test_deduplicate_by_field>>
          finish pytest_fixture_setup --> <pandaflow.strategies.deduplicate.DeDuplicateStrategy object at 0x75015e2082f0> [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='sample_df' scope='function' baseid='pandaflow/tests/test_strategies/test_deduplicate.py'>
              request: <SubRequest 'sample_df' for <Function test_deduplicate_by_field>>
          finish pytest_fixture_setup -->    id     name  value
0   1    Alice     10
1   2      Bob     20
2   2      Bob     21
3   3  Charlie     30
4   3  Charlie     31
5   3  Charlie     32 [hook]
        finish pytest_runtest_setup --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_deduplicate_by_field>
            call: <CallInfo when='setup' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_strategies/test_deduplicate.py::test_deduplicate_by_field' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_strategies/test_deduplicate.py::test_deduplicate_by_field' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_strategies/test_deduplicate.py::test_deduplicate_by_field' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_deduplicate_by_field>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_deduplicate_by_field>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_deduplicate_by_field>
            call: <CallInfo when='call' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_strategies/test_deduplicate.py::test_deduplicate_by_field' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_strategies/test_deduplicate.py::test_deduplicate_by_field' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_strategies/test_deduplicate.py::test_deduplicate_by_field' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_deduplicate_by_field>
            nextitem: <Function test_deduplicate_by_subset>
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='sample_df' scope='function' baseid='pandaflow/tests/test_strategies/test_deduplicate.py'>
              request: <SubRequest 'sample_df' for <Function test_deduplicate_by_field>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='strategy' scope='function' baseid='pandaflow/tests/test_strategies/test_deduplicate.py'>
              request: <SubRequest 'strategy' for <Function test_deduplicate_by_field>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_deduplicate_by_field>
            call: <CallInfo when='teardown' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_strategies/test_deduplicate.py::test_deduplicate_by_field' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_strategies/test_deduplicate.py::test_deduplicate_by_field' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_strategies/test_deduplicate.py::test_deduplicate_by_field' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: pandaflow/tests/test_strategies/test_deduplicate.py::test_deduplicate_by_field
            location: ('pandaflow/tests/test_strategies/test_deduplicate.py', 21, 'test_deduplicate_by_field')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_deduplicate_by_subset>
          nextitem: <Function test_no_duplicates>
        pytest_runtest_logstart [hook]
            nodeid: pandaflow/tests/test_strategies/test_deduplicate.py::test_deduplicate_by_subset
            location: ('pandaflow/tests/test_strategies/test_deduplicate.py', 29, 'test_deduplicate_by_subset')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_deduplicate_by_subset>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='strategy' scope='function' baseid='pandaflow/tests/test_strategies/test_deduplicate.py'>
              request: <SubRequest 'strategy' for <Function test_deduplicate_by_subset>>
          finish pytest_fixture_setup --> <pandaflow.strategies.deduplicate.DeDuplicateStrategy object at 0x75015e225f90> [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='sample_df' scope='function' baseid='pandaflow/tests/test_strategies/test_deduplicate.py'>
              request: <SubRequest 'sample_df' for <Function test_deduplicate_by_subset>>
          finish pytest_fixture_setup -->    id     name  value
0   1    Alice     10
1   2      Bob     20
2   2      Bob     21
3   3  Charlie     30
4   3  Charlie     31
5   3  Charlie     32 [hook]
        finish pytest_runtest_setup --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_deduplicate_by_subset>
            call: <CallInfo when='setup' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_strategies/test_deduplicate.py::test_deduplicate_by_subset' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_strategies/test_deduplicate.py::test_deduplicate_by_subset' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_strategies/test_deduplicate.py::test_deduplicate_by_subset' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_deduplicate_by_subset>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_deduplicate_by_subset>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_deduplicate_by_subset>
            call: <CallInfo when='call' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_strategies/test_deduplicate.py::test_deduplicate_by_subset' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_strategies/test_deduplicate.py::test_deduplicate_by_subset' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_strategies/test_deduplicate.py::test_deduplicate_by_subset' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_deduplicate_by_subset>
            nextitem: <Function test_no_duplicates>
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='sample_df' scope='function' baseid='pandaflow/tests/test_strategies/test_deduplicate.py'>
              request: <SubRequest 'sample_df' for <Function test_deduplicate_by_subset>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='strategy' scope='function' baseid='pandaflow/tests/test_strategies/test_deduplicate.py'>
              request: <SubRequest 'strategy' for <Function test_deduplicate_by_subset>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_deduplicate_by_subset>
            call: <CallInfo when='teardown' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_strategies/test_deduplicate.py::test_deduplicate_by_subset' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_strategies/test_deduplicate.py::test_deduplicate_by_subset' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_strategies/test_deduplicate.py::test_deduplicate_by_subset' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: pandaflow/tests/test_strategies/test_deduplicate.py::test_deduplicate_by_subset
            location: ('pandaflow/tests/test_strategies/test_deduplicate.py', 29, 'test_deduplicate_by_subset')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_no_duplicates>
          nextitem: <Function test_validate_rule>
        pytest_runtest_logstart [hook]
            nodeid: pandaflow/tests/test_strategies/test_deduplicate.py::test_no_duplicates
            location: ('pandaflow/tests/test_strategies/test_deduplicate.py', 38, 'test_no_duplicates')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_no_duplicates>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='strategy' scope='function' baseid='pandaflow/tests/test_strategies/test_deduplicate.py'>
              request: <SubRequest 'strategy' for <Function test_no_duplicates>>
          finish pytest_fixture_setup --> <pandaflow.strategies.deduplicate.DeDuplicateStrategy object at 0x75015e225f90> [hook]
        finish pytest_runtest_setup --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_no_duplicates>
            call: <CallInfo when='setup' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_strategies/test_deduplicate.py::test_no_duplicates' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_strategies/test_deduplicate.py::test_no_duplicates' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_strategies/test_deduplicate.py::test_no_duplicates' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_no_duplicates>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_no_duplicates>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_no_duplicates>
            call: <CallInfo when='call' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_strategies/test_deduplicate.py::test_no_duplicates' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_strategies/test_deduplicate.py::test_no_duplicates' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_strategies/test_deduplicate.py::test_no_duplicates' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_no_duplicates>
            nextitem: <Function test_validate_rule>
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='strategy' scope='function' baseid='pandaflow/tests/test_strategies/test_deduplicate.py'>
              request: <SubRequest 'strategy' for <Function test_no_duplicates>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_no_duplicates>
            call: <CallInfo when='teardown' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_strategies/test_deduplicate.py::test_no_duplicates' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_strategies/test_deduplicate.py::test_no_duplicates' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_strategies/test_deduplicate.py::test_no_duplicates' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: pandaflow/tests/test_strategies/test_deduplicate.py::test_no_duplicates
            location: ('pandaflow/tests/test_strategies/test_deduplicate.py', 38, 'test_no_duplicates')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_validate_rule>
          nextitem: <Function test_drop_single_column>
        pytest_runtest_logstart [hook]
            nodeid: pandaflow/tests/test_strategies/test_deduplicate.py::test_validate_rule
            location: ('pandaflow/tests/test_strategies/test_deduplicate.py', 45, 'test_validate_rule')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_validate_rule>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='strategy' scope='function' baseid='pandaflow/tests/test_strategies/test_deduplicate.py'>
              request: <SubRequest 'strategy' for <Function test_validate_rule>>
          finish pytest_fixture_setup --> <pandaflow.strategies.deduplicate.DeDuplicateStrategy object at 0x75015e29c510> [hook]
        finish pytest_runtest_setup --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_validate_rule>
            call: <CallInfo when='setup' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_strategies/test_deduplicate.py::test_validate_rule' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_strategies/test_deduplicate.py::test_validate_rule' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_strategies/test_deduplicate.py::test_validate_rule' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_validate_rule>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_validate_rule>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_validate_rule>
            call: <CallInfo when='call' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_strategies/test_deduplicate.py::test_validate_rule' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_strategies/test_deduplicate.py::test_validate_rule' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_strategies/test_deduplicate.py::test_validate_rule' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_validate_rule>
            nextitem: <Function test_drop_single_column>
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='strategy' scope='function' baseid='pandaflow/tests/test_strategies/test_deduplicate.py'>
              request: <SubRequest 'strategy' for <Function test_validate_rule>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_validate_rule>
            call: <CallInfo when='teardown' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_strategies/test_deduplicate.py::test_validate_rule' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_strategies/test_deduplicate.py::test_validate_rule' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_strategies/test_deduplicate.py::test_validate_rule' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: pandaflow/tests/test_strategies/test_deduplicate.py::test_validate_rule
            location: ('pandaflow/tests/test_strategies/test_deduplicate.py', 45, 'test_validate_rule')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_drop_single_column>
          nextitem: <Function test_drop_multiple_columns>
        pytest_runtest_logstart [hook]
            nodeid: pandaflow/tests/test_strategies/test_drop.py::test_drop_single_column
            location: ('pandaflow/tests/test_strategies/test_drop.py', 15, 'test_drop_single_column')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_drop_single_column>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='strategy' scope='function' baseid='pandaflow/tests/test_strategies/test_drop.py'>
              request: <SubRequest 'strategy' for <Function test_drop_single_column>>
          finish pytest_fixture_setup --> <pandaflow.strategies.drop.DropStrategy object at 0x75015e208050> [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='sample_df' scope='function' baseid='pandaflow/tests/test_strategies/test_drop.py'>
              request: <SubRequest 'sample_df' for <Function test_drop_single_column>>
          finish pytest_fixture_setup -->    A  B  C
0  1  4  7
1  2  5  8
2  3  6  9 [hook]
        finish pytest_runtest_setup --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_drop_single_column>
            call: <CallInfo when='setup' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_strategies/test_drop.py::test_drop_single_column' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_strategies/test_drop.py::test_drop_single_column' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_strategies/test_drop.py::test_drop_single_column' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_drop_single_column>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_drop_single_column>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_drop_single_column>
            call: <CallInfo when='call' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_strategies/test_drop.py::test_drop_single_column' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_strategies/test_drop.py::test_drop_single_column' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_strategies/test_drop.py::test_drop_single_column' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_drop_single_column>
            nextitem: <Function test_drop_multiple_columns>
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='sample_df' scope='function' baseid='pandaflow/tests/test_strategies/test_drop.py'>
              request: <SubRequest 'sample_df' for <Function test_drop_single_column>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='strategy' scope='function' baseid='pandaflow/tests/test_strategies/test_drop.py'>
              request: <SubRequest 'strategy' for <Function test_drop_single_column>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_drop_single_column>
            call: <CallInfo when='teardown' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_strategies/test_drop.py::test_drop_single_column' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_strategies/test_drop.py::test_drop_single_column' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_strategies/test_drop.py::test_drop_single_column' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: pandaflow/tests/test_strategies/test_drop.py::test_drop_single_column
            location: ('pandaflow/tests/test_strategies/test_drop.py', 15, 'test_drop_single_column')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_drop_multiple_columns>
          nextitem: <Function test_drop_missing_column_raises>
        pytest_runtest_logstart [hook]
            nodeid: pandaflow/tests/test_strategies/test_drop.py::test_drop_multiple_columns
            location: ('pandaflow/tests/test_strategies/test_drop.py', 22, 'test_drop_multiple_columns')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_drop_multiple_columns>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='strategy' scope='function' baseid='pandaflow/tests/test_strategies/test_drop.py'>
              request: <SubRequest 'strategy' for <Function test_drop_multiple_columns>>
          finish pytest_fixture_setup --> <pandaflow.strategies.drop.DropStrategy object at 0x75015e225f90> [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='sample_df' scope='function' baseid='pandaflow/tests/test_strategies/test_drop.py'>
              request: <SubRequest 'sample_df' for <Function test_drop_multiple_columns>>
          finish pytest_fixture_setup -->    A  B  C
0  1  4  7
1  2  5  8
2  3  6  9 [hook]
        finish pytest_runtest_setup --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_drop_multiple_columns>
            call: <CallInfo when='setup' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_strategies/test_drop.py::test_drop_multiple_columns' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_strategies/test_drop.py::test_drop_multiple_columns' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_strategies/test_drop.py::test_drop_multiple_columns' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_drop_multiple_columns>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_drop_multiple_columns>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_drop_multiple_columns>
            call: <CallInfo when='call' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_strategies/test_drop.py::test_drop_multiple_columns' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_strategies/test_drop.py::test_drop_multiple_columns' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_strategies/test_drop.py::test_drop_multiple_columns' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_drop_multiple_columns>
            nextitem: <Function test_drop_missing_column_raises>
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='sample_df' scope='function' baseid='pandaflow/tests/test_strategies/test_drop.py'>
              request: <SubRequest 'sample_df' for <Function test_drop_multiple_columns>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='strategy' scope='function' baseid='pandaflow/tests/test_strategies/test_drop.py'>
              request: <SubRequest 'strategy' for <Function test_drop_multiple_columns>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_drop_multiple_columns>
            call: <CallInfo when='teardown' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_strategies/test_drop.py::test_drop_multiple_columns' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_strategies/test_drop.py::test_drop_multiple_columns' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_strategies/test_drop.py::test_drop_multiple_columns' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: pandaflow/tests/test_strategies/test_drop.py::test_drop_multiple_columns
            location: ('pandaflow/tests/test_strategies/test_drop.py', 22, 'test_drop_multiple_columns')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_drop_missing_column_raises>
          nextitem: <Function test_validate_rule>
        pytest_runtest_logstart [hook]
            nodeid: pandaflow/tests/test_strategies/test_drop.py::test_drop_missing_column_raises
            location: ('pandaflow/tests/test_strategies/test_drop.py', 28, 'test_drop_missing_column_raises')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_drop_missing_column_raises>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='strategy' scope='function' baseid='pandaflow/tests/test_strategies/test_drop.py'>
              request: <SubRequest 'strategy' for <Function test_drop_missing_column_raises>>
          finish pytest_fixture_setup --> <pandaflow.strategies.drop.DropStrategy object at 0x75015e225a90> [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='sample_df' scope='function' baseid='pandaflow/tests/test_strategies/test_drop.py'>
              request: <SubRequest 'sample_df' for <Function test_drop_missing_column_raises>>
          finish pytest_fixture_setup -->    A  B  C
0  1  4  7
1  2  5  8
2  3  6  9 [hook]
        finish pytest_runtest_setup --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_drop_missing_column_raises>
            call: <CallInfo when='setup' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_strategies/test_drop.py::test_drop_missing_column_raises' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_strategies/test_drop.py::test_drop_missing_column_raises' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_strategies/test_drop.py::test_drop_missing_column_raises' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_drop_missing_column_raises>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_drop_missing_column_raises>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_drop_missing_column_raises>
            call: <CallInfo when='call' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_strategies/test_drop.py::test_drop_missing_column_raises' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_strategies/test_drop.py::test_drop_missing_column_raises' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_strategies/test_drop.py::test_drop_missing_column_raises' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_drop_missing_column_raises>
            nextitem: <Function test_validate_rule>
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='sample_df' scope='function' baseid='pandaflow/tests/test_strategies/test_drop.py'>
              request: <SubRequest 'sample_df' for <Function test_drop_missing_column_raises>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='strategy' scope='function' baseid='pandaflow/tests/test_strategies/test_drop.py'>
              request: <SubRequest 'strategy' for <Function test_drop_missing_column_raises>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_drop_missing_column_raises>
            call: <CallInfo when='teardown' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_strategies/test_drop.py::test_drop_missing_column_raises' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_strategies/test_drop.py::test_drop_missing_column_raises' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_strategies/test_drop.py::test_drop_missing_column_raises' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: pandaflow/tests/test_strategies/test_drop.py::test_drop_missing_column_raises
            location: ('pandaflow/tests/test_strategies/test_drop.py', 28, 'test_drop_missing_column_raises')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_validate_rule>
          nextitem: <Function test_valid_formula_filters_rows>
        pytest_runtest_logstart [hook]
            nodeid: pandaflow/tests/test_strategies/test_drop.py::test_validate_rule
            location: ('pandaflow/tests/test_strategies/test_drop.py', 34, 'test_validate_rule')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_validate_rule>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='strategy' scope='function' baseid='pandaflow/tests/test_strategies/test_drop.py'>
              request: <SubRequest 'strategy' for <Function test_validate_rule>>
          finish pytest_fixture_setup --> <pandaflow.strategies.drop.DropStrategy object at 0x75015e29cc30> [hook]
        finish pytest_runtest_setup --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_validate_rule>
            call: <CallInfo when='setup' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_strategies/test_drop.py::test_validate_rule' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_strategies/test_drop.py::test_validate_rule' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_strategies/test_drop.py::test_validate_rule' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_validate_rule>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_validate_rule>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_validate_rule>
            call: <CallInfo when='call' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_strategies/test_drop.py::test_validate_rule' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_strategies/test_drop.py::test_validate_rule' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_strategies/test_drop.py::test_validate_rule' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_validate_rule>
            nextitem: <Function test_valid_formula_filters_rows>
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='strategy' scope='function' baseid='pandaflow/tests/test_strategies/test_drop.py'>
              request: <SubRequest 'strategy' for <Function test_validate_rule>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_validate_rule>
            call: <CallInfo when='teardown' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_strategies/test_drop.py::test_validate_rule' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_strategies/test_drop.py::test_validate_rule' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_strategies/test_drop.py::test_validate_rule' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: pandaflow/tests/test_strategies/test_drop.py::test_validate_rule
            location: ('pandaflow/tests/test_strategies/test_drop.py', 34, 'test_validate_rule')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_valid_formula_filters_rows>
          nextitem: <Function test_non_boolean_formula_raises_error>
        pytest_runtest_logstart [hook]
            nodeid: pandaflow/tests/test_strategies/test_filter.py::test_valid_formula_filters_rows
            location: ('pandaflow/tests/test_strategies/test_filter.py', 29, 'test_valid_formula_filters_rows')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_valid_formula_filters_rows>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='monkeypatch' scope='function' baseid=''>
              request: <SubRequest 'monkeypatch' for <Function test_valid_formula_filters_rows>>
          finish pytest_fixture_setup --> <_pytest.monkeypatch.MonkeyPatch object at 0x75015e29c180> [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='strategy' scope='function' baseid='pandaflow/tests/test_strategies/test_filter.py'>
              request: <SubRequest 'strategy' for <Function test_valid_formula_filters_rows>>
          finish pytest_fixture_setup --> <pandaflow.strategies.filter.FilterByFormulaStrategy object at 0x75015e2082f0> [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='sample_df' scope='function' baseid='pandaflow/tests/test_strategies/test_filter.py'>
              request: <SubRequest 'sample_df' for <Function test_valid_formula_filters_rows>>
          finish pytest_fixture_setup -->    amount category description
0     100    Sales           A
1     -50   Refund           B
2     200    Sales           C [hook]
        finish pytest_runtest_setup --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_valid_formula_filters_rows>
            call: <CallInfo when='setup' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_strategies/test_filter.py::test_valid_formula_filters_rows' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_strategies/test_filter.py::test_valid_formula_filters_rows' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_strategies/test_filter.py::test_valid_formula_filters_rows' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_valid_formula_filters_rows>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_valid_formula_filters_rows>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_valid_formula_filters_rows>
            call: <CallInfo when='call' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_strategies/test_filter.py::test_valid_formula_filters_rows' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_strategies/test_filter.py::test_valid_formula_filters_rows' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_strategies/test_filter.py::test_valid_formula_filters_rows' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_valid_formula_filters_rows>
            nextitem: <Function test_non_boolean_formula_raises_error>
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='sample_df' scope='function' baseid='pandaflow/tests/test_strategies/test_filter.py'>
              request: <SubRequest 'sample_df' for <Function test_valid_formula_filters_rows>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='strategy' scope='function' baseid='pandaflow/tests/test_strategies/test_filter.py'>
              request: <SubRequest 'strategy' for <Function test_valid_formula_filters_rows>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='strategy' scope='function' baseid='pandaflow/tests/test_strategies/test_filter.py'>
              request: <SubRequest 'strategy' for <Function test_valid_formula_filters_rows>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='monkeypatch' scope='function' baseid=''>
              request: <SubRequest 'monkeypatch' for <Function test_valid_formula_filters_rows>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_valid_formula_filters_rows>
            call: <CallInfo when='teardown' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_strategies/test_filter.py::test_valid_formula_filters_rows' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_strategies/test_filter.py::test_valid_formula_filters_rows' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_strategies/test_filter.py::test_valid_formula_filters_rows' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: pandaflow/tests/test_strategies/test_filter.py::test_valid_formula_filters_rows
            location: ('pandaflow/tests/test_strategies/test_filter.py', 29, 'test_valid_formula_filters_rows')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_non_boolean_formula_raises_error>
          nextitem: <Function test_field_not_in_df_does_not_format>
        pytest_runtest_logstart [hook]
            nodeid: pandaflow/tests/test_strategies/test_filter.py::test_non_boolean_formula_raises_error
            location: ('pandaflow/tests/test_strategies/test_filter.py', 40, 'test_non_boolean_formula_raises_error')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_non_boolean_formula_raises_error>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='monkeypatch' scope='function' baseid=''>
              request: <SubRequest 'monkeypatch' for <Function test_non_boolean_formula_raises_error>>
          finish pytest_fixture_setup --> <_pytest.monkeypatch.MonkeyPatch object at 0x75015e29c770> [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='strategy' scope='function' baseid='pandaflow/tests/test_strategies/test_filter.py'>
              request: <SubRequest 'strategy' for <Function test_non_boolean_formula_raises_error>>
          finish pytest_fixture_setup --> <pandaflow.strategies.filter.FilterByFormulaStrategy object at 0x75015e2260d0> [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='sample_df' scope='function' baseid='pandaflow/tests/test_strategies/test_filter.py'>
              request: <SubRequest 'sample_df' for <Function test_non_boolean_formula_raises_error>>
          finish pytest_fixture_setup -->    amount category description
0     100    Sales           A
1     -50   Refund           B
2     200    Sales           C [hook]
        finish pytest_runtest_setup --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_non_boolean_formula_raises_error>
            call: <CallInfo when='setup' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_strategies/test_filter.py::test_non_boolean_formula_raises_error' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_strategies/test_filter.py::test_non_boolean_formula_raises_error' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_strategies/test_filter.py::test_non_boolean_formula_raises_error' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_non_boolean_formula_raises_error>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_non_boolean_formula_raises_error>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_non_boolean_formula_raises_error>
            call: <CallInfo when='call' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_strategies/test_filter.py::test_non_boolean_formula_raises_error' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_strategies/test_filter.py::test_non_boolean_formula_raises_error' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_strategies/test_filter.py::test_non_boolean_formula_raises_error' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_non_boolean_formula_raises_error>
            nextitem: <Function test_field_not_in_df_does_not_format>
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='sample_df' scope='function' baseid='pandaflow/tests/test_strategies/test_filter.py'>
              request: <SubRequest 'sample_df' for <Function test_non_boolean_formula_raises_error>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='strategy' scope='function' baseid='pandaflow/tests/test_strategies/test_filter.py'>
              request: <SubRequest 'strategy' for <Function test_non_boolean_formula_raises_error>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='strategy' scope='function' baseid='pandaflow/tests/test_strategies/test_filter.py'>
              request: <SubRequest 'strategy' for <Function test_non_boolean_formula_raises_error>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='monkeypatch' scope='function' baseid=''>
              request: <SubRequest 'monkeypatch' for <Function test_non_boolean_formula_raises_error>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_non_boolean_formula_raises_error>
            call: <CallInfo when='teardown' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_strategies/test_filter.py::test_non_boolean_formula_raises_error' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_strategies/test_filter.py::test_non_boolean_formula_raises_error' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_strategies/test_filter.py::test_non_boolean_formula_raises_error' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: pandaflow/tests/test_strategies/test_filter.py::test_non_boolean_formula_raises_error
            location: ('pandaflow/tests/test_strategies/test_filter.py', 40, 'test_non_boolean_formula_raises_error')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_field_not_in_df_does_not_format>
          nextitem: <Function test_formula_with_multiple_conditions>
        pytest_runtest_logstart [hook]
            nodeid: pandaflow/tests/test_strategies/test_filter.py::test_field_not_in_df_does_not_format
            location: ('pandaflow/tests/test_strategies/test_filter.py', 50, 'test_field_not_in_df_does_not_format')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_field_not_in_df_does_not_format>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='monkeypatch' scope='function' baseid=''>
              request: <SubRequest 'monkeypatch' for <Function test_field_not_in_df_does_not_format>>
          finish pytest_fixture_setup --> <_pytest.monkeypatch.MonkeyPatch object at 0x75015e3a9130> [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='strategy' scope='function' baseid='pandaflow/tests/test_strategies/test_filter.py'>
              request: <SubRequest 'strategy' for <Function test_field_not_in_df_does_not_format>>
          finish pytest_fixture_setup --> <pandaflow.strategies.filter.FilterByFormulaStrategy object at 0x75015e225590> [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='sample_df' scope='function' baseid='pandaflow/tests/test_strategies/test_filter.py'>
              request: <SubRequest 'sample_df' for <Function test_field_not_in_df_does_not_format>>
          finish pytest_fixture_setup -->    amount category description
0     100    Sales           A
1     -50   Refund           B
2     200    Sales           C [hook]
        finish pytest_runtest_setup --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_field_not_in_df_does_not_format>
            call: <CallInfo when='setup' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_strategies/test_filter.py::test_field_not_in_df_does_not_format' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_strategies/test_filter.py::test_field_not_in_df_does_not_format' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_strategies/test_filter.py::test_field_not_in_df_does_not_format' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_field_not_in_df_does_not_format>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_field_not_in_df_does_not_format>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_field_not_in_df_does_not_format>
            call: <CallInfo when='call' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_strategies/test_filter.py::test_field_not_in_df_does_not_format' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_strategies/test_filter.py::test_field_not_in_df_does_not_format' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_strategies/test_filter.py::test_field_not_in_df_does_not_format' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_field_not_in_df_does_not_format>
            nextitem: <Function test_formula_with_multiple_conditions>
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='sample_df' scope='function' baseid='pandaflow/tests/test_strategies/test_filter.py'>
              request: <SubRequest 'sample_df' for <Function test_field_not_in_df_does_not_format>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='strategy' scope='function' baseid='pandaflow/tests/test_strategies/test_filter.py'>
              request: <SubRequest 'strategy' for <Function test_field_not_in_df_does_not_format>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='strategy' scope='function' baseid='pandaflow/tests/test_strategies/test_filter.py'>
              request: <SubRequest 'strategy' for <Function test_field_not_in_df_does_not_format>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='monkeypatch' scope='function' baseid=''>
              request: <SubRequest 'monkeypatch' for <Function test_field_not_in_df_does_not_format>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_field_not_in_df_does_not_format>
            call: <CallInfo when='teardown' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_strategies/test_filter.py::test_field_not_in_df_does_not_format' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_strategies/test_filter.py::test_field_not_in_df_does_not_format' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_strategies/test_filter.py::test_field_not_in_df_does_not_format' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: pandaflow/tests/test_strategies/test_filter.py::test_field_not_in_df_does_not_format
            location: ('pandaflow/tests/test_strategies/test_filter.py', 50, 'test_field_not_in_df_does_not_format')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_formula_with_multiple_conditions>
          nextitem: <Function test_validate_rule>
        pytest_runtest_logstart [hook]
            nodeid: pandaflow/tests/test_strategies/test_filter.py::test_formula_with_multiple_conditions
            location: ('pandaflow/tests/test_strategies/test_filter.py', 56, 'test_formula_with_multiple_conditions')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_formula_with_multiple_conditions>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='monkeypatch' scope='function' baseid=''>
              request: <SubRequest 'monkeypatch' for <Function test_formula_with_multiple_conditions>>
          finish pytest_fixture_setup --> <_pytest.monkeypatch.MonkeyPatch object at 0x75015e3cd040> [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='strategy' scope='function' baseid='pandaflow/tests/test_strategies/test_filter.py'>
              request: <SubRequest 'strategy' for <Function test_formula_with_multiple_conditions>>
          finish pytest_fixture_setup --> <pandaflow.strategies.filter.FilterByFormulaStrategy object at 0x75015e29cc30> [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='sample_df' scope='function' baseid='pandaflow/tests/test_strategies/test_filter.py'>
              request: <SubRequest 'sample_df' for <Function test_formula_with_multiple_conditions>>
          finish pytest_fixture_setup -->    amount category description
0     100    Sales           A
1     -50   Refund           B
2     200    Sales           C [hook]
        finish pytest_runtest_setup --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_formula_with_multiple_conditions>
            call: <CallInfo when='setup' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_strategies/test_filter.py::test_formula_with_multiple_conditions' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_strategies/test_filter.py::test_formula_with_multiple_conditions' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_strategies/test_filter.py::test_formula_with_multiple_conditions' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_formula_with_multiple_conditions>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_formula_with_multiple_conditions>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_formula_with_multiple_conditions>
            call: <CallInfo when='call' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_strategies/test_filter.py::test_formula_with_multiple_conditions' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_strategies/test_filter.py::test_formula_with_multiple_conditions' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_strategies/test_filter.py::test_formula_with_multiple_conditions' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_formula_with_multiple_conditions>
            nextitem: <Function test_validate_rule>
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='sample_df' scope='function' baseid='pandaflow/tests/test_strategies/test_filter.py'>
              request: <SubRequest 'sample_df' for <Function test_formula_with_multiple_conditions>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='strategy' scope='function' baseid='pandaflow/tests/test_strategies/test_filter.py'>
              request: <SubRequest 'strategy' for <Function test_formula_with_multiple_conditions>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='strategy' scope='function' baseid='pandaflow/tests/test_strategies/test_filter.py'>
              request: <SubRequest 'strategy' for <Function test_formula_with_multiple_conditions>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='monkeypatch' scope='function' baseid=''>
              request: <SubRequest 'monkeypatch' for <Function test_formula_with_multiple_conditions>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_formula_with_multiple_conditions>
            call: <CallInfo when='teardown' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_strategies/test_filter.py::test_formula_with_multiple_conditions' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_strategies/test_filter.py::test_formula_with_multiple_conditions' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_strategies/test_filter.py::test_formula_with_multiple_conditions' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: pandaflow/tests/test_strategies/test_filter.py::test_formula_with_multiple_conditions
            location: ('pandaflow/tests/test_strategies/test_filter.py', 56, 'test_formula_with_multiple_conditions')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_validate_rule>
          nextitem: <Function test_hash_generation>
        pytest_runtest_logstart [hook]
            nodeid: pandaflow/tests/test_strategies/test_filter.py::test_validate_rule
            location: ('pandaflow/tests/test_strategies/test_filter.py', 67, 'test_validate_rule')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_validate_rule>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='monkeypatch' scope='function' baseid=''>
              request: <SubRequest 'monkeypatch' for <Function test_validate_rule>>
          finish pytest_fixture_setup --> <_pytest.monkeypatch.MonkeyPatch object at 0x75015e3ccf30> [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='strategy' scope='function' baseid='pandaflow/tests/test_strategies/test_filter.py'>
              request: <SubRequest 'strategy' for <Function test_validate_rule>>
          finish pytest_fixture_setup --> <pandaflow.strategies.filter.FilterByFormulaStrategy object at 0x75015e29c8a0> [hook]
        finish pytest_runtest_setup --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_validate_rule>
            call: <CallInfo when='setup' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_strategies/test_filter.py::test_validate_rule' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_strategies/test_filter.py::test_validate_rule' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_strategies/test_filter.py::test_validate_rule' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_validate_rule>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_validate_rule>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_validate_rule>
            call: <CallInfo when='call' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_strategies/test_filter.py::test_validate_rule' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_strategies/test_filter.py::test_validate_rule' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_strategies/test_filter.py::test_validate_rule' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_validate_rule>
            nextitem: <Function test_hash_generation>
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='strategy' scope='function' baseid='pandaflow/tests/test_strategies/test_filter.py'>
              request: <SubRequest 'strategy' for <Function test_validate_rule>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='strategy' scope='function' baseid='pandaflow/tests/test_strategies/test_filter.py'>
              request: <SubRequest 'strategy' for <Function test_validate_rule>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='monkeypatch' scope='function' baseid=''>
              request: <SubRequest 'monkeypatch' for <Function test_validate_rule>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_validate_rule>
            call: <CallInfo when='teardown' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_strategies/test_filter.py::test_validate_rule' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_strategies/test_filter.py::test_validate_rule' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_strategies/test_filter.py::test_validate_rule' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: pandaflow/tests/test_strategies/test_filter.py::test_validate_rule
            location: ('pandaflow/tests/test_strategies/test_filter.py', 67, 'test_validate_rule')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_hash_generation>
          nextitem: <Function test_missing_column_raises>
        pytest_runtest_logstart [hook]
            nodeid: pandaflow/tests/test_strategies/test_hash.py::test_hash_generation
            location: ('pandaflow/tests/test_strategies/test_hash.py', 16, 'test_hash_generation')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_hash_generation>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='strategy' scope='function' baseid='pandaflow/tests/test_strategies/test_hash.py'>
              request: <SubRequest 'strategy' for <Function test_hash_generation>>
          finish pytest_fixture_setup --> <pandaflow.strategies.hash.HashStrategy object at 0x75015e2082f0> [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='sample_df' scope='function' baseid='pandaflow/tests/test_strategies/test_hash.py'>
              request: <SubRequest 'sample_df' for <Function test_hash_generation>>
          finish pytest_fixture_setup -->      A    B
0  foo  123
1  bar  456
2  baz  789 [hook]
        finish pytest_runtest_setup --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_hash_generation>
            call: <CallInfo when='setup' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_strategies/test_hash.py::test_hash_generation' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_strategies/test_hash.py::test_hash_generation' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_strategies/test_hash.py::test_hash_generation' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_hash_generation>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_hash_generation>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_hash_generation>
            call: <CallInfo when='call' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_strategies/test_hash.py::test_hash_generation' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_strategies/test_hash.py::test_hash_generation' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_strategies/test_hash.py::test_hash_generation' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_hash_generation>
            nextitem: <Function test_missing_column_raises>
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='sample_df' scope='function' baseid='pandaflow/tests/test_strategies/test_hash.py'>
              request: <SubRequest 'sample_df' for <Function test_hash_generation>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='strategy' scope='function' baseid='pandaflow/tests/test_strategies/test_hash.py'>
              request: <SubRequest 'strategy' for <Function test_hash_generation>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_hash_generation>
            call: <CallInfo when='teardown' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_strategies/test_hash.py::test_hash_generation' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_strategies/test_hash.py::test_hash_generation' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_strategies/test_hash.py::test_hash_generation' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: pandaflow/tests/test_strategies/test_hash.py::test_hash_generation
            location: ('pandaflow/tests/test_strategies/test_hash.py', 16, 'test_hash_generation')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_missing_column_raises>
          nextitem: <Function test_empty_string_handling>
        pytest_runtest_logstart [hook]
            nodeid: pandaflow/tests/test_strategies/test_hash.py::test_missing_column_raises
            location: ('pandaflow/tests/test_strategies/test_hash.py', 33, 'test_missing_column_raises')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_missing_column_raises>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='strategy' scope='function' baseid='pandaflow/tests/test_strategies/test_hash.py'>
              request: <SubRequest 'strategy' for <Function test_missing_column_raises>>
          finish pytest_fixture_setup --> <pandaflow.strategies.hash.HashStrategy object at 0x75015e225a90> [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='sample_df' scope='function' baseid='pandaflow/tests/test_strategies/test_hash.py'>
              request: <SubRequest 'sample_df' for <Function test_missing_column_raises>>
          finish pytest_fixture_setup -->      A    B
0  foo  123
1  bar  456
2  baz  789 [hook]
        finish pytest_runtest_setup --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_missing_column_raises>
            call: <CallInfo when='setup' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_strategies/test_hash.py::test_missing_column_raises' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_strategies/test_hash.py::test_missing_column_raises' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_strategies/test_hash.py::test_missing_column_raises' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_missing_column_raises>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_missing_column_raises>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_missing_column_raises>
            call: <CallInfo when='call' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_strategies/test_hash.py::test_missing_column_raises' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_strategies/test_hash.py::test_missing_column_raises' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_strategies/test_hash.py::test_missing_column_raises' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_missing_column_raises>
            nextitem: <Function test_empty_string_handling>
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='sample_df' scope='function' baseid='pandaflow/tests/test_strategies/test_hash.py'>
              request: <SubRequest 'sample_df' for <Function test_missing_column_raises>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='strategy' scope='function' baseid='pandaflow/tests/test_strategies/test_hash.py'>
              request: <SubRequest 'strategy' for <Function test_missing_column_raises>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_missing_column_raises>
            call: <CallInfo when='teardown' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_strategies/test_hash.py::test_missing_column_raises' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_strategies/test_hash.py::test_missing_column_raises' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_strategies/test_hash.py::test_missing_column_raises' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: pandaflow/tests/test_strategies/test_hash.py::test_missing_column_raises
            location: ('pandaflow/tests/test_strategies/test_hash.py', 33, 'test_missing_column_raises')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_empty_string_handling>
          nextitem: <Function test_validate_rule>
        pytest_runtest_logstart [hook]
            nodeid: pandaflow/tests/test_strategies/test_hash.py::test_empty_string_handling
            location: ('pandaflow/tests/test_strategies/test_hash.py', 44, 'test_empty_string_handling')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_empty_string_handling>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='strategy' scope='function' baseid='pandaflow/tests/test_strategies/test_hash.py'>
              request: <SubRequest 'strategy' for <Function test_empty_string_handling>>
          finish pytest_fixture_setup --> <pandaflow.strategies.hash.HashStrategy object at 0x75015e2265d0> [hook]
        finish pytest_runtest_setup --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_empty_string_handling>
            call: <CallInfo when='setup' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_strategies/test_hash.py::test_empty_string_handling' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_strategies/test_hash.py::test_empty_string_handling' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_strategies/test_hash.py::test_empty_string_handling' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_empty_string_handling>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_empty_string_handling>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_empty_string_handling>
            call: <CallInfo when='call' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_strategies/test_hash.py::test_empty_string_handling' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_strategies/test_hash.py::test_empty_string_handling' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_strategies/test_hash.py::test_empty_string_handling' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_empty_string_handling>
            nextitem: <Function test_validate_rule>
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='strategy' scope='function' baseid='pandaflow/tests/test_strategies/test_hash.py'>
              request: <SubRequest 'strategy' for <Function test_empty_string_handling>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_empty_string_handling>
            call: <CallInfo when='teardown' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_strategies/test_hash.py::test_empty_string_handling' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_strategies/test_hash.py::test_empty_string_handling' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_strategies/test_hash.py::test_empty_string_handling' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: pandaflow/tests/test_strategies/test_hash.py::test_empty_string_handling
            location: ('pandaflow/tests/test_strategies/test_hash.py', 44, 'test_empty_string_handling')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_validate_rule>
          nextitem: <Function test_merge_multiple_columns_with_separator>
        pytest_runtest_logstart [hook]
            nodeid: pandaflow/tests/test_strategies/test_hash.py::test_validate_rule
            location: ('pandaflow/tests/test_strategies/test_hash.py', 61, 'test_validate_rule')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_validate_rule>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='strategy' scope='function' baseid='pandaflow/tests/test_strategies/test_hash.py'>
              request: <SubRequest 'strategy' for <Function test_validate_rule>>
          finish pytest_fixture_setup --> <pandaflow.strategies.hash.HashStrategy object at 0x75015e29cb00> [hook]
        finish pytest_runtest_setup --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_validate_rule>
            call: <CallInfo when='setup' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_strategies/test_hash.py::test_validate_rule' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_strategies/test_hash.py::test_validate_rule' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_strategies/test_hash.py::test_validate_rule' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_validate_rule>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_validate_rule>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_validate_rule>
            call: <CallInfo when='call' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_strategies/test_hash.py::test_validate_rule' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_strategies/test_hash.py::test_validate_rule' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_strategies/test_hash.py::test_validate_rule' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_validate_rule>
            nextitem: <Function test_merge_multiple_columns_with_separator>
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='strategy' scope='function' baseid='pandaflow/tests/test_strategies/test_hash.py'>
              request: <SubRequest 'strategy' for <Function test_validate_rule>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_validate_rule>
            call: <CallInfo when='teardown' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_strategies/test_hash.py::test_validate_rule' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_strategies/test_hash.py::test_validate_rule' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_strategies/test_hash.py::test_validate_rule' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: pandaflow/tests/test_strategies/test_hash.py::test_validate_rule
            location: ('pandaflow/tests/test_strategies/test_hash.py', 61, 'test_validate_rule')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_merge_multiple_columns_with_separator>
          nextitem: <Function test_merge_with_nan_like_strings>
        pytest_runtest_logstart [hook]
            nodeid: pandaflow/tests/test_strategies/test_merge.py::test_merge_multiple_columns_with_separator
            location: ('pandaflow/tests/test_strategies/test_merge.py', 22, 'test_merge_multiple_columns_with_separator')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_merge_multiple_columns_with_separator>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='strategy' scope='function' baseid='pandaflow/tests/test_strategies/test_merge.py'>
              request: <SubRequest 'strategy' for <Function test_merge_multiple_columns_with_separator>>
          finish pytest_fixture_setup --> <pandaflow.strategies.merge.MergeStrategy object at 0x75015e2082f0> [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='sample_df' scope='function' baseid='pandaflow/tests/test_strategies/test_merge.py'>
              request: <SubRequest 'sample_df' for <Function test_merge_multiple_columns_with_separator>>
          finish pytest_fixture_setup -->      first   last   role  note
0    Alice  Smith  Admin   NaN
1      Bob  Jones   User  None
2  Charlie  Brown  Guest   nan [hook]
        finish pytest_runtest_setup --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_merge_multiple_columns_with_separator>
            call: <CallInfo when='setup' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_strategies/test_merge.py::test_merge_multiple_columns_with_separator' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_strategies/test_merge.py::test_merge_multiple_columns_with_separator' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_strategies/test_merge.py::test_merge_multiple_columns_with_separator' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_merge_multiple_columns_with_separator>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_merge_multiple_columns_with_separator>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_merge_multiple_columns_with_separator>
            call: <CallInfo when='call' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_strategies/test_merge.py::test_merge_multiple_columns_with_separator' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_strategies/test_merge.py::test_merge_multiple_columns_with_separator' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_strategies/test_merge.py::test_merge_multiple_columns_with_separator' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_merge_multiple_columns_with_separator>
            nextitem: <Function test_merge_with_nan_like_strings>
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='sample_df' scope='function' baseid='pandaflow/tests/test_strategies/test_merge.py'>
              request: <SubRequest 'sample_df' for <Function test_merge_multiple_columns_with_separator>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='strategy' scope='function' baseid='pandaflow/tests/test_strategies/test_merge.py'>
              request: <SubRequest 'strategy' for <Function test_merge_multiple_columns_with_separator>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_merge_multiple_columns_with_separator>
            call: <CallInfo when='teardown' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_strategies/test_merge.py::test_merge_multiple_columns_with_separator' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_strategies/test_merge.py::test_merge_multiple_columns_with_separator' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_strategies/test_merge.py::test_merge_multiple_columns_with_separator' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: pandaflow/tests/test_strategies/test_merge.py::test_merge_multiple_columns_with_separator
            location: ('pandaflow/tests/test_strategies/test_merge.py', 22, 'test_merge_multiple_columns_with_separator')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_merge_with_nan_like_strings>
          nextitem: <Function test_merge_with_source_as_string>
        pytest_runtest_logstart [hook]
            nodeid: pandaflow/tests/test_strategies/test_merge.py::test_merge_with_nan_like_strings
            location: ('pandaflow/tests/test_strategies/test_merge.py', 34, 'test_merge_with_nan_like_strings')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_merge_with_nan_like_strings>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='strategy' scope='function' baseid='pandaflow/tests/test_strategies/test_merge.py'>
              request: <SubRequest 'strategy' for <Function test_merge_with_nan_like_strings>>
          finish pytest_fixture_setup --> <pandaflow.strategies.merge.MergeStrategy object at 0x75015e225590> [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='sample_df' scope='function' baseid='pandaflow/tests/test_strategies/test_merge.py'>
              request: <SubRequest 'sample_df' for <Function test_merge_with_nan_like_strings>>
          finish pytest_fixture_setup -->      first   last   role  note
0    Alice  Smith  Admin   NaN
1      Bob  Jones   User  None
2  Charlie  Brown  Guest   nan [hook]
        finish pytest_runtest_setup --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_merge_with_nan_like_strings>
            call: <CallInfo when='setup' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_strategies/test_merge.py::test_merge_with_nan_like_strings' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_strategies/test_merge.py::test_merge_with_nan_like_strings' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_strategies/test_merge.py::test_merge_with_nan_like_strings' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_merge_with_nan_like_strings>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_merge_with_nan_like_strings>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_merge_with_nan_like_strings>
            call: <CallInfo when='call' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_strategies/test_merge.py::test_merge_with_nan_like_strings' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_strategies/test_merge.py::test_merge_with_nan_like_strings' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_strategies/test_merge.py::test_merge_with_nan_like_strings' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_merge_with_nan_like_strings>
            nextitem: <Function test_merge_with_source_as_string>
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='sample_df' scope='function' baseid='pandaflow/tests/test_strategies/test_merge.py'>
              request: <SubRequest 'sample_df' for <Function test_merge_with_nan_like_strings>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='strategy' scope='function' baseid='pandaflow/tests/test_strategies/test_merge.py'>
              request: <SubRequest 'strategy' for <Function test_merge_with_nan_like_strings>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_merge_with_nan_like_strings>
            call: <CallInfo when='teardown' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_strategies/test_merge.py::test_merge_with_nan_like_strings' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_strategies/test_merge.py::test_merge_with_nan_like_strings' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_strategies/test_merge.py::test_merge_with_nan_like_strings' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: pandaflow/tests/test_strategies/test_merge.py::test_merge_with_nan_like_strings
            location: ('pandaflow/tests/test_strategies/test_merge.py', 34, 'test_merge_with_nan_like_strings')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_merge_with_source_as_string>
          nextitem: <Function test_merge_missing_column_raises>
        pytest_runtest_logstart [hook]
            nodeid: pandaflow/tests/test_strategies/test_merge.py::test_merge_with_source_as_string
            location: ('pandaflow/tests/test_strategies/test_merge.py', 46, 'test_merge_with_source_as_string')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_merge_with_source_as_string>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='strategy' scope='function' baseid='pandaflow/tests/test_strategies/test_merge.py'>
              request: <SubRequest 'strategy' for <Function test_merge_with_source_as_string>>
          finish pytest_fixture_setup --> <pandaflow.strategies.merge.MergeStrategy object at 0x75015e2260d0> [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='sample_df' scope='function' baseid='pandaflow/tests/test_strategies/test_merge.py'>
              request: <SubRequest 'sample_df' for <Function test_merge_with_source_as_string>>
          finish pytest_fixture_setup -->      first   last   role  note
0    Alice  Smith  Admin   NaN
1      Bob  Jones   User  None
2  Charlie  Brown  Guest   nan [hook]
        finish pytest_runtest_setup --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_merge_with_source_as_string>
            call: <CallInfo when='setup' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_strategies/test_merge.py::test_merge_with_source_as_string' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_strategies/test_merge.py::test_merge_with_source_as_string' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_strategies/test_merge.py::test_merge_with_source_as_string' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_merge_with_source_as_string>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_merge_with_source_as_string>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_merge_with_source_as_string>
            call: <CallInfo when='call' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_strategies/test_merge.py::test_merge_with_source_as_string' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_strategies/test_merge.py::test_merge_with_source_as_string' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_strategies/test_merge.py::test_merge_with_source_as_string' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_merge_with_source_as_string>
            nextitem: <Function test_merge_missing_column_raises>
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='sample_df' scope='function' baseid='pandaflow/tests/test_strategies/test_merge.py'>
              request: <SubRequest 'sample_df' for <Function test_merge_with_source_as_string>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='strategy' scope='function' baseid='pandaflow/tests/test_strategies/test_merge.py'>
              request: <SubRequest 'strategy' for <Function test_merge_with_source_as_string>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_merge_with_source_as_string>
            call: <CallInfo when='teardown' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_strategies/test_merge.py::test_merge_with_source_as_string' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_strategies/test_merge.py::test_merge_with_source_as_string' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_strategies/test_merge.py::test_merge_with_source_as_string' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: pandaflow/tests/test_strategies/test_merge.py::test_merge_with_source_as_string
            location: ('pandaflow/tests/test_strategies/test_merge.py', 46, 'test_merge_with_source_as_string')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_merge_missing_column_raises>
          nextitem: <Function test_validate_rule>
        pytest_runtest_logstart [hook]
            nodeid: pandaflow/tests/test_strategies/test_merge.py::test_merge_missing_column_raises
            location: ('pandaflow/tests/test_strategies/test_merge.py', 52, 'test_merge_missing_column_raises')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_merge_missing_column_raises>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='strategy' scope='function' baseid='pandaflow/tests/test_strategies/test_merge.py'>
              request: <SubRequest 'strategy' for <Function test_merge_missing_column_raises>>
          finish pytest_fixture_setup --> <pandaflow.strategies.merge.MergeStrategy object at 0x75015e29d220> [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='sample_df' scope='function' baseid='pandaflow/tests/test_strategies/test_merge.py'>
              request: <SubRequest 'sample_df' for <Function test_merge_missing_column_raises>>
          finish pytest_fixture_setup -->      first   last   role  note
0    Alice  Smith  Admin   NaN
1      Bob  Jones   User  None
2  Charlie  Brown  Guest   nan [hook]
        finish pytest_runtest_setup --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_merge_missing_column_raises>
            call: <CallInfo when='setup' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_strategies/test_merge.py::test_merge_missing_column_raises' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_strategies/test_merge.py::test_merge_missing_column_raises' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_strategies/test_merge.py::test_merge_missing_column_raises' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_merge_missing_column_raises>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_merge_missing_column_raises>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_merge_missing_column_raises>
            call: <CallInfo when='call' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_strategies/test_merge.py::test_merge_missing_column_raises' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_strategies/test_merge.py::test_merge_missing_column_raises' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_strategies/test_merge.py::test_merge_missing_column_raises' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_merge_missing_column_raises>
            nextitem: <Function test_validate_rule>
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='sample_df' scope='function' baseid='pandaflow/tests/test_strategies/test_merge.py'>
              request: <SubRequest 'sample_df' for <Function test_merge_missing_column_raises>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='strategy' scope='function' baseid='pandaflow/tests/test_strategies/test_merge.py'>
              request: <SubRequest 'strategy' for <Function test_merge_missing_column_raises>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_merge_missing_column_raises>
            call: <CallInfo when='teardown' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_strategies/test_merge.py::test_merge_missing_column_raises' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_strategies/test_merge.py::test_merge_missing_column_raises' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_strategies/test_merge.py::test_merge_missing_column_raises' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: pandaflow/tests/test_strategies/test_merge.py::test_merge_missing_column_raises
            location: ('pandaflow/tests/test_strategies/test_merge.py', 52, 'test_merge_missing_column_raises')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_validate_rule>
          nextitem: <Function test_merge_with_formula>
        pytest_runtest_logstart [hook]
            nodeid: pandaflow/tests/test_strategies/test_merge.py::test_validate_rule
            location: ('pandaflow/tests/test_strategies/test_merge.py', 58, 'test_validate_rule')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_validate_rule>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='strategy' scope='function' baseid='pandaflow/tests/test_strategies/test_merge.py'>
              request: <SubRequest 'strategy' for <Function test_validate_rule>>
          finish pytest_fixture_setup --> <pandaflow.strategies.merge.MergeStrategy object at 0x75015e29c050> [hook]
        finish pytest_runtest_setup --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_validate_rule>
            call: <CallInfo when='setup' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_strategies/test_merge.py::test_validate_rule' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_strategies/test_merge.py::test_validate_rule' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_strategies/test_merge.py::test_validate_rule' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_validate_rule>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_validate_rule>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_validate_rule>
            call: <CallInfo when='call' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_strategies/test_merge.py::test_validate_rule' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_strategies/test_merge.py::test_validate_rule' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_strategies/test_merge.py::test_validate_rule' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_validate_rule>
            nextitem: <Function test_merge_with_formula>
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='strategy' scope='function' baseid='pandaflow/tests/test_strategies/test_merge.py'>
              request: <SubRequest 'strategy' for <Function test_validate_rule>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_validate_rule>
            call: <CallInfo when='teardown' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_strategies/test_merge.py::test_validate_rule' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_strategies/test_merge.py::test_validate_rule' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_strategies/test_merge.py::test_validate_rule' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: pandaflow/tests/test_strategies/test_merge.py::test_validate_rule
            location: ('pandaflow/tests/test_strategies/test_merge.py', 58, 'test_validate_rule')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_merge_with_formula>
          nextitem: <Function test_merge_with_source_columns>
        pytest_runtest_logstart [hook]
            nodeid: pandaflow/tests/test_strategies/test_mergestring.py::test_merge_with_formula
            location: ('pandaflow/tests/test_strategies/test_mergestring.py', 21, 'test_merge_with_formula')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_merge_with_formula>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='monkeypatch' scope='function' baseid=''>
              request: <SubRequest 'monkeypatch' for <Function test_merge_with_formula>>
          finish pytest_fixture_setup --> <_pytest.monkeypatch.MonkeyPatch object at 0x75015e3d2250> [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='strategy' scope='function' baseid='pandaflow/tests/test_strategies/test_mergestring.py'>
              request: <SubRequest 'strategy' for <Function test_merge_with_formula>>
          finish pytest_fixture_setup --> <pandaflow.strategies.mergestring.MergeStringStrategy object at 0x75015e20a120> [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='sample_df' scope='function' baseid='pandaflow/tests/test_strategies/test_mergestring.py'>
              request: <SubRequest 'sample_df' for <Function test_merge_with_formula>>
          finish pytest_fixture_setup -->   first_name last_name   role
0      Alice     Smith  Admin
1        Bob     Jones   User
2    Charlie     Brown  Guest [hook]
        finish pytest_runtest_setup --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_merge_with_formula>
            call: <CallInfo when='setup' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_strategies/test_mergestring.py::test_merge_with_formula' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_strategies/test_mergestring.py::test_merge_with_formula' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_strategies/test_mergestring.py::test_merge_with_formula' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_merge_with_formula>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_merge_with_formula>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_merge_with_formula>
            call: <CallInfo when='call' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_strategies/test_mergestring.py::test_merge_with_formula' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_strategies/test_mergestring.py::test_merge_with_formula' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_strategies/test_mergestring.py::test_merge_with_formula' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_merge_with_formula>
            nextitem: <Function test_merge_with_source_columns>
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='sample_df' scope='function' baseid='pandaflow/tests/test_strategies/test_mergestring.py'>
              request: <SubRequest 'sample_df' for <Function test_merge_with_formula>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='strategy' scope='function' baseid='pandaflow/tests/test_strategies/test_mergestring.py'>
              request: <SubRequest 'strategy' for <Function test_merge_with_formula>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='strategy' scope='function' baseid='pandaflow/tests/test_strategies/test_mergestring.py'>
              request: <SubRequest 'strategy' for <Function test_merge_with_formula>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='monkeypatch' scope='function' baseid=''>
              request: <SubRequest 'monkeypatch' for <Function test_merge_with_formula>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_merge_with_formula>
            call: <CallInfo when='teardown' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_strategies/test_mergestring.py::test_merge_with_formula' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_strategies/test_mergestring.py::test_merge_with_formula' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_strategies/test_mergestring.py::test_merge_with_formula' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: pandaflow/tests/test_strategies/test_mergestring.py::test_merge_with_formula
            location: ('pandaflow/tests/test_strategies/test_mergestring.py', 21, 'test_merge_with_formula')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_merge_with_source_columns>
          nextitem: <Function test_missing_formula_and_source_raises>
        pytest_runtest_logstart [hook]
            nodeid: pandaflow/tests/test_strategies/test_mergestring.py::test_merge_with_source_columns
            location: ('pandaflow/tests/test_strategies/test_mergestring.py', 28, 'test_merge_with_source_columns')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_merge_with_source_columns>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='monkeypatch' scope='function' baseid=''>
              request: <SubRequest 'monkeypatch' for <Function test_merge_with_source_columns>>
          finish pytest_fixture_setup --> <_pytest.monkeypatch.MonkeyPatch object at 0x75015e2f8250> [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='strategy' scope='function' baseid='pandaflow/tests/test_strategies/test_mergestring.py'>
              request: <SubRequest 'strategy' for <Function test_merge_with_source_columns>>
          finish pytest_fixture_setup --> <pandaflow.strategies.mergestring.MergeStringStrategy object at 0x75015e2265d0> [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='sample_df' scope='function' baseid='pandaflow/tests/test_strategies/test_mergestring.py'>
              request: <SubRequest 'sample_df' for <Function test_merge_with_source_columns>>
          finish pytest_fixture_setup -->   first_name last_name   role
0      Alice     Smith  Admin
1        Bob     Jones   User
2    Charlie     Brown  Guest [hook]
        finish pytest_runtest_setup --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_merge_with_source_columns>
            call: <CallInfo when='setup' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_strategies/test_mergestring.py::test_merge_with_source_columns' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_strategies/test_mergestring.py::test_merge_with_source_columns' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_strategies/test_mergestring.py::test_merge_with_source_columns' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_merge_with_source_columns>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_merge_with_source_columns>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_merge_with_source_columns>
            call: <CallInfo when='call' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_strategies/test_mergestring.py::test_merge_with_source_columns' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_strategies/test_mergestring.py::test_merge_with_source_columns' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_strategies/test_mergestring.py::test_merge_with_source_columns' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_merge_with_source_columns>
            nextitem: <Function test_missing_formula_and_source_raises>
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='sample_df' scope='function' baseid='pandaflow/tests/test_strategies/test_mergestring.py'>
              request: <SubRequest 'sample_df' for <Function test_merge_with_source_columns>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='strategy' scope='function' baseid='pandaflow/tests/test_strategies/test_mergestring.py'>
              request: <SubRequest 'strategy' for <Function test_merge_with_source_columns>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='strategy' scope='function' baseid='pandaflow/tests/test_strategies/test_mergestring.py'>
              request: <SubRequest 'strategy' for <Function test_merge_with_source_columns>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='monkeypatch' scope='function' baseid=''>
              request: <SubRequest 'monkeypatch' for <Function test_merge_with_source_columns>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_merge_with_source_columns>
            call: <CallInfo when='teardown' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_strategies/test_mergestring.py::test_merge_with_source_columns' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_strategies/test_mergestring.py::test_merge_with_source_columns' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_strategies/test_mergestring.py::test_merge_with_source_columns' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: pandaflow/tests/test_strategies/test_mergestring.py::test_merge_with_source_columns
            location: ('pandaflow/tests/test_strategies/test_mergestring.py', 28, 'test_merge_with_source_columns')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_missing_formula_and_source_raises>
          nextitem: <Function test_validate_rule>
        pytest_runtest_logstart [hook]
            nodeid: pandaflow/tests/test_strategies/test_mergestring.py::test_missing_formula_and_source_raises
            location: ('pandaflow/tests/test_strategies/test_mergestring.py', 39, 'test_missing_formula_and_source_raises')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_missing_formula_and_source_raises>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='monkeypatch' scope='function' baseid=''>
              request: <SubRequest 'monkeypatch' for <Function test_missing_formula_and_source_raises>>
          finish pytest_fixture_setup --> <_pytest.monkeypatch.MonkeyPatch object at 0x75015e3f2d50> [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='strategy' scope='function' baseid='pandaflow/tests/test_strategies/test_mergestring.py'>
              request: <SubRequest 'strategy' for <Function test_missing_formula_and_source_raises>>
          finish pytest_fixture_setup --> <pandaflow.strategies.mergestring.MergeStringStrategy object at 0x75015e226ad0> [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='sample_df' scope='function' baseid='pandaflow/tests/test_strategies/test_mergestring.py'>
              request: <SubRequest 'sample_df' for <Function test_missing_formula_and_source_raises>>
          finish pytest_fixture_setup -->   first_name last_name   role
0      Alice     Smith  Admin
1        Bob     Jones   User
2    Charlie     Brown  Guest [hook]
        finish pytest_runtest_setup --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_missing_formula_and_source_raises>
            call: <CallInfo when='setup' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_strategies/test_mergestring.py::test_missing_formula_and_source_raises' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_strategies/test_mergestring.py::test_missing_formula_and_source_raises' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_strategies/test_mergestring.py::test_missing_formula_and_source_raises' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_missing_formula_and_source_raises>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_missing_formula_and_source_raises>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_missing_formula_and_source_raises>
            call: <CallInfo when='call' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_strategies/test_mergestring.py::test_missing_formula_and_source_raises' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_strategies/test_mergestring.py::test_missing_formula_and_source_raises' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_strategies/test_mergestring.py::test_missing_formula_and_source_raises' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_missing_formula_and_source_raises>
            nextitem: <Function test_validate_rule>
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='sample_df' scope='function' baseid='pandaflow/tests/test_strategies/test_mergestring.py'>
              request: <SubRequest 'sample_df' for <Function test_missing_formula_and_source_raises>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='strategy' scope='function' baseid='pandaflow/tests/test_strategies/test_mergestring.py'>
              request: <SubRequest 'strategy' for <Function test_missing_formula_and_source_raises>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='strategy' scope='function' baseid='pandaflow/tests/test_strategies/test_mergestring.py'>
              request: <SubRequest 'strategy' for <Function test_missing_formula_and_source_raises>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='monkeypatch' scope='function' baseid=''>
              request: <SubRequest 'monkeypatch' for <Function test_missing_formula_and_source_raises>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_missing_formula_and_source_raises>
            call: <CallInfo when='teardown' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_strategies/test_mergestring.py::test_missing_formula_and_source_raises' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_strategies/test_mergestring.py::test_missing_formula_and_source_raises' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_strategies/test_mergestring.py::test_missing_formula_and_source_raises' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: pandaflow/tests/test_strategies/test_mergestring.py::test_missing_formula_and_source_raises
            location: ('pandaflow/tests/test_strategies/test_mergestring.py', 39, 'test_missing_formula_and_source_raises')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_validate_rule>
          nextitem: <Function test_merge_with_missing_column_in_formula>
        pytest_runtest_logstart [hook]
            nodeid: pandaflow/tests/test_strategies/test_mergestring.py::test_validate_rule
            location: ('pandaflow/tests/test_strategies/test_mergestring.py', 47, 'test_validate_rule')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_validate_rule>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='monkeypatch' scope='function' baseid=''>
              request: <SubRequest 'monkeypatch' for <Function test_validate_rule>>
          finish pytest_fixture_setup --> <_pytest.monkeypatch.MonkeyPatch object at 0x75015e3f2990> [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='strategy' scope='function' baseid='pandaflow/tests/test_strategies/test_mergestring.py'>
              request: <SubRequest 'strategy' for <Function test_validate_rule>>
          finish pytest_fixture_setup --> <pandaflow.strategies.mergestring.MergeStringStrategy object at 0x75015e29cc30> [hook]
        finish pytest_runtest_setup --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_validate_rule>
            call: <CallInfo when='setup' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_strategies/test_mergestring.py::test_validate_rule' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_strategies/test_mergestring.py::test_validate_rule' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_strategies/test_mergestring.py::test_validate_rule' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_validate_rule>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_validate_rule>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_validate_rule>
            call: <CallInfo when='call' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_strategies/test_mergestring.py::test_validate_rule' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_strategies/test_mergestring.py::test_validate_rule' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_strategies/test_mergestring.py::test_validate_rule' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_validate_rule>
            nextitem: <Function test_merge_with_missing_column_in_formula>
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='strategy' scope='function' baseid='pandaflow/tests/test_strategies/test_mergestring.py'>
              request: <SubRequest 'strategy' for <Function test_validate_rule>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='strategy' scope='function' baseid='pandaflow/tests/test_strategies/test_mergestring.py'>
              request: <SubRequest 'strategy' for <Function test_validate_rule>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='monkeypatch' scope='function' baseid=''>
              request: <SubRequest 'monkeypatch' for <Function test_validate_rule>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_validate_rule>
            call: <CallInfo when='teardown' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_strategies/test_mergestring.py::test_validate_rule' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_strategies/test_mergestring.py::test_validate_rule' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_strategies/test_mergestring.py::test_validate_rule' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: pandaflow/tests/test_strategies/test_mergestring.py::test_validate_rule
            location: ('pandaflow/tests/test_strategies/test_mergestring.py', 47, 'test_validate_rule')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_merge_with_missing_column_in_formula>
          nextitem: <Function test_valid_regex_extraction>
        pytest_runtest_logstart [hook]
            nodeid: pandaflow/tests/test_strategies/test_mergestring.py::test_merge_with_missing_column_in_formula
            location: ('pandaflow/tests/test_strategies/test_mergestring.py', 59, 'test_merge_with_missing_column_in_formula')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_merge_with_missing_column_in_formula>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='monkeypatch' scope='function' baseid=''>
              request: <SubRequest 'monkeypatch' for <Function test_merge_with_missing_column_in_formula>>
          finish pytest_fixture_setup --> <_pytest.monkeypatch.MonkeyPatch object at 0x75015e3ff770> [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='strategy' scope='function' baseid='pandaflow/tests/test_strategies/test_mergestring.py'>
              request: <SubRequest 'strategy' for <Function test_merge_with_missing_column_in_formula>>
          finish pytest_fixture_setup --> <pandaflow.strategies.mergestring.MergeStringStrategy object at 0x75015e29cb00> [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='sample_df' scope='function' baseid='pandaflow/tests/test_strategies/test_mergestring.py'>
              request: <SubRequest 'sample_df' for <Function test_merge_with_missing_column_in_formula>>
          finish pytest_fixture_setup -->   first_name last_name   role
0      Alice     Smith  Admin
1        Bob     Jones   User
2    Charlie     Brown  Guest [hook]
        finish pytest_runtest_setup --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_merge_with_missing_column_in_formula>
            call: <CallInfo when='setup' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_strategies/test_mergestring.py::test_merge_with_missing_column_in_formula' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_strategies/test_mergestring.py::test_merge_with_missing_column_in_formula' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_strategies/test_mergestring.py::test_merge_with_missing_column_in_formula' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_merge_with_missing_column_in_formula>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_merge_with_missing_column_in_formula>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_merge_with_missing_column_in_formula>
            call: <CallInfo when='call' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_strategies/test_mergestring.py::test_merge_with_missing_column_in_formula' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_strategies/test_mergestring.py::test_merge_with_missing_column_in_formula' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_strategies/test_mergestring.py::test_merge_with_missing_column_in_formula' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_merge_with_missing_column_in_formula>
            nextitem: <Function test_valid_regex_extraction>
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='sample_df' scope='function' baseid='pandaflow/tests/test_strategies/test_mergestring.py'>
              request: <SubRequest 'sample_df' for <Function test_merge_with_missing_column_in_formula>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='strategy' scope='function' baseid='pandaflow/tests/test_strategies/test_mergestring.py'>
              request: <SubRequest 'strategy' for <Function test_merge_with_missing_column_in_formula>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='strategy' scope='function' baseid='pandaflow/tests/test_strategies/test_mergestring.py'>
              request: <SubRequest 'strategy' for <Function test_merge_with_missing_column_in_formula>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='monkeypatch' scope='function' baseid=''>
              request: <SubRequest 'monkeypatch' for <Function test_merge_with_missing_column_in_formula>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_merge_with_missing_column_in_formula>
            call: <CallInfo when='teardown' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_strategies/test_mergestring.py::test_merge_with_missing_column_in_formula' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_strategies/test_mergestring.py::test_merge_with_missing_column_in_formula' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_strategies/test_mergestring.py::test_merge_with_missing_column_in_formula' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: pandaflow/tests/test_strategies/test_mergestring.py::test_merge_with_missing_column_in_formula
            location: ('pandaflow/tests/test_strategies/test_mergestring.py', 59, 'test_merge_with_missing_column_in_formula')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_valid_regex_extraction>
          nextitem: <Function test_missing_source_column_raises>
        pytest_runtest_logstart [hook]
            nodeid: pandaflow/tests/test_strategies/test_regex.py::test_valid_regex_extraction
            location: ('pandaflow/tests/test_strategies/test_regex.py', 33, 'test_valid_regex_extraction')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_valid_regex_extraction>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='monkeypatch' scope='function' baseid=''>
              request: <SubRequest 'monkeypatch' for <Function test_valid_regex_extraction>>
          finish pytest_fixture_setup --> <_pytest.monkeypatch.MonkeyPatch object at 0x75015e3ff770> [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='strategy' scope='function' baseid='pandaflow/tests/test_strategies/test_regex.py'>
              request: <SubRequest 'strategy' for <Function test_valid_regex_extraction>>
          finish pytest_fixture_setup --> <pandaflow.strategies.regex.RegExStrategy object at 0x75015e209e80> [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='sample_df' scope='function' baseid='pandaflow/tests/test_strategies/test_regex.py'>
              request: <SubRequest 'sample_df' for <Function test_valid_regex_extraction>>
          finish pytest_fixture_setup -->                       raw
0  Order #12345 confirmed
1    Order #67890 shipped
2          Invalid format
3  Order #00001 delivered [hook]
        finish pytest_runtest_setup --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_valid_regex_extraction>
            call: <CallInfo when='setup' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_strategies/test_regex.py::test_valid_regex_extraction' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_strategies/test_regex.py::test_valid_regex_extraction' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_strategies/test_regex.py::test_valid_regex_extraction' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_valid_regex_extraction>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_valid_regex_extraction>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_valid_regex_extraction>
            call: <CallInfo when='call' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_strategies/test_regex.py::test_valid_regex_extraction' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_strategies/test_regex.py::test_valid_regex_extraction' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_strategies/test_regex.py::test_valid_regex_extraction' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_valid_regex_extraction>
            nextitem: <Function test_missing_source_column_raises>
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='sample_df' scope='function' baseid='pandaflow/tests/test_strategies/test_regex.py'>
              request: <SubRequest 'sample_df' for <Function test_valid_regex_extraction>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='strategy' scope='function' baseid='pandaflow/tests/test_strategies/test_regex.py'>
              request: <SubRequest 'strategy' for <Function test_valid_regex_extraction>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='strategy' scope='function' baseid='pandaflow/tests/test_strategies/test_regex.py'>
              request: <SubRequest 'strategy' for <Function test_valid_regex_extraction>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='monkeypatch' scope='function' baseid=''>
              request: <SubRequest 'monkeypatch' for <Function test_valid_regex_extraction>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_valid_regex_extraction>
            call: <CallInfo when='teardown' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_strategies/test_regex.py::test_valid_regex_extraction' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_strategies/test_regex.py::test_valid_regex_extraction' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_strategies/test_regex.py::test_valid_regex_extraction' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: pandaflow/tests/test_strategies/test_regex.py::test_valid_regex_extraction
            location: ('pandaflow/tests/test_strategies/test_regex.py', 33, 'test_valid_regex_extraction')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_missing_source_column_raises>
          nextitem: <Function test_invalid_regex_returns_empty>
        pytest_runtest_logstart [hook]
            nodeid: pandaflow/tests/test_strategies/test_regex.py::test_missing_source_column_raises
            location: ('pandaflow/tests/test_strategies/test_regex.py', 47, 'test_missing_source_column_raises')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_missing_source_column_raises>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='monkeypatch' scope='function' baseid=''>
              request: <SubRequest 'monkeypatch' for <Function test_missing_source_column_raises>>
          finish pytest_fixture_setup --> <_pytest.monkeypatch.MonkeyPatch object at 0x75015e1081f0> [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='strategy' scope='function' baseid='pandaflow/tests/test_strategies/test_regex.py'>
              request: <SubRequest 'strategy' for <Function test_missing_source_column_raises>>
          finish pytest_fixture_setup --> <pandaflow.strategies.regex.RegExStrategy object at 0x75015e226210> [hook]
        finish pytest_runtest_setup --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_missing_source_column_raises>
            call: <CallInfo when='setup' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_strategies/test_regex.py::test_missing_source_column_raises' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_strategies/test_regex.py::test_missing_source_column_raises' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_strategies/test_regex.py::test_missing_source_column_raises' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_missing_source_column_raises>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_missing_source_column_raises>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_missing_source_column_raises>
            call: <CallInfo when='call' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_strategies/test_regex.py::test_missing_source_column_raises' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_strategies/test_regex.py::test_missing_source_column_raises' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_strategies/test_regex.py::test_missing_source_column_raises' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_missing_source_column_raises>
            nextitem: <Function test_invalid_regex_returns_empty>
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='strategy' scope='function' baseid='pandaflow/tests/test_strategies/test_regex.py'>
              request: <SubRequest 'strategy' for <Function test_missing_source_column_raises>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='strategy' scope='function' baseid='pandaflow/tests/test_strategies/test_regex.py'>
              request: <SubRequest 'strategy' for <Function test_missing_source_column_raises>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='monkeypatch' scope='function' baseid=''>
              request: <SubRequest 'monkeypatch' for <Function test_missing_source_column_raises>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_missing_source_column_raises>
            call: <CallInfo when='teardown' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_strategies/test_regex.py::test_missing_source_column_raises' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_strategies/test_regex.py::test_missing_source_column_raises' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_strategies/test_regex.py::test_missing_source_column_raises' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: pandaflow/tests/test_strategies/test_regex.py::test_missing_source_column_raises
            location: ('pandaflow/tests/test_strategies/test_regex.py', 47, 'test_missing_source_column_raises')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_invalid_regex_returns_empty>
          nextitem: <Function test_group_id_out_of_range_returns_none>
        pytest_runtest_logstart [hook]
            nodeid: pandaflow/tests/test_strategies/test_regex.py::test_invalid_regex_returns_empty
            location: ('pandaflow/tests/test_strategies/test_regex.py', 60, 'test_invalid_regex_returns_empty')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_invalid_regex_returns_empty>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='monkeypatch' scope='function' baseid=''>
              request: <SubRequest 'monkeypatch' for <Function test_invalid_regex_returns_empty>>
          finish pytest_fixture_setup --> <_pytest.monkeypatch.MonkeyPatch object at 0x75015e27c7d0> [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='strategy' scope='function' baseid='pandaflow/tests/test_strategies/test_regex.py'>
              request: <SubRequest 'strategy' for <Function test_invalid_regex_returns_empty>>
          finish pytest_fixture_setup --> <pandaflow.strategies.regex.RegExStrategy object at 0x75015e226210> [hook]
        finish pytest_runtest_setup --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_invalid_regex_returns_empty>
            call: <CallInfo when='setup' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_strategies/test_regex.py::test_invalid_regex_returns_empty' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_strategies/test_regex.py::test_invalid_regex_returns_empty' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_strategies/test_regex.py::test_invalid_regex_returns_empty' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_invalid_regex_returns_empty>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_invalid_regex_returns_empty>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_invalid_regex_returns_empty>
            call: <CallInfo when='call' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_strategies/test_regex.py::test_invalid_regex_returns_empty' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_strategies/test_regex.py::test_invalid_regex_returns_empty' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_strategies/test_regex.py::test_invalid_regex_returns_empty' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_invalid_regex_returns_empty>
            nextitem: <Function test_group_id_out_of_range_returns_none>
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='strategy' scope='function' baseid='pandaflow/tests/test_strategies/test_regex.py'>
              request: <SubRequest 'strategy' for <Function test_invalid_regex_returns_empty>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='strategy' scope='function' baseid='pandaflow/tests/test_strategies/test_regex.py'>
              request: <SubRequest 'strategy' for <Function test_invalid_regex_returns_empty>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='monkeypatch' scope='function' baseid=''>
              request: <SubRequest 'monkeypatch' for <Function test_invalid_regex_returns_empty>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_invalid_regex_returns_empty>
            call: <CallInfo when='teardown' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_strategies/test_regex.py::test_invalid_regex_returns_empty' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_strategies/test_regex.py::test_invalid_regex_returns_empty' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_strategies/test_regex.py::test_invalid_regex_returns_empty' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: pandaflow/tests/test_strategies/test_regex.py::test_invalid_regex_returns_empty
            location: ('pandaflow/tests/test_strategies/test_regex.py', 60, 'test_invalid_regex_returns_empty')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_group_id_out_of_range_returns_none>
          nextitem: <Function test_validate_rule>
        pytest_runtest_logstart [hook]
            nodeid: pandaflow/tests/test_strategies/test_regex.py::test_group_id_out_of_range_returns_none
            location: ('pandaflow/tests/test_strategies/test_regex.py', 73, 'test_group_id_out_of_range_returns_none')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_group_id_out_of_range_returns_none>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='monkeypatch' scope='function' baseid=''>
              request: <SubRequest 'monkeypatch' for <Function test_group_id_out_of_range_returns_none>>
          finish pytest_fixture_setup --> <_pytest.monkeypatch.MonkeyPatch object at 0x75015e27d010> [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='strategy' scope='function' baseid='pandaflow/tests/test_strategies/test_regex.py'>
              request: <SubRequest 'strategy' for <Function test_group_id_out_of_range_returns_none>>
          finish pytest_fixture_setup --> <pandaflow.strategies.regex.RegExStrategy object at 0x75015e29c770> [hook]
        finish pytest_runtest_setup --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_group_id_out_of_range_returns_none>
            call: <CallInfo when='setup' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_strategies/test_regex.py::test_group_id_out_of_range_returns_none' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_strategies/test_regex.py::test_group_id_out_of_range_returns_none' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_strategies/test_regex.py::test_group_id_out_of_range_returns_none' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_group_id_out_of_range_returns_none>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_group_id_out_of_range_returns_none>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_group_id_out_of_range_returns_none>
            call: <CallInfo when='call' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_strategies/test_regex.py::test_group_id_out_of_range_returns_none' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_strategies/test_regex.py::test_group_id_out_of_range_returns_none' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_strategies/test_regex.py::test_group_id_out_of_range_returns_none' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_group_id_out_of_range_returns_none>
            nextitem: <Function test_validate_rule>
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='strategy' scope='function' baseid='pandaflow/tests/test_strategies/test_regex.py'>
              request: <SubRequest 'strategy' for <Function test_group_id_out_of_range_returns_none>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='strategy' scope='function' baseid='pandaflow/tests/test_strategies/test_regex.py'>
              request: <SubRequest 'strategy' for <Function test_group_id_out_of_range_returns_none>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='monkeypatch' scope='function' baseid=''>
              request: <SubRequest 'monkeypatch' for <Function test_group_id_out_of_range_returns_none>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_group_id_out_of_range_returns_none>
            call: <CallInfo when='teardown' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_strategies/test_regex.py::test_group_id_out_of_range_returns_none' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_strategies/test_regex.py::test_group_id_out_of_range_returns_none' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_strategies/test_regex.py::test_group_id_out_of_range_returns_none' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: pandaflow/tests/test_strategies/test_regex.py::test_group_id_out_of_range_returns_none
            location: ('pandaflow/tests/test_strategies/test_regex.py', 73, 'test_group_id_out_of_range_returns_none')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_validate_rule>
          nextitem: <Function test_reorder_columns_valid>
        pytest_runtest_logstart [hook]
            nodeid: pandaflow/tests/test_strategies/test_regex.py::test_validate_rule
            location: ('pandaflow/tests/test_strategies/test_regex.py', 86, 'test_validate_rule')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_validate_rule>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='monkeypatch' scope='function' baseid=''>
              request: <SubRequest 'monkeypatch' for <Function test_validate_rule>>
          finish pytest_fixture_setup --> <_pytest.monkeypatch.MonkeyPatch object at 0x75015e2f2e60> [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='strategy' scope='function' baseid='pandaflow/tests/test_strategies/test_regex.py'>
              request: <SubRequest 'strategy' for <Function test_validate_rule>>
          finish pytest_fixture_setup --> <pandaflow.strategies.regex.RegExStrategy object at 0x75015e29cc30> [hook]
        finish pytest_runtest_setup --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_validate_rule>
            call: <CallInfo when='setup' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_strategies/test_regex.py::test_validate_rule' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_strategies/test_regex.py::test_validate_rule' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_strategies/test_regex.py::test_validate_rule' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_validate_rule>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_validate_rule>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_validate_rule>
            call: <CallInfo when='call' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_strategies/test_regex.py::test_validate_rule' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_strategies/test_regex.py::test_validate_rule' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_strategies/test_regex.py::test_validate_rule' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_validate_rule>
            nextitem: <Function test_reorder_columns_valid>
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='strategy' scope='function' baseid='pandaflow/tests/test_strategies/test_regex.py'>
              request: <SubRequest 'strategy' for <Function test_validate_rule>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='strategy' scope='function' baseid='pandaflow/tests/test_strategies/test_regex.py'>
              request: <SubRequest 'strategy' for <Function test_validate_rule>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='monkeypatch' scope='function' baseid=''>
              request: <SubRequest 'monkeypatch' for <Function test_validate_rule>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_validate_rule>
            call: <CallInfo when='teardown' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_strategies/test_regex.py::test_validate_rule' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_strategies/test_regex.py::test_validate_rule' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_strategies/test_regex.py::test_validate_rule' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: pandaflow/tests/test_strategies/test_regex.py::test_validate_rule
            location: ('pandaflow/tests/test_strategies/test_regex.py', 86, 'test_validate_rule')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_reorder_columns_valid>
          nextitem: <Function test_reorder_columns_missing_column>
        pytest_runtest_logstart [hook]
            nodeid: pandaflow/tests/test_strategies/test_reorder_columns.py::test_reorder_columns_valid
            location: ('pandaflow/tests/test_strategies/test_reorder_columns.py', 16, 'test_reorder_columns_valid')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_reorder_columns_valid>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='sample_df' scope='function' baseid='pandaflow/tests/test_strategies/test_reorder_columns.py'>
              request: <SubRequest 'sample_df' for <Function test_reorder_columns_valid>>
          finish pytest_fixture_setup -->     name  age          email
0  Alice   30  a@example.com
1    Bob   25  b@example.com [hook]
        finish pytest_runtest_setup --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_reorder_columns_valid>
            call: <CallInfo when='setup' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_strategies/test_reorder_columns.py::test_reorder_columns_valid' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_strategies/test_reorder_columns.py::test_reorder_columns_valid' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_strategies/test_reorder_columns.py::test_reorder_columns_valid' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_reorder_columns_valid>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_reorder_columns_valid>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_reorder_columns_valid>
            call: <CallInfo when='call' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_strategies/test_reorder_columns.py::test_reorder_columns_valid' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_strategies/test_reorder_columns.py::test_reorder_columns_valid' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_strategies/test_reorder_columns.py::test_reorder_columns_valid' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_reorder_columns_valid>
            nextitem: <Function test_reorder_columns_missing_column>
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='sample_df' scope='function' baseid='pandaflow/tests/test_strategies/test_reorder_columns.py'>
              request: <SubRequest 'sample_df' for <Function test_reorder_columns_valid>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_reorder_columns_valid>
            call: <CallInfo when='teardown' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_strategies/test_reorder_columns.py::test_reorder_columns_valid' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_strategies/test_reorder_columns.py::test_reorder_columns_valid' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_strategies/test_reorder_columns.py::test_reorder_columns_valid' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: pandaflow/tests/test_strategies/test_reorder_columns.py::test_reorder_columns_valid
            location: ('pandaflow/tests/test_strategies/test_reorder_columns.py', 16, 'test_reorder_columns_valid')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_reorder_columns_missing_column>
          nextitem: <Function test_reorder_columns_empty_rule>
        pytest_runtest_logstart [hook]
            nodeid: pandaflow/tests/test_strategies/test_reorder_columns.py::test_reorder_columns_missing_column
            location: ('pandaflow/tests/test_strategies/test_reorder_columns.py', 23, 'test_reorder_columns_missing_column')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_reorder_columns_missing_column>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='sample_df' scope='function' baseid='pandaflow/tests/test_strategies/test_reorder_columns.py'>
              request: <SubRequest 'sample_df' for <Function test_reorder_columns_missing_column>>
          finish pytest_fixture_setup -->     name  age          email
0  Alice   30  a@example.com
1    Bob   25  b@example.com [hook]
        finish pytest_runtest_setup --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_reorder_columns_missing_column>
            call: <CallInfo when='setup' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_strategies/test_reorder_columns.py::test_reorder_columns_missing_column' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_strategies/test_reorder_columns.py::test_reorder_columns_missing_column' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_strategies/test_reorder_columns.py::test_reorder_columns_missing_column' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_reorder_columns_missing_column>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_reorder_columns_missing_column>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_reorder_columns_missing_column>
            call: <CallInfo when='call' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_strategies/test_reorder_columns.py::test_reorder_columns_missing_column' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_strategies/test_reorder_columns.py::test_reorder_columns_missing_column' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_strategies/test_reorder_columns.py::test_reorder_columns_missing_column' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_reorder_columns_missing_column>
            nextitem: <Function test_reorder_columns_empty_rule>
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='sample_df' scope='function' baseid='pandaflow/tests/test_strategies/test_reorder_columns.py'>
              request: <SubRequest 'sample_df' for <Function test_reorder_columns_missing_column>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_reorder_columns_missing_column>
            call: <CallInfo when='teardown' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_strategies/test_reorder_columns.py::test_reorder_columns_missing_column' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_strategies/test_reorder_columns.py::test_reorder_columns_missing_column' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_strategies/test_reorder_columns.py::test_reorder_columns_missing_column' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: pandaflow/tests/test_strategies/test_reorder_columns.py::test_reorder_columns_missing_column
            location: ('pandaflow/tests/test_strategies/test_reorder_columns.py', 23, 'test_reorder_columns_missing_column')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_reorder_columns_empty_rule>
          nextitem: <Function test_reorder_columns_partial_order>
        pytest_runtest_logstart [hook]
            nodeid: pandaflow/tests/test_strategies/test_reorder_columns.py::test_reorder_columns_empty_rule
            location: ('pandaflow/tests/test_strategies/test_reorder_columns.py', 32, 'test_reorder_columns_empty_rule')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_reorder_columns_empty_rule>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='sample_df' scope='function' baseid='pandaflow/tests/test_strategies/test_reorder_columns.py'>
              request: <SubRequest 'sample_df' for <Function test_reorder_columns_empty_rule>>
          finish pytest_fixture_setup -->     name  age          email
0  Alice   30  a@example.com
1    Bob   25  b@example.com [hook]
        finish pytest_runtest_setup --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_reorder_columns_empty_rule>
            call: <CallInfo when='setup' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_strategies/test_reorder_columns.py::test_reorder_columns_empty_rule' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_strategies/test_reorder_columns.py::test_reorder_columns_empty_rule' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_strategies/test_reorder_columns.py::test_reorder_columns_empty_rule' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_reorder_columns_empty_rule>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_reorder_columns_empty_rule>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_reorder_columns_empty_rule>
            call: <CallInfo when='call' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_strategies/test_reorder_columns.py::test_reorder_columns_empty_rule' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_strategies/test_reorder_columns.py::test_reorder_columns_empty_rule' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_strategies/test_reorder_columns.py::test_reorder_columns_empty_rule' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_reorder_columns_empty_rule>
            nextitem: <Function test_reorder_columns_partial_order>
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='sample_df' scope='function' baseid='pandaflow/tests/test_strategies/test_reorder_columns.py'>
              request: <SubRequest 'sample_df' for <Function test_reorder_columns_empty_rule>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_reorder_columns_empty_rule>
            call: <CallInfo when='teardown' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_strategies/test_reorder_columns.py::test_reorder_columns_empty_rule' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_strategies/test_reorder_columns.py::test_reorder_columns_empty_rule' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_strategies/test_reorder_columns.py::test_reorder_columns_empty_rule' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: pandaflow/tests/test_strategies/test_reorder_columns.py::test_reorder_columns_empty_rule
            location: ('pandaflow/tests/test_strategies/test_reorder_columns.py', 32, 'test_reorder_columns_empty_rule')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_reorder_columns_partial_order>
          nextitem: <Function test_replace_string_occurrence>
        pytest_runtest_logstart [hook]
            nodeid: pandaflow/tests/test_strategies/test_reorder_columns.py::test_reorder_columns_partial_order
            location: ('pandaflow/tests/test_strategies/test_reorder_columns.py', 39, 'test_reorder_columns_partial_order')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_reorder_columns_partial_order>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='sample_df' scope='function' baseid='pandaflow/tests/test_strategies/test_reorder_columns.py'>
              request: <SubRequest 'sample_df' for <Function test_reorder_columns_partial_order>>
          finish pytest_fixture_setup -->     name  age          email
0  Alice   30  a@example.com
1    Bob   25  b@example.com [hook]
        finish pytest_runtest_setup --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_reorder_columns_partial_order>
            call: <CallInfo when='setup' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_strategies/test_reorder_columns.py::test_reorder_columns_partial_order' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_strategies/test_reorder_columns.py::test_reorder_columns_partial_order' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_strategies/test_reorder_columns.py::test_reorder_columns_partial_order' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_reorder_columns_partial_order>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_reorder_columns_partial_order>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_reorder_columns_partial_order>
            call: <CallInfo when='call' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_strategies/test_reorder_columns.py::test_reorder_columns_partial_order' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_strategies/test_reorder_columns.py::test_reorder_columns_partial_order' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_strategies/test_reorder_columns.py::test_reorder_columns_partial_order' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_reorder_columns_partial_order>
            nextitem: <Function test_replace_string_occurrence>
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='sample_df' scope='function' baseid='pandaflow/tests/test_strategies/test_reorder_columns.py'>
              request: <SubRequest 'sample_df' for <Function test_reorder_columns_partial_order>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_reorder_columns_partial_order>
            call: <CallInfo when='teardown' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_strategies/test_reorder_columns.py::test_reorder_columns_partial_order' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_strategies/test_reorder_columns.py::test_reorder_columns_partial_order' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_strategies/test_reorder_columns.py::test_reorder_columns_partial_order' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: pandaflow/tests/test_strategies/test_reorder_columns.py::test_reorder_columns_partial_order
            location: ('pandaflow/tests/test_strategies/test_reorder_columns.py', 39, 'test_reorder_columns_partial_order')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_replace_string_occurrence>
          nextitem: <Function test_replace_numeric_occurrence>
        pytest_runtest_logstart [hook]
            nodeid: pandaflow/tests/test_strategies/test_replace.py::test_replace_string_occurrence
            location: ('pandaflow/tests/test_strategies/test_replace.py', 20, 'test_replace_string_occurrence')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_replace_string_occurrence>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='strategy' scope='function' baseid='pandaflow/tests/test_strategies/test_replace.py'>
              request: <SubRequest 'strategy' for <Function test_replace_string_occurrence>>
          finish pytest_fixture_setup --> <pandaflow.strategies.replace.ReplaceStrategy object at 0x75015e20a120> [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='sample_df' scope='function' baseid='pandaflow/tests/test_strategies/test_replace.py'>
              request: <SubRequest 'sample_df' for <Function test_replace_string_occurrence>>
          finish pytest_fixture_setup -->              text  numeric
0     hello world      100
1     world peace      200
2  peaceful world      100 [hook]
        finish pytest_runtest_setup --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_replace_string_occurrence>
            call: <CallInfo when='setup' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_strategies/test_replace.py::test_replace_string_occurrence' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_strategies/test_replace.py::test_replace_string_occurrence' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_strategies/test_replace.py::test_replace_string_occurrence' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_replace_string_occurrence>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_replace_string_occurrence>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_replace_string_occurrence>
            call: <CallInfo when='call' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_strategies/test_replace.py::test_replace_string_occurrence' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_strategies/test_replace.py::test_replace_string_occurrence' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_strategies/test_replace.py::test_replace_string_occurrence' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_replace_string_occurrence>
            nextitem: <Function test_replace_numeric_occurrence>
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='sample_df' scope='function' baseid='pandaflow/tests/test_strategies/test_replace.py'>
              request: <SubRequest 'sample_df' for <Function test_replace_string_occurrence>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='strategy' scope='function' baseid='pandaflow/tests/test_strategies/test_replace.py'>
              request: <SubRequest 'strategy' for <Function test_replace_string_occurrence>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_replace_string_occurrence>
            call: <CallInfo when='teardown' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_strategies/test_replace.py::test_replace_string_occurrence' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_strategies/test_replace.py::test_replace_string_occurrence' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_strategies/test_replace.py::test_replace_string_occurrence' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: pandaflow/tests/test_strategies/test_replace.py::test_replace_string_occurrence
            location: ('pandaflow/tests/test_strategies/test_replace.py', 20, 'test_replace_string_occurrence')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_replace_numeric_occurrence>
          nextitem: <Function test_missing_column_raises>
        pytest_runtest_logstart [hook]
            nodeid: pandaflow/tests/test_strategies/test_replace.py::test_replace_numeric_occurrence
            location: ('pandaflow/tests/test_strategies/test_replace.py', 32, 'test_replace_numeric_occurrence')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_replace_numeric_occurrence>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='strategy' scope='function' baseid='pandaflow/tests/test_strategies/test_replace.py'>
              request: <SubRequest 'strategy' for <Function test_replace_numeric_occurrence>>
          finish pytest_fixture_setup --> <pandaflow.strategies.replace.ReplaceStrategy object at 0x75015e226210> [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='sample_df' scope='function' baseid='pandaflow/tests/test_strategies/test_replace.py'>
              request: <SubRequest 'sample_df' for <Function test_replace_numeric_occurrence>>
          finish pytest_fixture_setup -->              text  numeric
0     hello world      100
1     world peace      200
2  peaceful world      100 [hook]
        finish pytest_runtest_setup --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_replace_numeric_occurrence>
            call: <CallInfo when='setup' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_strategies/test_replace.py::test_replace_numeric_occurrence' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_strategies/test_replace.py::test_replace_numeric_occurrence' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_strategies/test_replace.py::test_replace_numeric_occurrence' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_replace_numeric_occurrence>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_replace_numeric_occurrence>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_replace_numeric_occurrence>
            call: <CallInfo when='call' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_strategies/test_replace.py::test_replace_numeric_occurrence' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_strategies/test_replace.py::test_replace_numeric_occurrence' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_strategies/test_replace.py::test_replace_numeric_occurrence' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_replace_numeric_occurrence>
            nextitem: <Function test_missing_column_raises>
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='sample_df' scope='function' baseid='pandaflow/tests/test_strategies/test_replace.py'>
              request: <SubRequest 'sample_df' for <Function test_replace_numeric_occurrence>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='strategy' scope='function' baseid='pandaflow/tests/test_strategies/test_replace.py'>
              request: <SubRequest 'strategy' for <Function test_replace_numeric_occurrence>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_replace_numeric_occurrence>
            call: <CallInfo when='teardown' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_strategies/test_replace.py::test_replace_numeric_occurrence' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_strategies/test_replace.py::test_replace_numeric_occurrence' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_strategies/test_replace.py::test_replace_numeric_occurrence' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: pandaflow/tests/test_strategies/test_replace.py::test_replace_numeric_occurrence
            location: ('pandaflow/tests/test_strategies/test_replace.py', 32, 'test_replace_numeric_occurrence')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_missing_column_raises>
          nextitem: <Function test_replace_with_empty_from>
        pytest_runtest_logstart [hook]
            nodeid: pandaflow/tests/test_strategies/test_replace.py::test_missing_column_raises
            location: ('pandaflow/tests/test_strategies/test_replace.py', 39, 'test_missing_column_raises')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_missing_column_raises>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='strategy' scope='function' baseid='pandaflow/tests/test_strategies/test_replace.py'>
              request: <SubRequest 'strategy' for <Function test_missing_column_raises>>
          finish pytest_fixture_setup --> <pandaflow.strategies.replace.ReplaceStrategy object at 0x75015e2265d0> [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='sample_df' scope='function' baseid='pandaflow/tests/test_strategies/test_replace.py'>
              request: <SubRequest 'sample_df' for <Function test_missing_column_raises>>
          finish pytest_fixture_setup -->              text  numeric
0     hello world      100
1     world peace      200
2  peaceful world      100 [hook]
        finish pytest_runtest_setup --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_missing_column_raises>
            call: <CallInfo when='setup' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_strategies/test_replace.py::test_missing_column_raises' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_strategies/test_replace.py::test_missing_column_raises' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_strategies/test_replace.py::test_missing_column_raises' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_missing_column_raises>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_missing_column_raises>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_missing_column_raises>
            call: <CallInfo when='call' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_strategies/test_replace.py::test_missing_column_raises' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_strategies/test_replace.py::test_missing_column_raises' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_strategies/test_replace.py::test_missing_column_raises' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_missing_column_raises>
            nextitem: <Function test_replace_with_empty_from>
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='sample_df' scope='function' baseid='pandaflow/tests/test_strategies/test_replace.py'>
              request: <SubRequest 'sample_df' for <Function test_missing_column_raises>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='strategy' scope='function' baseid='pandaflow/tests/test_strategies/test_replace.py'>
              request: <SubRequest 'strategy' for <Function test_missing_column_raises>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_missing_column_raises>
            call: <CallInfo when='teardown' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_strategies/test_replace.py::test_missing_column_raises' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_strategies/test_replace.py::test_missing_column_raises' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_strategies/test_replace.py::test_missing_column_raises' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: pandaflow/tests/test_strategies/test_replace.py::test_missing_column_raises
            location: ('pandaflow/tests/test_strategies/test_replace.py', 39, 'test_missing_column_raises')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_replace_with_empty_from>
          nextitem: <Function test_validate_rule_maps_keys>
        pytest_runtest_logstart [hook]
            nodeid: pandaflow/tests/test_strategies/test_replace.py::test_replace_with_empty_from
            location: ('pandaflow/tests/test_strategies/test_replace.py', 45, 'test_replace_with_empty_from')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_replace_with_empty_from>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='strategy' scope='function' baseid='pandaflow/tests/test_strategies/test_replace.py'>
              request: <SubRequest 'strategy' for <Function test_replace_with_empty_from>>
          finish pytest_fixture_setup --> <pandaflow.strategies.replace.ReplaceStrategy object at 0x75015e29cb00> [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='sample_df' scope='function' baseid='pandaflow/tests/test_strategies/test_replace.py'>
              request: <SubRequest 'sample_df' for <Function test_replace_with_empty_from>>
          finish pytest_fixture_setup -->              text  numeric
0     hello world      100
1     world peace      200
2  peaceful world      100 [hook]
        finish pytest_runtest_setup --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_replace_with_empty_from>
            call: <CallInfo when='setup' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_strategies/test_replace.py::test_replace_with_empty_from' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_strategies/test_replace.py::test_replace_with_empty_from' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_strategies/test_replace.py::test_replace_with_empty_from' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_replace_with_empty_from>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_replace_with_empty_from>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_replace_with_empty_from>
            call: <CallInfo when='call' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_strategies/test_replace.py::test_replace_with_empty_from' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_strategies/test_replace.py::test_replace_with_empty_from' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_strategies/test_replace.py::test_replace_with_empty_from' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_replace_with_empty_from>
            nextitem: <Function test_validate_rule_maps_keys>
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='sample_df' scope='function' baseid='pandaflow/tests/test_strategies/test_replace.py'>
              request: <SubRequest 'sample_df' for <Function test_replace_with_empty_from>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='strategy' scope='function' baseid='pandaflow/tests/test_strategies/test_replace.py'>
              request: <SubRequest 'strategy' for <Function test_replace_with_empty_from>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_replace_with_empty_from>
            call: <CallInfo when='teardown' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_strategies/test_replace.py::test_replace_with_empty_from' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_strategies/test_replace.py::test_replace_with_empty_from' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_strategies/test_replace.py::test_replace_with_empty_from' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: pandaflow/tests/test_strategies/test_replace.py::test_replace_with_empty_from
            location: ('pandaflow/tests/test_strategies/test_replace.py', 45, 'test_replace_with_empty_from')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_validate_rule_maps_keys>
          nextitem: <Function test_sort_single_column>
        pytest_runtest_logstart [hook]
            nodeid: pandaflow/tests/test_strategies/test_replace.py::test_validate_rule_maps_keys
            location: ('pandaflow/tests/test_strategies/test_replace.py', 52, 'test_validate_rule_maps_keys')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_validate_rule_maps_keys>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='strategy' scope='function' baseid='pandaflow/tests/test_strategies/test_replace.py'>
              request: <SubRequest 'strategy' for <Function test_validate_rule_maps_keys>>
          finish pytest_fixture_setup --> <pandaflow.strategies.replace.ReplaceStrategy object at 0x75015e29d0f0> [hook]
        finish pytest_runtest_setup --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_validate_rule_maps_keys>
            call: <CallInfo when='setup' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_strategies/test_replace.py::test_validate_rule_maps_keys' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_strategies/test_replace.py::test_validate_rule_maps_keys' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_strategies/test_replace.py::test_validate_rule_maps_keys' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_validate_rule_maps_keys>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_validate_rule_maps_keys>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_validate_rule_maps_keys>
            call: <CallInfo when='call' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_strategies/test_replace.py::test_validate_rule_maps_keys' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_strategies/test_replace.py::test_validate_rule_maps_keys' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_strategies/test_replace.py::test_validate_rule_maps_keys' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_validate_rule_maps_keys>
            nextitem: <Function test_sort_single_column>
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='strategy' scope='function' baseid='pandaflow/tests/test_strategies/test_replace.py'>
              request: <SubRequest 'strategy' for <Function test_validate_rule_maps_keys>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_validate_rule_maps_keys>
            call: <CallInfo when='teardown' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_strategies/test_replace.py::test_validate_rule_maps_keys' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_strategies/test_replace.py::test_validate_rule_maps_keys' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_strategies/test_replace.py::test_validate_rule_maps_keys' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: pandaflow/tests/test_strategies/test_replace.py::test_validate_rule_maps_keys
            location: ('pandaflow/tests/test_strategies/test_replace.py', 52, 'test_validate_rule_maps_keys')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_sort_single_column>
          nextitem: <Function test_sort_multiple_columns>
        pytest_runtest_logstart [hook]
            nodeid: pandaflow/tests/test_strategies/test_sort_by_column.py::test_sort_single_column
            location: ('pandaflow/tests/test_strategies/test_sort_by_column.py', 16, 'test_sort_single_column')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_sort_single_column>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='sample_df' scope='function' baseid='pandaflow/tests/test_strategies/test_sort_by_column.py'>
              request: <SubRequest 'sample_df' for <Function test_sort_single_column>>
          finish pytest_fixture_setup -->       name  score  age
0    Alice   85.0   30
1      Bob   92.0   25
2  Charlie   85.0   40
3     Dana    NaN   22 [hook]
        finish pytest_runtest_setup --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_sort_single_column>
            call: <CallInfo when='setup' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_strategies/test_sort_by_column.py::test_sort_single_column' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_strategies/test_sort_by_column.py::test_sort_single_column' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_strategies/test_sort_by_column.py::test_sort_single_column' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_sort_single_column>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_sort_single_column>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_sort_single_column>
            call: <CallInfo when='call' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_strategies/test_sort_by_column.py::test_sort_single_column' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_strategies/test_sort_by_column.py::test_sort_single_column' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_strategies/test_sort_by_column.py::test_sort_single_column' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_sort_single_column>
            nextitem: <Function test_sort_multiple_columns>
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='sample_df' scope='function' baseid='pandaflow/tests/test_strategies/test_sort_by_column.py'>
              request: <SubRequest 'sample_df' for <Function test_sort_single_column>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_sort_single_column>
            call: <CallInfo when='teardown' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_strategies/test_sort_by_column.py::test_sort_single_column' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_strategies/test_sort_by_column.py::test_sort_single_column' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_strategies/test_sort_by_column.py::test_sort_single_column' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: pandaflow/tests/test_strategies/test_sort_by_column.py::test_sort_single_column
            location: ('pandaflow/tests/test_strategies/test_sort_by_column.py', 16, 'test_sort_single_column')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_sort_multiple_columns>
          nextitem: <Function test_sort_with_na_first>
        pytest_runtest_logstart [hook]
            nodeid: pandaflow/tests/test_strategies/test_sort_by_column.py::test_sort_multiple_columns
            location: ('pandaflow/tests/test_strategies/test_sort_by_column.py', 25, 'test_sort_multiple_columns')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_sort_multiple_columns>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='sample_df' scope='function' baseid='pandaflow/tests/test_strategies/test_sort_by_column.py'>
              request: <SubRequest 'sample_df' for <Function test_sort_multiple_columns>>
          finish pytest_fixture_setup -->       name  score  age
0    Alice   85.0   30
1      Bob   92.0   25
2  Charlie   85.0   40
3     Dana    NaN   22 [hook]
        finish pytest_runtest_setup --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_sort_multiple_columns>
            call: <CallInfo when='setup' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_strategies/test_sort_by_column.py::test_sort_multiple_columns' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_strategies/test_sort_by_column.py::test_sort_multiple_columns' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_strategies/test_sort_by_column.py::test_sort_multiple_columns' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_sort_multiple_columns>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_sort_multiple_columns>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_sort_multiple_columns>
            call: <CallInfo when='call' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_strategies/test_sort_by_column.py::test_sort_multiple_columns' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_strategies/test_sort_by_column.py::test_sort_multiple_columns' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_strategies/test_sort_by_column.py::test_sort_multiple_columns' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_sort_multiple_columns>
            nextitem: <Function test_sort_with_na_first>
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='sample_df' scope='function' baseid='pandaflow/tests/test_strategies/test_sort_by_column.py'>
              request: <SubRequest 'sample_df' for <Function test_sort_multiple_columns>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_sort_multiple_columns>
            call: <CallInfo when='teardown' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_strategies/test_sort_by_column.py::test_sort_multiple_columns' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_strategies/test_sort_by_column.py::test_sort_multiple_columns' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_strategies/test_sort_by_column.py::test_sort_multiple_columns' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: pandaflow/tests/test_strategies/test_sort_by_column.py::test_sort_multiple_columns
            location: ('pandaflow/tests/test_strategies/test_sort_by_column.py', 25, 'test_sort_multiple_columns')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_sort_with_na_first>
          nextitem: <Function test_sort_with_mismatched_ascending>
        pytest_runtest_logstart [hook]
            nodeid: pandaflow/tests/test_strategies/test_sort_by_column.py::test_sort_with_na_first
            location: ('pandaflow/tests/test_strategies/test_sort_by_column.py', 35, 'test_sort_with_na_first')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_sort_with_na_first>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='sample_df' scope='function' baseid='pandaflow/tests/test_strategies/test_sort_by_column.py'>
              request: <SubRequest 'sample_df' for <Function test_sort_with_na_first>>
          finish pytest_fixture_setup -->       name  score  age
0    Alice   85.0   30
1      Bob   92.0   25
2  Charlie   85.0   40
3     Dana    NaN   22 [hook]
        finish pytest_runtest_setup --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_sort_with_na_first>
            call: <CallInfo when='setup' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_strategies/test_sort_by_column.py::test_sort_with_na_first' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_strategies/test_sort_by_column.py::test_sort_with_na_first' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_strategies/test_sort_by_column.py::test_sort_with_na_first' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_sort_with_na_first>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_sort_with_na_first>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_sort_with_na_first>
            call: <CallInfo when='call' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_strategies/test_sort_by_column.py::test_sort_with_na_first' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_strategies/test_sort_by_column.py::test_sort_with_na_first' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_strategies/test_sort_by_column.py::test_sort_with_na_first' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_sort_with_na_first>
            nextitem: <Function test_sort_with_mismatched_ascending>
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='sample_df' scope='function' baseid='pandaflow/tests/test_strategies/test_sort_by_column.py'>
              request: <SubRequest 'sample_df' for <Function test_sort_with_na_first>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_sort_with_na_first>
            call: <CallInfo when='teardown' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_strategies/test_sort_by_column.py::test_sort_with_na_first' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_strategies/test_sort_by_column.py::test_sort_with_na_first' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_strategies/test_sort_by_column.py::test_sort_with_na_first' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: pandaflow/tests/test_strategies/test_sort_by_column.py::test_sort_with_na_first
            location: ('pandaflow/tests/test_strategies/test_sort_by_column.py', 35, 'test_sort_with_na_first')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_sort_with_mismatched_ascending>
          nextitem: <Function test_sort_with_missing_column>
        pytest_runtest_logstart [hook]
            nodeid: pandaflow/tests/test_strategies/test_sort_by_column.py::test_sort_with_mismatched_ascending
            location: ('pandaflow/tests/test_strategies/test_sort_by_column.py', 45, 'test_sort_with_mismatched_ascending')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_sort_with_mismatched_ascending>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='sample_df' scope='function' baseid='pandaflow/tests/test_strategies/test_sort_by_column.py'>
              request: <SubRequest 'sample_df' for <Function test_sort_with_mismatched_ascending>>
          finish pytest_fixture_setup -->       name  score  age
0    Alice   85.0   30
1      Bob   92.0   25
2  Charlie   85.0   40
3     Dana    NaN   22 [hook]
        finish pytest_runtest_setup --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_sort_with_mismatched_ascending>
            call: <CallInfo when='setup' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_strategies/test_sort_by_column.py::test_sort_with_mismatched_ascending' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_strategies/test_sort_by_column.py::test_sort_with_mismatched_ascending' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_strategies/test_sort_by_column.py::test_sort_with_mismatched_ascending' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_sort_with_mismatched_ascending>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_sort_with_mismatched_ascending>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_sort_with_mismatched_ascending>
            call: <CallInfo when='call' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_strategies/test_sort_by_column.py::test_sort_with_mismatched_ascending' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_strategies/test_sort_by_column.py::test_sort_with_mismatched_ascending' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_strategies/test_sort_by_column.py::test_sort_with_mismatched_ascending' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_sort_with_mismatched_ascending>
            nextitem: <Function test_sort_with_missing_column>
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='sample_df' scope='function' baseid='pandaflow/tests/test_strategies/test_sort_by_column.py'>
              request: <SubRequest 'sample_df' for <Function test_sort_with_mismatched_ascending>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_sort_with_mismatched_ascending>
            call: <CallInfo when='teardown' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_strategies/test_sort_by_column.py::test_sort_with_mismatched_ascending' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_strategies/test_sort_by_column.py::test_sort_with_mismatched_ascending' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_strategies/test_sort_by_column.py::test_sort_with_mismatched_ascending' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: pandaflow/tests/test_strategies/test_sort_by_column.py::test_sort_with_mismatched_ascending
            location: ('pandaflow/tests/test_strategies/test_sort_by_column.py', 45, 'test_sort_with_mismatched_ascending')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_sort_with_missing_column>
          nextitem: <Function test_sort_empty_columns>
        pytest_runtest_logstart [hook]
            nodeid: pandaflow/tests/test_strategies/test_sort_by_column.py::test_sort_with_missing_column
            location: ('pandaflow/tests/test_strategies/test_sort_by_column.py', 55, 'test_sort_with_missing_column')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_sort_with_missing_column>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='sample_df' scope='function' baseid='pandaflow/tests/test_strategies/test_sort_by_column.py'>
              request: <SubRequest 'sample_df' for <Function test_sort_with_missing_column>>
          finish pytest_fixture_setup -->       name  score  age
0    Alice   85.0   30
1      Bob   92.0   25
2  Charlie   85.0   40
3     Dana    NaN   22 [hook]
        finish pytest_runtest_setup --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_sort_with_missing_column>
            call: <CallInfo when='setup' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_strategies/test_sort_by_column.py::test_sort_with_missing_column' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_strategies/test_sort_by_column.py::test_sort_with_missing_column' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_strategies/test_sort_by_column.py::test_sort_with_missing_column' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_sort_with_missing_column>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_sort_with_missing_column>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_sort_with_missing_column>
            call: <CallInfo when='call' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_strategies/test_sort_by_column.py::test_sort_with_missing_column' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_strategies/test_sort_by_column.py::test_sort_with_missing_column' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_strategies/test_sort_by_column.py::test_sort_with_missing_column' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_sort_with_missing_column>
            nextitem: <Function test_sort_empty_columns>
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='sample_df' scope='function' baseid='pandaflow/tests/test_strategies/test_sort_by_column.py'>
              request: <SubRequest 'sample_df' for <Function test_sort_with_missing_column>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_sort_with_missing_column>
            call: <CallInfo when='teardown' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_strategies/test_sort_by_column.py::test_sort_with_missing_column' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_strategies/test_sort_by_column.py::test_sort_with_missing_column' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_strategies/test_sort_by_column.py::test_sort_with_missing_column' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: pandaflow/tests/test_strategies/test_sort_by_column.py::test_sort_with_missing_column
            location: ('pandaflow/tests/test_strategies/test_sort_by_column.py', 55, 'test_sort_with_missing_column')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_sort_empty_columns>
          nextitem: <Function test_sort_default_ascending>
        pytest_runtest_logstart [hook]
            nodeid: pandaflow/tests/test_strategies/test_sort_by_column.py::test_sort_empty_columns
            location: ('pandaflow/tests/test_strategies/test_sort_by_column.py', 64, 'test_sort_empty_columns')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_sort_empty_columns>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='sample_df' scope='function' baseid='pandaflow/tests/test_strategies/test_sort_by_column.py'>
              request: <SubRequest 'sample_df' for <Function test_sort_empty_columns>>
          finish pytest_fixture_setup -->       name  score  age
0    Alice   85.0   30
1      Bob   92.0   25
2  Charlie   85.0   40
3     Dana    NaN   22 [hook]
        finish pytest_runtest_setup --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_sort_empty_columns>
            call: <CallInfo when='setup' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_strategies/test_sort_by_column.py::test_sort_empty_columns' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_strategies/test_sort_by_column.py::test_sort_empty_columns' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_strategies/test_sort_by_column.py::test_sort_empty_columns' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_sort_empty_columns>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_sort_empty_columns>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_sort_empty_columns>
            call: <CallInfo when='call' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_strategies/test_sort_by_column.py::test_sort_empty_columns' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_strategies/test_sort_by_column.py::test_sort_empty_columns' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_strategies/test_sort_by_column.py::test_sort_empty_columns' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_sort_empty_columns>
            nextitem: <Function test_sort_default_ascending>
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='sample_df' scope='function' baseid='pandaflow/tests/test_strategies/test_sort_by_column.py'>
              request: <SubRequest 'sample_df' for <Function test_sort_empty_columns>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_sort_empty_columns>
            call: <CallInfo when='teardown' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_strategies/test_sort_by_column.py::test_sort_empty_columns' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_strategies/test_sort_by_column.py::test_sort_empty_columns' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_strategies/test_sort_by_column.py::test_sort_empty_columns' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: pandaflow/tests/test_strategies/test_sort_by_column.py::test_sort_empty_columns
            location: ('pandaflow/tests/test_strategies/test_sort_by_column.py', 64, 'test_sort_empty_columns')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_sort_default_ascending>
          nextitem: <Function test_validate_rule>
        pytest_runtest_logstart [hook]
            nodeid: pandaflow/tests/test_strategies/test_sort_by_column.py::test_sort_default_ascending
            location: ('pandaflow/tests/test_strategies/test_sort_by_column.py', 73, 'test_sort_default_ascending')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_sort_default_ascending>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='sample_df' scope='function' baseid='pandaflow/tests/test_strategies/test_sort_by_column.py'>
              request: <SubRequest 'sample_df' for <Function test_sort_default_ascending>>
          finish pytest_fixture_setup -->       name  score  age
0    Alice   85.0   30
1      Bob   92.0   25
2  Charlie   85.0   40
3     Dana    NaN   22 [hook]
        finish pytest_runtest_setup --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_sort_default_ascending>
            call: <CallInfo when='setup' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_strategies/test_sort_by_column.py::test_sort_default_ascending' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_strategies/test_sort_by_column.py::test_sort_default_ascending' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_strategies/test_sort_by_column.py::test_sort_default_ascending' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_sort_default_ascending>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_sort_default_ascending>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_sort_default_ascending>
            call: <CallInfo when='call' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_strategies/test_sort_by_column.py::test_sort_default_ascending' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_strategies/test_sort_by_column.py::test_sort_default_ascending' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_strategies/test_sort_by_column.py::test_sort_default_ascending' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_sort_default_ascending>
            nextitem: <Function test_validate_rule>
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='sample_df' scope='function' baseid='pandaflow/tests/test_strategies/test_sort_by_column.py'>
              request: <SubRequest 'sample_df' for <Function test_sort_default_ascending>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_sort_default_ascending>
            call: <CallInfo when='teardown' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_strategies/test_sort_by_column.py::test_sort_default_ascending' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_strategies/test_sort_by_column.py::test_sort_default_ascending' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_strategies/test_sort_by_column.py::test_sort_default_ascending' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: pandaflow/tests/test_strategies/test_sort_by_column.py::test_sort_default_ascending
            location: ('pandaflow/tests/test_strategies/test_sort_by_column.py', 73, 'test_sort_default_ascending')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_validate_rule>
          nextitem: <Function test_split_basic>
        pytest_runtest_logstart [hook]
            nodeid: pandaflow/tests/test_strategies/test_sort_by_column.py::test_validate_rule
            location: ('pandaflow/tests/test_strategies/test_sort_by_column.py', 82, 'test_validate_rule')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_validate_rule>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='sample_df' scope='function' baseid='pandaflow/tests/test_strategies/test_sort_by_column.py'>
              request: <SubRequest 'sample_df' for <Function test_validate_rule>>
          finish pytest_fixture_setup -->       name  score  age
0    Alice   85.0   30
1      Bob   92.0   25
2  Charlie   85.0   40
3     Dana    NaN   22 [hook]
        finish pytest_runtest_setup --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_validate_rule>
            call: <CallInfo when='setup' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_strategies/test_sort_by_column.py::test_validate_rule' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_strategies/test_sort_by_column.py::test_validate_rule' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_strategies/test_sort_by_column.py::test_validate_rule' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_validate_rule>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_validate_rule>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_validate_rule>
            call: <CallInfo when='call' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_strategies/test_sort_by_column.py::test_validate_rule' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_strategies/test_sort_by_column.py::test_validate_rule' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_strategies/test_sort_by_column.py::test_validate_rule' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_validate_rule>
            nextitem: <Function test_split_basic>
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='sample_df' scope='function' baseid='pandaflow/tests/test_strategies/test_sort_by_column.py'>
              request: <SubRequest 'sample_df' for <Function test_validate_rule>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_validate_rule>
            call: <CallInfo when='teardown' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_strategies/test_sort_by_column.py::test_validate_rule' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_strategies/test_sort_by_column.py::test_validate_rule' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_strategies/test_sort_by_column.py::test_validate_rule' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: pandaflow/tests/test_strategies/test_sort_by_column.py::test_validate_rule
            location: ('pandaflow/tests/test_strategies/test_sort_by_column.py', 82, 'test_validate_rule')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_split_basic>
          nextitem: <Function test_split_with_maxsplit>
        pytest_runtest_logstart [hook]
            nodeid: pandaflow/tests/test_strategies/test_split_column.py::test_split_basic
            location: ('pandaflow/tests/test_strategies/test_split_column.py', 12, 'test_split_basic')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_split_basic>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='sample_df' scope='function' baseid='pandaflow/tests/test_strategies/test_split_column.py'>
              request: <SubRequest 'sample_df' for <Function test_split_basic>>
          finish pytest_fixture_setup -->      full_name
0  Alice Smith
1    Bob Jones
2      Charlie
3         None [hook]
        finish pytest_runtest_setup --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_split_basic>
            call: <CallInfo when='setup' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_strategies/test_split_column.py::test_split_basic' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_strategies/test_split_column.py::test_split_basic' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_strategies/test_split_column.py::test_split_basic' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_split_basic>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_split_basic>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_split_basic>
            call: <CallInfo when='call' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_strategies/test_split_column.py::test_split_basic' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_strategies/test_split_column.py::test_split_basic' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_strategies/test_split_column.py::test_split_basic' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_split_basic>
            nextitem: <Function test_split_with_maxsplit>
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='sample_df' scope='function' baseid='pandaflow/tests/test_strategies/test_split_column.py'>
              request: <SubRequest 'sample_df' for <Function test_split_basic>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_split_basic>
            call: <CallInfo when='teardown' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_strategies/test_split_column.py::test_split_basic' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_strategies/test_split_column.py::test_split_basic' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_strategies/test_split_column.py::test_split_basic' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: pandaflow/tests/test_strategies/test_split_column.py::test_split_basic
            location: ('pandaflow/tests/test_strategies/test_split_column.py', 12, 'test_split_basic')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_split_with_maxsplit>
          nextitem: <Function test_split_drop_original>
        pytest_runtest_logstart [hook]
            nodeid: pandaflow/tests/test_strategies/test_split_column.py::test_split_with_maxsplit
            location: ('pandaflow/tests/test_strategies/test_split_column.py', 26, 'test_split_with_maxsplit')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_split_with_maxsplit>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='sample_df' scope='function' baseid='pandaflow/tests/test_strategies/test_split_column.py'>
              request: <SubRequest 'sample_df' for <Function test_split_with_maxsplit>>
          finish pytest_fixture_setup -->      full_name
0  Alice Smith
1    Bob Jones
2      Charlie
3         None [hook]
        finish pytest_runtest_setup --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_split_with_maxsplit>
            call: <CallInfo when='setup' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_strategies/test_split_column.py::test_split_with_maxsplit' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_strategies/test_split_column.py::test_split_with_maxsplit' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_strategies/test_split_column.py::test_split_with_maxsplit' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_split_with_maxsplit>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_split_with_maxsplit>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_split_with_maxsplit>
            call: <CallInfo when='call' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_strategies/test_split_column.py::test_split_with_maxsplit' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_strategies/test_split_column.py::test_split_with_maxsplit' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_strategies/test_split_column.py::test_split_with_maxsplit' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_split_with_maxsplit>
            nextitem: <Function test_split_drop_original>
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='sample_df' scope='function' baseid='pandaflow/tests/test_strategies/test_split_column.py'>
              request: <SubRequest 'sample_df' for <Function test_split_with_maxsplit>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_split_with_maxsplit>
            call: <CallInfo when='teardown' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_strategies/test_split_column.py::test_split_with_maxsplit' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_strategies/test_split_column.py::test_split_with_maxsplit' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_strategies/test_split_column.py::test_split_with_maxsplit' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: pandaflow/tests/test_strategies/test_split_column.py::test_split_with_maxsplit
            location: ('pandaflow/tests/test_strategies/test_split_column.py', 26, 'test_split_with_maxsplit')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_split_drop_original>
          nextitem: <Function test_split_column_missing>
        pytest_runtest_logstart [hook]
            nodeid: pandaflow/tests/test_strategies/test_split_column.py::test_split_drop_original
            location: ('pandaflow/tests/test_strategies/test_split_column.py', 40, 'test_split_drop_original')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_split_drop_original>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='sample_df' scope='function' baseid='pandaflow/tests/test_strategies/test_split_column.py'>
              request: <SubRequest 'sample_df' for <Function test_split_drop_original>>
          finish pytest_fixture_setup -->      full_name
0  Alice Smith
1    Bob Jones
2      Charlie
3         None [hook]
        finish pytest_runtest_setup --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_split_drop_original>
            call: <CallInfo when='setup' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_strategies/test_split_column.py::test_split_drop_original' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_strategies/test_split_column.py::test_split_drop_original' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_strategies/test_split_column.py::test_split_drop_original' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_split_drop_original>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_split_drop_original>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_split_drop_original>
            call: <CallInfo when='call' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_strategies/test_split_column.py::test_split_drop_original' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_strategies/test_split_column.py::test_split_drop_original' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_strategies/test_split_column.py::test_split_drop_original' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_split_drop_original>
            nextitem: <Function test_split_column_missing>
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='sample_df' scope='function' baseid='pandaflow/tests/test_strategies/test_split_column.py'>
              request: <SubRequest 'sample_df' for <Function test_split_drop_original>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_split_drop_original>
            call: <CallInfo when='teardown' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_strategies/test_split_column.py::test_split_drop_original' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_strategies/test_split_column.py::test_split_drop_original' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_strategies/test_split_column.py::test_split_drop_original' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: pandaflow/tests/test_strategies/test_split_column.py::test_split_drop_original
            location: ('pandaflow/tests/test_strategies/test_split_column.py', 40, 'test_split_drop_original')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_split_column_missing>
          nextitem: <Function test_split_empty_string>
        pytest_runtest_logstart [hook]
            nodeid: pandaflow/tests/test_strategies/test_split_column.py::test_split_column_missing
            location: ('pandaflow/tests/test_strategies/test_split_column.py', 51, 'test_split_column_missing')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_split_column_missing>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='sample_df' scope='function' baseid='pandaflow/tests/test_strategies/test_split_column.py'>
              request: <SubRequest 'sample_df' for <Function test_split_column_missing>>
          finish pytest_fixture_setup -->      full_name
0  Alice Smith
1    Bob Jones
2      Charlie
3         None [hook]
        finish pytest_runtest_setup --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_split_column_missing>
            call: <CallInfo when='setup' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_strategies/test_split_column.py::test_split_column_missing' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_strategies/test_split_column.py::test_split_column_missing' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_strategies/test_split_column.py::test_split_column_missing' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_split_column_missing>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_split_column_missing>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_split_column_missing>
            call: <CallInfo when='call' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_strategies/test_split_column.py::test_split_column_missing' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_strategies/test_split_column.py::test_split_column_missing' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_strategies/test_split_column.py::test_split_column_missing' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_split_column_missing>
            nextitem: <Function test_split_empty_string>
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='sample_df' scope='function' baseid='pandaflow/tests/test_strategies/test_split_column.py'>
              request: <SubRequest 'sample_df' for <Function test_split_column_missing>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_split_column_missing>
            call: <CallInfo when='teardown' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_strategies/test_split_column.py::test_split_column_missing' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_strategies/test_split_column.py::test_split_column_missing' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_strategies/test_split_column.py::test_split_column_missing' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: pandaflow/tests/test_strategies/test_split_column.py::test_split_column_missing
            location: ('pandaflow/tests/test_strategies/test_split_column.py', 51, 'test_split_column_missing')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_split_empty_string>
          nextitem: <Function test_split_custom_prefix>
        pytest_runtest_logstart [hook]
            nodeid: pandaflow/tests/test_strategies/test_split_column.py::test_split_empty_string
            location: ('pandaflow/tests/test_strategies/test_split_column.py', 61, 'test_split_empty_string')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_split_empty_string>
        finish pytest_runtest_setup --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_split_empty_string>
            call: <CallInfo when='setup' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_strategies/test_split_column.py::test_split_empty_string' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_strategies/test_split_column.py::test_split_empty_string' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_strategies/test_split_column.py::test_split_empty_string' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_split_empty_string>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_split_empty_string>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_split_empty_string>
            call: <CallInfo when='call' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_strategies/test_split_column.py::test_split_empty_string' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_strategies/test_split_column.py::test_split_empty_string' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_strategies/test_split_column.py::test_split_empty_string' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_split_empty_string>
            nextitem: <Function test_split_custom_prefix>
        finish pytest_runtest_teardown --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_split_empty_string>
            call: <CallInfo when='teardown' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_strategies/test_split_column.py::test_split_empty_string' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_strategies/test_split_column.py::test_split_empty_string' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_strategies/test_split_column.py::test_split_empty_string' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: pandaflow/tests/test_strategies/test_split_column.py::test_split_empty_string
            location: ('pandaflow/tests/test_strategies/test_split_column.py', 61, 'test_split_empty_string')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_split_custom_prefix>
          nextitem: <Function test_uuid_column_created>
        pytest_runtest_logstart [hook]
            nodeid: pandaflow/tests/test_strategies/test_split_column.py::test_split_custom_prefix
            location: ('pandaflow/tests/test_strategies/test_split_column.py', 73, 'test_split_custom_prefix')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_split_custom_prefix>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='sample_df' scope='function' baseid='pandaflow/tests/test_strategies/test_split_column.py'>
              request: <SubRequest 'sample_df' for <Function test_split_custom_prefix>>
          finish pytest_fixture_setup -->      full_name
0  Alice Smith
1    Bob Jones
2      Charlie
3         None [hook]
        finish pytest_runtest_setup --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_split_custom_prefix>
            call: <CallInfo when='setup' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_strategies/test_split_column.py::test_split_custom_prefix' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_strategies/test_split_column.py::test_split_custom_prefix' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_strategies/test_split_column.py::test_split_custom_prefix' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_split_custom_prefix>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_split_custom_prefix>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_split_custom_prefix>
            call: <CallInfo when='call' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_strategies/test_split_column.py::test_split_custom_prefix' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_strategies/test_split_column.py::test_split_custom_prefix' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_strategies/test_split_column.py::test_split_custom_prefix' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_split_custom_prefix>
            nextitem: <Function test_uuid_column_created>
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='sample_df' scope='function' baseid='pandaflow/tests/test_strategies/test_split_column.py'>
              request: <SubRequest 'sample_df' for <Function test_split_custom_prefix>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_split_custom_prefix>
            call: <CallInfo when='teardown' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_strategies/test_split_column.py::test_split_custom_prefix' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_strategies/test_split_column.py::test_split_custom_prefix' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_strategies/test_split_column.py::test_split_custom_prefix' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: pandaflow/tests/test_strategies/test_split_column.py::test_split_custom_prefix
            location: ('pandaflow/tests/test_strategies/test_split_column.py', 73, 'test_split_custom_prefix')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_uuid_column_created>
          nextitem: <Function test_uuid_values_are_unique>
        pytest_runtest_logstart [hook]
            nodeid: pandaflow/tests/test_strategies/test_uuid.py::test_uuid_column_created
            location: ('pandaflow/tests/test_strategies/test_uuid.py', 16, 'test_uuid_column_created')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_uuid_column_created>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='strategy' scope='function' baseid='pandaflow/tests/test_strategies/test_uuid.py'>
              request: <SubRequest 'strategy' for <Function test_uuid_column_created>>
          finish pytest_fixture_setup --> <pandaflow.strategies.uuid.UUIDStrategy object at 0x75015e20a120> [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='sample_df' scope='function' baseid='pandaflow/tests/test_strategies/test_uuid.py'>
              request: <SubRequest 'sample_df' for <Function test_uuid_column_created>>
          finish pytest_fixture_setup -->       name
0    Alice
1      Bob
2  Charlie [hook]
        finish pytest_runtest_setup --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_uuid_column_created>
            call: <CallInfo when='setup' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_strategies/test_uuid.py::test_uuid_column_created' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_strategies/test_uuid.py::test_uuid_column_created' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_strategies/test_uuid.py::test_uuid_column_created' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_uuid_column_created>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_uuid_column_created>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_uuid_column_created>
            call: <CallInfo when='call' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_strategies/test_uuid.py::test_uuid_column_created' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_strategies/test_uuid.py::test_uuid_column_created' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_strategies/test_uuid.py::test_uuid_column_created' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_uuid_column_created>
            nextitem: <Function test_uuid_values_are_unique>
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='sample_df' scope='function' baseid='pandaflow/tests/test_strategies/test_uuid.py'>
              request: <SubRequest 'sample_df' for <Function test_uuid_column_created>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='strategy' scope='function' baseid='pandaflow/tests/test_strategies/test_uuid.py'>
              request: <SubRequest 'strategy' for <Function test_uuid_column_created>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_uuid_column_created>
            call: <CallInfo when='teardown' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_strategies/test_uuid.py::test_uuid_column_created' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_strategies/test_uuid.py::test_uuid_column_created' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_strategies/test_uuid.py::test_uuid_column_created' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: pandaflow/tests/test_strategies/test_uuid.py::test_uuid_column_created
            location: ('pandaflow/tests/test_strategies/test_uuid.py', 16, 'test_uuid_column_created')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_uuid_values_are_unique>
          nextitem: <Function test_uuid_format>
        pytest_runtest_logstart [hook]
            nodeid: pandaflow/tests/test_strategies/test_uuid.py::test_uuid_values_are_unique
            location: ('pandaflow/tests/test_strategies/test_uuid.py', 23, 'test_uuid_values_are_unique')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_uuid_values_are_unique>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='strategy' scope='function' baseid='pandaflow/tests/test_strategies/test_uuid.py'>
              request: <SubRequest 'strategy' for <Function test_uuid_values_are_unique>>
          finish pytest_fixture_setup --> <pandaflow.strategies.uuid.UUIDStrategy object at 0x75015e226990> [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='sample_df' scope='function' baseid='pandaflow/tests/test_strategies/test_uuid.py'>
              request: <SubRequest 'sample_df' for <Function test_uuid_values_are_unique>>
          finish pytest_fixture_setup -->       name
0    Alice
1      Bob
2  Charlie [hook]
        finish pytest_runtest_setup --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_uuid_values_are_unique>
            call: <CallInfo when='setup' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_strategies/test_uuid.py::test_uuid_values_are_unique' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_strategies/test_uuid.py::test_uuid_values_are_unique' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_strategies/test_uuid.py::test_uuid_values_are_unique' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_uuid_values_are_unique>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_uuid_values_are_unique>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_uuid_values_are_unique>
            call: <CallInfo when='call' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_strategies/test_uuid.py::test_uuid_values_are_unique' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_strategies/test_uuid.py::test_uuid_values_are_unique' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_strategies/test_uuid.py::test_uuid_values_are_unique' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_uuid_values_are_unique>
            nextitem: <Function test_uuid_format>
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='sample_df' scope='function' baseid='pandaflow/tests/test_strategies/test_uuid.py'>
              request: <SubRequest 'sample_df' for <Function test_uuid_values_are_unique>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='strategy' scope='function' baseid='pandaflow/tests/test_strategies/test_uuid.py'>
              request: <SubRequest 'strategy' for <Function test_uuid_values_are_unique>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_uuid_values_are_unique>
            call: <CallInfo when='teardown' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_strategies/test_uuid.py::test_uuid_values_are_unique' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_strategies/test_uuid.py::test_uuid_values_are_unique' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_strategies/test_uuid.py::test_uuid_values_are_unique' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: pandaflow/tests/test_strategies/test_uuid.py::test_uuid_values_are_unique
            location: ('pandaflow/tests/test_strategies/test_uuid.py', 23, 'test_uuid_values_are_unique')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_uuid_format>
          nextitem: <Function test_missing_field_key>
        pytest_runtest_logstart [hook]
            nodeid: pandaflow/tests/test_strategies/test_uuid.py::test_uuid_format
            location: ('pandaflow/tests/test_strategies/test_uuid.py', 30, 'test_uuid_format')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_uuid_format>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='strategy' scope='function' baseid='pandaflow/tests/test_strategies/test_uuid.py'>
              request: <SubRequest 'strategy' for <Function test_uuid_format>>
          finish pytest_fixture_setup --> <pandaflow.strategies.uuid.UUIDStrategy object at 0x75015e225590> [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='sample_df' scope='function' baseid='pandaflow/tests/test_strategies/test_uuid.py'>
              request: <SubRequest 'sample_df' for <Function test_uuid_format>>
          finish pytest_fixture_setup -->       name
0    Alice
1      Bob
2  Charlie [hook]
        finish pytest_runtest_setup --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_uuid_format>
            call: <CallInfo when='setup' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_strategies/test_uuid.py::test_uuid_format' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_strategies/test_uuid.py::test_uuid_format' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_strategies/test_uuid.py::test_uuid_format' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_uuid_format>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_uuid_format>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_uuid_format>
            call: <CallInfo when='call' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_strategies/test_uuid.py::test_uuid_format' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_strategies/test_uuid.py::test_uuid_format' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_strategies/test_uuid.py::test_uuid_format' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_uuid_format>
            nextitem: <Function test_missing_field_key>
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='sample_df' scope='function' baseid='pandaflow/tests/test_strategies/test_uuid.py'>
              request: <SubRequest 'sample_df' for <Function test_uuid_format>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='strategy' scope='function' baseid='pandaflow/tests/test_strategies/test_uuid.py'>
              request: <SubRequest 'strategy' for <Function test_uuid_format>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_uuid_format>
            call: <CallInfo when='teardown' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_strategies/test_uuid.py::test_uuid_format' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_strategies/test_uuid.py::test_uuid_format' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_strategies/test_uuid.py::test_uuid_format' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: pandaflow/tests/test_strategies/test_uuid.py::test_uuid_format
            location: ('pandaflow/tests/test_strategies/test_uuid.py', 30, 'test_uuid_format')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_missing_field_key>
          nextitem: <Function test_validate_rule_>
        pytest_runtest_logstart [hook]
            nodeid: pandaflow/tests/test_strategies/test_uuid.py::test_missing_field_key
            location: ('pandaflow/tests/test_strategies/test_uuid.py', 38, 'test_missing_field_key')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_missing_field_key>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='strategy' scope='function' baseid='pandaflow/tests/test_strategies/test_uuid.py'>
              request: <SubRequest 'strategy' for <Function test_missing_field_key>>
          finish pytest_fixture_setup --> <pandaflow.strategies.uuid.UUIDStrategy object at 0x75015e29c510> [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='sample_df' scope='function' baseid='pandaflow/tests/test_strategies/test_uuid.py'>
              request: <SubRequest 'sample_df' for <Function test_missing_field_key>>
          finish pytest_fixture_setup -->       name
0    Alice
1      Bob
2  Charlie [hook]
        finish pytest_runtest_setup --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_missing_field_key>
            call: <CallInfo when='setup' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_strategies/test_uuid.py::test_missing_field_key' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_strategies/test_uuid.py::test_missing_field_key' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_strategies/test_uuid.py::test_missing_field_key' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_missing_field_key>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_missing_field_key>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_missing_field_key>
            call: <CallInfo when='call' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_strategies/test_uuid.py::test_missing_field_key' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_strategies/test_uuid.py::test_missing_field_key' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_strategies/test_uuid.py::test_missing_field_key' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_missing_field_key>
            nextitem: <Function test_validate_rule_>
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='sample_df' scope='function' baseid='pandaflow/tests/test_strategies/test_uuid.py'>
              request: <SubRequest 'sample_df' for <Function test_missing_field_key>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='strategy' scope='function' baseid='pandaflow/tests/test_strategies/test_uuid.py'>
              request: <SubRequest 'strategy' for <Function test_missing_field_key>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_missing_field_key>
            call: <CallInfo when='teardown' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_strategies/test_uuid.py::test_missing_field_key' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_strategies/test_uuid.py::test_missing_field_key' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_strategies/test_uuid.py::test_missing_field_key' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: pandaflow/tests/test_strategies/test_uuid.py::test_missing_field_key
            location: ('pandaflow/tests/test_strategies/test_uuid.py', 38, 'test_missing_field_key')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_validate_rule_>
          nextitem: <Function test_parse_date_valid>
        pytest_runtest_logstart [hook]
            nodeid: pandaflow/tests/test_strategies/test_uuid.py::test_validate_rule_
            location: ('pandaflow/tests/test_strategies/test_uuid.py', 46, 'test_validate_rule_')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_validate_rule_>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='strategy' scope='function' baseid='pandaflow/tests/test_strategies/test_uuid.py'>
              request: <SubRequest 'strategy' for <Function test_validate_rule_>>
          finish pytest_fixture_setup --> <pandaflow.strategies.uuid.UUIDStrategy object at 0x75015e29ce90> [hook]
        finish pytest_runtest_setup --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_validate_rule_>
            call: <CallInfo when='setup' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_strategies/test_uuid.py::test_validate_rule_' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_strategies/test_uuid.py::test_validate_rule_' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_strategies/test_uuid.py::test_validate_rule_' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_validate_rule_>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_validate_rule_>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_validate_rule_>
            call: <CallInfo when='call' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_strategies/test_uuid.py::test_validate_rule_' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_strategies/test_uuid.py::test_validate_rule_' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_strategies/test_uuid.py::test_validate_rule_' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_validate_rule_>
            nextitem: <Function test_parse_date_valid>
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='strategy' scope='function' baseid='pandaflow/tests/test_strategies/test_uuid.py'>
              request: <SubRequest 'strategy' for <Function test_validate_rule_>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_validate_rule_>
            call: <CallInfo when='teardown' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_strategies/test_uuid.py::test_validate_rule_' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_strategies/test_uuid.py::test_validate_rule_' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_strategies/test_uuid.py::test_validate_rule_' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: pandaflow/tests/test_strategies/test_uuid.py::test_validate_rule_
            location: ('pandaflow/tests/test_strategies/test_uuid.py', 46, 'test_validate_rule_')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_parse_date_valid>
          nextitem: <Function test_parse_date_invalid>
        pytest_runtest_logstart [hook]
            nodeid: pandaflow/tests/test_utils.py::test_parse_date_valid
            location: ('pandaflow/tests/test_utils.py', 13, 'test_parse_date_valid')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_parse_date_valid>
        finish pytest_runtest_setup --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_parse_date_valid>
            call: <CallInfo when='setup' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_utils.py::test_parse_date_valid' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_utils.py::test_parse_date_valid' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_utils.py::test_parse_date_valid' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_parse_date_valid>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_parse_date_valid>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_parse_date_valid>
            call: <CallInfo when='call' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_utils.py::test_parse_date_valid' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_utils.py::test_parse_date_valid' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_utils.py::test_parse_date_valid' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_parse_date_valid>
            nextitem: <Function test_parse_date_invalid>
        finish pytest_runtest_teardown --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_parse_date_valid>
            call: <CallInfo when='teardown' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_utils.py::test_parse_date_valid' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_utils.py::test_parse_date_valid' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_utils.py::test_parse_date_valid' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: pandaflow/tests/test_utils.py::test_parse_date_valid
            location: ('pandaflow/tests/test_utils.py', 13, 'test_parse_date_valid')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_parse_date_invalid>
          nextitem: <Function test_parse_date_empty>
        pytest_runtest_logstart [hook]
            nodeid: pandaflow/tests/test_utils.py::test_parse_date_invalid
            location: ('pandaflow/tests/test_utils.py', 18, 'test_parse_date_invalid')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_parse_date_invalid>
        finish pytest_runtest_setup --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_parse_date_invalid>
            call: <CallInfo when='setup' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_utils.py::test_parse_date_invalid' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_utils.py::test_parse_date_invalid' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_utils.py::test_parse_date_invalid' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_parse_date_invalid>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_parse_date_invalid>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_parse_date_invalid>
            call: <CallInfo when='call' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_utils.py::test_parse_date_invalid' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_utils.py::test_parse_date_invalid' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_utils.py::test_parse_date_invalid' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_parse_date_invalid>
            nextitem: <Function test_parse_date_empty>
        finish pytest_runtest_teardown --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_parse_date_invalid>
            call: <CallInfo when='teardown' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_utils.py::test_parse_date_invalid' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_utils.py::test_parse_date_invalid' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_utils.py::test_parse_date_invalid' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: pandaflow/tests/test_utils.py::test_parse_date_invalid
            location: ('pandaflow/tests/test_utils.py', 18, 'test_parse_date_invalid')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_parse_date_empty>
          nextitem: <Function test_parse_date_with_locale>
        pytest_runtest_logstart [hook]
            nodeid: pandaflow/tests/test_utils.py::test_parse_date_empty
            location: ('pandaflow/tests/test_utils.py', 23, 'test_parse_date_empty')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_parse_date_empty>
        finish pytest_runtest_setup --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_parse_date_empty>
            call: <CallInfo when='setup' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_utils.py::test_parse_date_empty' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_utils.py::test_parse_date_empty' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_utils.py::test_parse_date_empty' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_parse_date_empty>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_parse_date_empty>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_parse_date_empty>
            call: <CallInfo when='call' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_utils.py::test_parse_date_empty' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_utils.py::test_parse_date_empty' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_utils.py::test_parse_date_empty' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_parse_date_empty>
            nextitem: <Function test_parse_date_with_locale>
        finish pytest_runtest_teardown --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_parse_date_empty>
            call: <CallInfo when='teardown' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_utils.py::test_parse_date_empty' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_utils.py::test_parse_date_empty' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_utils.py::test_parse_date_empty' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: pandaflow/tests/test_utils.py::test_parse_date_empty
            location: ('pandaflow/tests/test_utils.py', 23, 'test_parse_date_empty')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_parse_date_with_locale>
          nextitem: <Function test_parse_float_basic>
        pytest_runtest_logstart [hook]
            nodeid: pandaflow/tests/test_utils.py::test_parse_date_with_locale
            location: ('pandaflow/tests/test_utils.py', 28, 'test_parse_date_with_locale')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_parse_date_with_locale>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='monkeypatch' scope='function' baseid=''>
              request: <SubRequest 'monkeypatch' for <Function test_parse_date_with_locale>>
          finish pytest_fixture_setup --> <_pytest.monkeypatch.MonkeyPatch object at 0x75015e117c20> [hook]
        finish pytest_runtest_setup --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_parse_date_with_locale>
            call: <CallInfo when='setup' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_utils.py::test_parse_date_with_locale' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_utils.py::test_parse_date_with_locale' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_utils.py::test_parse_date_with_locale' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_parse_date_with_locale>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_parse_date_with_locale>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_parse_date_with_locale>
            call: <CallInfo when='call' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_utils.py::test_parse_date_with_locale' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_utils.py::test_parse_date_with_locale' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_utils.py::test_parse_date_with_locale' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_parse_date_with_locale>
            nextitem: <Function test_parse_float_basic>
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='monkeypatch' scope='function' baseid=''>
              request: <SubRequest 'monkeypatch' for <Function test_parse_date_with_locale>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_parse_date_with_locale>
            call: <CallInfo when='teardown' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_utils.py::test_parse_date_with_locale' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_utils.py::test_parse_date_with_locale' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_utils.py::test_parse_date_with_locale' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: pandaflow/tests/test_utils.py::test_parse_date_with_locale
            location: ('pandaflow/tests/test_utils.py', 28, 'test_parse_date_with_locale')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_parse_float_basic>
          nextitem: <Function test_parse_float_us_format>
        pytest_runtest_logstart [hook]
            nodeid: pandaflow/tests/test_utils.py::test_parse_float_basic
            location: ('pandaflow/tests/test_utils.py', 35, 'test_parse_float_basic')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_parse_float_basic>
        finish pytest_runtest_setup --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_parse_float_basic>
            call: <CallInfo when='setup' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_utils.py::test_parse_float_basic' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_utils.py::test_parse_float_basic' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_utils.py::test_parse_float_basic' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_parse_float_basic>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_parse_float_basic>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_parse_float_basic>
            call: <CallInfo when='call' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_utils.py::test_parse_float_basic' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_utils.py::test_parse_float_basic' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_utils.py::test_parse_float_basic' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_parse_float_basic>
            nextitem: <Function test_parse_float_us_format>
        finish pytest_runtest_teardown --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_parse_float_basic>
            call: <CallInfo when='teardown' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_utils.py::test_parse_float_basic' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_utils.py::test_parse_float_basic' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_utils.py::test_parse_float_basic' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: pandaflow/tests/test_utils.py::test_parse_float_basic
            location: ('pandaflow/tests/test_utils.py', 35, 'test_parse_float_basic')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_parse_float_us_format>
          nextitem: <Function test_parse_float_empty>
        pytest_runtest_logstart [hook]
            nodeid: pandaflow/tests/test_utils.py::test_parse_float_us_format
            location: ('pandaflow/tests/test_utils.py', 40, 'test_parse_float_us_format')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_parse_float_us_format>
        finish pytest_runtest_setup --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_parse_float_us_format>
            call: <CallInfo when='setup' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_utils.py::test_parse_float_us_format' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_utils.py::test_parse_float_us_format' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_utils.py::test_parse_float_us_format' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_parse_float_us_format>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_parse_float_us_format>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_parse_float_us_format>
            call: <CallInfo when='call' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_utils.py::test_parse_float_us_format' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_utils.py::test_parse_float_us_format' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_utils.py::test_parse_float_us_format' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_parse_float_us_format>
            nextitem: <Function test_parse_float_empty>
        finish pytest_runtest_teardown --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_parse_float_us_format>
            call: <CallInfo when='teardown' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_utils.py::test_parse_float_us_format' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_utils.py::test_parse_float_us_format' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_utils.py::test_parse_float_us_format' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: pandaflow/tests/test_utils.py::test_parse_float_us_format
            location: ('pandaflow/tests/test_utils.py', 40, 'test_parse_float_us_format')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_parse_float_empty>
          nextitem: <Function test_parse_float_invalid>
        pytest_runtest_logstart [hook]
            nodeid: pandaflow/tests/test_utils.py::test_parse_float_empty
            location: ('pandaflow/tests/test_utils.py', 45, 'test_parse_float_empty')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_parse_float_empty>
        finish pytest_runtest_setup --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_parse_float_empty>
            call: <CallInfo when='setup' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_utils.py::test_parse_float_empty' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_utils.py::test_parse_float_empty' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_utils.py::test_parse_float_empty' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_parse_float_empty>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_parse_float_empty>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_parse_float_empty>
            call: <CallInfo when='call' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_utils.py::test_parse_float_empty' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_utils.py::test_parse_float_empty' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_utils.py::test_parse_float_empty' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_parse_float_empty>
            nextitem: <Function test_parse_float_invalid>
        finish pytest_runtest_teardown --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_parse_float_empty>
            call: <CallInfo when='teardown' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_utils.py::test_parse_float_empty' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_utils.py::test_parse_float_empty' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_utils.py::test_parse_float_empty' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: pandaflow/tests/test_utils.py::test_parse_float_empty
            location: ('pandaflow/tests/test_utils.py', 45, 'test_parse_float_empty')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_parse_float_invalid>
          nextitem: <Function test_formatter_float_as_string>
        pytest_runtest_logstart [hook]
            nodeid: pandaflow/tests/test_utils.py::test_parse_float_invalid
            location: ('pandaflow/tests/test_utils.py', 50, 'test_parse_float_invalid')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_parse_float_invalid>
        finish pytest_runtest_setup --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_parse_float_invalid>
            call: <CallInfo when='setup' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_utils.py::test_parse_float_invalid' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_utils.py::test_parse_float_invalid' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_utils.py::test_parse_float_invalid' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_parse_float_invalid>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_parse_float_invalid>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_parse_float_invalid>
            call: <CallInfo when='call' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_utils.py::test_parse_float_invalid' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_utils.py::test_parse_float_invalid' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_utils.py::test_parse_float_invalid' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_parse_float_invalid>
            nextitem: <Function test_formatter_float_as_string>
        finish pytest_runtest_teardown --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_parse_float_invalid>
            call: <CallInfo when='teardown' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_utils.py::test_parse_float_invalid' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_utils.py::test_parse_float_invalid' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_utils.py::test_parse_float_invalid' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: pandaflow/tests/test_utils.py::test_parse_float_invalid
            location: ('pandaflow/tests/test_utils.py', 50, 'test_parse_float_invalid')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_formatter_float_as_string>
          nextitem: <Function test_formatter_float_as_number>
        pytest_runtest_logstart [hook]
            nodeid: pandaflow/tests/test_utils.py::test_formatter_float_as_string
            location: ('pandaflow/tests/test_utils.py', 56, 'test_formatter_float_as_string')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_formatter_float_as_string>
        finish pytest_runtest_setup --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_formatter_float_as_string>
            call: <CallInfo when='setup' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_utils.py::test_formatter_float_as_string' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_utils.py::test_formatter_float_as_string' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_utils.py::test_formatter_float_as_string' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_formatter_float_as_string>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_formatter_float_as_string>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_formatter_float_as_string>
            call: <CallInfo when='call' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_utils.py::test_formatter_float_as_string' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_utils.py::test_formatter_float_as_string' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_utils.py::test_formatter_float_as_string' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_formatter_float_as_string>
            nextitem: <Function test_formatter_float_as_number>
        finish pytest_runtest_teardown --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_formatter_float_as_string>
            call: <CallInfo when='teardown' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_utils.py::test_formatter_float_as_string' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_utils.py::test_formatter_float_as_string' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_utils.py::test_formatter_float_as_string' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: pandaflow/tests/test_utils.py::test_formatter_float_as_string
            location: ('pandaflow/tests/test_utils.py', 56, 'test_formatter_float_as_string')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_formatter_float_as_number>
          nextitem: <Function test_formatter_float_invalid_input>
        pytest_runtest_logstart [hook]
            nodeid: pandaflow/tests/test_utils.py::test_formatter_float_as_number
            location: ('pandaflow/tests/test_utils.py', 61, 'test_formatter_float_as_number')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_formatter_float_as_number>
        finish pytest_runtest_setup --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_formatter_float_as_number>
            call: <CallInfo when='setup' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_utils.py::test_formatter_float_as_number' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_utils.py::test_formatter_float_as_number' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_utils.py::test_formatter_float_as_number' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_formatter_float_as_number>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_formatter_float_as_number>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_formatter_float_as_number>
            call: <CallInfo when='call' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_utils.py::test_formatter_float_as_number' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_utils.py::test_formatter_float_as_number' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_utils.py::test_formatter_float_as_number' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_formatter_float_as_number>
            nextitem: <Function test_formatter_float_invalid_input>
        finish pytest_runtest_teardown --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_formatter_float_as_number>
            call: <CallInfo when='teardown' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_utils.py::test_formatter_float_as_number' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_utils.py::test_formatter_float_as_number' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_utils.py::test_formatter_float_as_number' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: pandaflow/tests/test_utils.py::test_formatter_float_as_number
            location: ('pandaflow/tests/test_utils.py', 61, 'test_formatter_float_as_number')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_formatter_float_invalid_input>
          nextitem: <Function test_formatter_date_string_input>
        pytest_runtest_logstart [hook]
            nodeid: pandaflow/tests/test_utils.py::test_formatter_float_invalid_input
            location: ('pandaflow/tests/test_utils.py', 66, 'test_formatter_float_invalid_input')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_formatter_float_invalid_input>
        finish pytest_runtest_setup --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_formatter_float_invalid_input>
            call: <CallInfo when='setup' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_utils.py::test_formatter_float_invalid_input' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_utils.py::test_formatter_float_invalid_input' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_utils.py::test_formatter_float_invalid_input' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_formatter_float_invalid_input>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_formatter_float_invalid_input>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_formatter_float_invalid_input>
            call: <CallInfo when='call' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_utils.py::test_formatter_float_invalid_input' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_utils.py::test_formatter_float_invalid_input' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_utils.py::test_formatter_float_invalid_input' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_formatter_float_invalid_input>
            nextitem: <Function test_formatter_date_string_input>
        finish pytest_runtest_teardown --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_formatter_float_invalid_input>
            call: <CallInfo when='teardown' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_utils.py::test_formatter_float_invalid_input' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_utils.py::test_formatter_float_invalid_input' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_utils.py::test_formatter_float_invalid_input' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: pandaflow/tests/test_utils.py::test_formatter_float_invalid_input
            location: ('pandaflow/tests/test_utils.py', 66, 'test_formatter_float_invalid_input')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_formatter_date_string_input>
          nextitem: <Function test_formatter_date_datetime_input>
        pytest_runtest_logstart [hook]
            nodeid: pandaflow/tests/test_utils.py::test_formatter_date_string_input
            location: ('pandaflow/tests/test_utils.py', 72, 'test_formatter_date_string_input')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_formatter_date_string_input>
        finish pytest_runtest_setup --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_formatter_date_string_input>
            call: <CallInfo when='setup' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_utils.py::test_formatter_date_string_input' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_utils.py::test_formatter_date_string_input' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_utils.py::test_formatter_date_string_input' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_formatter_date_string_input>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_formatter_date_string_input>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_formatter_date_string_input>
            call: <CallInfo when='call' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_utils.py::test_formatter_date_string_input' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_utils.py::test_formatter_date_string_input' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_utils.py::test_formatter_date_string_input' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_formatter_date_string_input>
            nextitem: <Function test_formatter_date_datetime_input>
        finish pytest_runtest_teardown --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_formatter_date_string_input>
            call: <CallInfo when='teardown' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_utils.py::test_formatter_date_string_input' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_utils.py::test_formatter_date_string_input' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_utils.py::test_formatter_date_string_input' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: pandaflow/tests/test_utils.py::test_formatter_date_string_input
            location: ('pandaflow/tests/test_utils.py', 72, 'test_formatter_date_string_input')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_formatter_date_datetime_input>
          nextitem: <Function test_formatter_date_pass_through>
        pytest_runtest_logstart [hook]
            nodeid: pandaflow/tests/test_utils.py::test_formatter_date_datetime_input
            location: ('pandaflow/tests/test_utils.py', 77, 'test_formatter_date_datetime_input')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_formatter_date_datetime_input>
        finish pytest_runtest_setup --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_formatter_date_datetime_input>
            call: <CallInfo when='setup' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_utils.py::test_formatter_date_datetime_input' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_utils.py::test_formatter_date_datetime_input' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_utils.py::test_formatter_date_datetime_input' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_formatter_date_datetime_input>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_formatter_date_datetime_input>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_formatter_date_datetime_input>
            call: <CallInfo when='call' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_utils.py::test_formatter_date_datetime_input' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_utils.py::test_formatter_date_datetime_input' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_utils.py::test_formatter_date_datetime_input' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_formatter_date_datetime_input>
            nextitem: <Function test_formatter_date_pass_through>
        finish pytest_runtest_teardown --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_formatter_date_datetime_input>
            call: <CallInfo when='teardown' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_utils.py::test_formatter_date_datetime_input' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_utils.py::test_formatter_date_datetime_input' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_utils.py::test_formatter_date_datetime_input' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: pandaflow/tests/test_utils.py::test_formatter_date_datetime_input
            location: ('pandaflow/tests/test_utils.py', 77, 'test_formatter_date_datetime_input')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_formatter_date_pass_through>
          nextitem: <Function test_formatter_date_invalid_string>
        pytest_runtest_logstart [hook]
            nodeid: pandaflow/tests/test_utils.py::test_formatter_date_pass_through
            location: ('pandaflow/tests/test_utils.py', 82, 'test_formatter_date_pass_through')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_formatter_date_pass_through>
        finish pytest_runtest_setup --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_formatter_date_pass_through>
            call: <CallInfo when='setup' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_utils.py::test_formatter_date_pass_through' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_utils.py::test_formatter_date_pass_through' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_utils.py::test_formatter_date_pass_through' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_formatter_date_pass_through>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_formatter_date_pass_through>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_formatter_date_pass_through>
            call: <CallInfo when='call' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_utils.py::test_formatter_date_pass_through' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_utils.py::test_formatter_date_pass_through' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_utils.py::test_formatter_date_pass_through' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_formatter_date_pass_through>
            nextitem: <Function test_formatter_date_invalid_string>
        finish pytest_runtest_teardown --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_formatter_date_pass_through>
            call: <CallInfo when='teardown' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_utils.py::test_formatter_date_pass_through' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_utils.py::test_formatter_date_pass_through' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_utils.py::test_formatter_date_pass_through' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: pandaflow/tests/test_utils.py::test_formatter_date_pass_through
            location: ('pandaflow/tests/test_utils.py', 82, 'test_formatter_date_pass_through')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_formatter_date_invalid_string>
          nextitem: <Function test_formatter_date_none>
        pytest_runtest_logstart [hook]
            nodeid: pandaflow/tests/test_utils.py::test_formatter_date_invalid_string
            location: ('pandaflow/tests/test_utils.py', 87, 'test_formatter_date_invalid_string')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_formatter_date_invalid_string>
        finish pytest_runtest_setup --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_formatter_date_invalid_string>
            call: <CallInfo when='setup' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_utils.py::test_formatter_date_invalid_string' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_utils.py::test_formatter_date_invalid_string' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_utils.py::test_formatter_date_invalid_string' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_formatter_date_invalid_string>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_formatter_date_invalid_string>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_formatter_date_invalid_string>
            call: <CallInfo when='call' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_utils.py::test_formatter_date_invalid_string' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_utils.py::test_formatter_date_invalid_string' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_utils.py::test_formatter_date_invalid_string' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_formatter_date_invalid_string>
            nextitem: <Function test_formatter_date_none>
        finish pytest_runtest_teardown --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_formatter_date_invalid_string>
            call: <CallInfo when='teardown' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_utils.py::test_formatter_date_invalid_string' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_utils.py::test_formatter_date_invalid_string' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_utils.py::test_formatter_date_invalid_string' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: pandaflow/tests/test_utils.py::test_formatter_date_invalid_string
            location: ('pandaflow/tests/test_utils.py', 87, 'test_formatter_date_invalid_string')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_formatter_date_none>
          nextitem: <Function test_get_input_parser_known>
        pytest_runtest_logstart [hook]
            nodeid: pandaflow/tests/test_utils.py::test_formatter_date_none
            location: ('pandaflow/tests/test_utils.py', 93, 'test_formatter_date_none')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_formatter_date_none>
        finish pytest_runtest_setup --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_formatter_date_none>
            call: <CallInfo when='setup' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_utils.py::test_formatter_date_none' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_utils.py::test_formatter_date_none' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_utils.py::test_formatter_date_none' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_formatter_date_none>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_formatter_date_none>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_formatter_date_none>
            call: <CallInfo when='call' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_utils.py::test_formatter_date_none' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_utils.py::test_formatter_date_none' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_utils.py::test_formatter_date_none' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_formatter_date_none>
            nextitem: <Function test_get_input_parser_known>
        finish pytest_runtest_teardown --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_formatter_date_none>
            call: <CallInfo when='teardown' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_utils.py::test_formatter_date_none' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_utils.py::test_formatter_date_none' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_utils.py::test_formatter_date_none' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: pandaflow/tests/test_utils.py::test_formatter_date_none
            location: ('pandaflow/tests/test_utils.py', 93, 'test_formatter_date_none')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_get_input_parser_known>
          nextitem: <Function test_get_input_parser_none>
        pytest_runtest_logstart [hook]
            nodeid: pandaflow/tests/test_utils.py::test_get_input_parser_known
            location: ('pandaflow/tests/test_utils.py', 99, 'test_get_input_parser_known')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_get_input_parser_known>
        finish pytest_runtest_setup --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_get_input_parser_known>
            call: <CallInfo when='setup' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_utils.py::test_get_input_parser_known' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_utils.py::test_get_input_parser_known' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_utils.py::test_get_input_parser_known' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_get_input_parser_known>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_get_input_parser_known>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_get_input_parser_known>
            call: <CallInfo when='call' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_utils.py::test_get_input_parser_known' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_utils.py::test_get_input_parser_known' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_utils.py::test_get_input_parser_known' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_get_input_parser_known>
            nextitem: <Function test_get_input_parser_none>
        finish pytest_runtest_teardown --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_get_input_parser_known>
            call: <CallInfo when='teardown' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_utils.py::test_get_input_parser_known' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_utils.py::test_get_input_parser_known' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_utils.py::test_get_input_parser_known' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: pandaflow/tests/test_utils.py::test_get_input_parser_known
            location: ('pandaflow/tests/test_utils.py', 99, 'test_get_input_parser_known')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_get_input_parser_none>
          nextitem: <Function test_get_input_parser_unknown>
        pytest_runtest_logstart [hook]
            nodeid: pandaflow/tests/test_utils.py::test_get_input_parser_none
            location: ('pandaflow/tests/test_utils.py', 104, 'test_get_input_parser_none')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_get_input_parser_none>
        finish pytest_runtest_setup --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_get_input_parser_none>
            call: <CallInfo when='setup' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_utils.py::test_get_input_parser_none' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_utils.py::test_get_input_parser_none' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_utils.py::test_get_input_parser_none' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_get_input_parser_none>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_get_input_parser_none>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_get_input_parser_none>
            call: <CallInfo when='call' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_utils.py::test_get_input_parser_none' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_utils.py::test_get_input_parser_none' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_utils.py::test_get_input_parser_none' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_get_input_parser_none>
            nextitem: <Function test_get_input_parser_unknown>
        finish pytest_runtest_teardown --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_get_input_parser_none>
            call: <CallInfo when='teardown' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_utils.py::test_get_input_parser_none' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_utils.py::test_get_input_parser_none' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_utils.py::test_get_input_parser_none' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: pandaflow/tests/test_utils.py::test_get_input_parser_none
            location: ('pandaflow/tests/test_utils.py', 104, 'test_get_input_parser_none')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_get_input_parser_unknown>
          nextitem: <Function test_get_output_formatter_known>
        pytest_runtest_logstart [hook]
            nodeid: pandaflow/tests/test_utils.py::test_get_input_parser_unknown
            location: ('pandaflow/tests/test_utils.py', 109, 'test_get_input_parser_unknown')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_get_input_parser_unknown>
        finish pytest_runtest_setup --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_get_input_parser_unknown>
            call: <CallInfo when='setup' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_utils.py::test_get_input_parser_unknown' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_utils.py::test_get_input_parser_unknown' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_utils.py::test_get_input_parser_unknown' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_get_input_parser_unknown>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_get_input_parser_unknown>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_get_input_parser_unknown>
            call: <CallInfo when='call' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_utils.py::test_get_input_parser_unknown' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_utils.py::test_get_input_parser_unknown' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_utils.py::test_get_input_parser_unknown' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_get_input_parser_unknown>
            nextitem: <Function test_get_output_formatter_known>
        finish pytest_runtest_teardown --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_get_input_parser_unknown>
            call: <CallInfo when='teardown' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_utils.py::test_get_input_parser_unknown' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_utils.py::test_get_input_parser_unknown' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_utils.py::test_get_input_parser_unknown' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: pandaflow/tests/test_utils.py::test_get_input_parser_unknown
            location: ('pandaflow/tests/test_utils.py', 109, 'test_get_input_parser_unknown')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_get_output_formatter_known>
          nextitem: <Function test_get_output_formatter_none>
        pytest_runtest_logstart [hook]
            nodeid: pandaflow/tests/test_utils.py::test_get_output_formatter_known
            location: ('pandaflow/tests/test_utils.py', 115, 'test_get_output_formatter_known')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_get_output_formatter_known>
        finish pytest_runtest_setup --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_get_output_formatter_known>
            call: <CallInfo when='setup' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_utils.py::test_get_output_formatter_known' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_utils.py::test_get_output_formatter_known' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_utils.py::test_get_output_formatter_known' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_get_output_formatter_known>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_get_output_formatter_known>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_get_output_formatter_known>
            call: <CallInfo when='call' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_utils.py::test_get_output_formatter_known' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_utils.py::test_get_output_formatter_known' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_utils.py::test_get_output_formatter_known' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_get_output_formatter_known>
            nextitem: <Function test_get_output_formatter_none>
        finish pytest_runtest_teardown --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_get_output_formatter_known>
            call: <CallInfo when='teardown' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_utils.py::test_get_output_formatter_known' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_utils.py::test_get_output_formatter_known' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_utils.py::test_get_output_formatter_known' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: pandaflow/tests/test_utils.py::test_get_output_formatter_known
            location: ('pandaflow/tests/test_utils.py', 115, 'test_get_output_formatter_known')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_get_output_formatter_none>
          nextitem: <Function test_get_output_formatter_unknown>
        pytest_runtest_logstart [hook]
            nodeid: pandaflow/tests/test_utils.py::test_get_output_formatter_none
            location: ('pandaflow/tests/test_utils.py', 120, 'test_get_output_formatter_none')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_get_output_formatter_none>
        finish pytest_runtest_setup --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_get_output_formatter_none>
            call: <CallInfo when='setup' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_utils.py::test_get_output_formatter_none' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_utils.py::test_get_output_formatter_none' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_utils.py::test_get_output_formatter_none' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_get_output_formatter_none>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_get_output_formatter_none>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_get_output_formatter_none>
            call: <CallInfo when='call' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_utils.py::test_get_output_formatter_none' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_utils.py::test_get_output_formatter_none' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_utils.py::test_get_output_formatter_none' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_get_output_formatter_none>
            nextitem: <Function test_get_output_formatter_unknown>
        finish pytest_runtest_teardown --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_get_output_formatter_none>
            call: <CallInfo when='teardown' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_utils.py::test_get_output_formatter_none' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_utils.py::test_get_output_formatter_none' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_utils.py::test_get_output_formatter_none' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: pandaflow/tests/test_utils.py::test_get_output_formatter_none
            location: ('pandaflow/tests/test_utils.py', 120, 'test_get_output_formatter_none')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_get_output_formatter_unknown>
          nextitem: None
        pytest_runtest_logstart [hook]
            nodeid: pandaflow/tests/test_utils.py::test_get_output_formatter_unknown
            location: ('pandaflow/tests/test_utils.py', 125, 'test_get_output_formatter_unknown')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_get_output_formatter_unknown>
        finish pytest_runtest_setup --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_get_output_formatter_unknown>
            call: <CallInfo when='setup' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_utils.py::test_get_output_formatter_unknown' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_utils.py::test_get_output_formatter_unknown' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_utils.py::test_get_output_formatter_unknown' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_get_output_formatter_unknown>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_get_output_formatter_unknown>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_get_output_formatter_unknown>
            call: <CallInfo when='call' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_utils.py::test_get_output_formatter_unknown' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_utils.py::test_get_output_formatter_unknown' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_utils.py::test_get_output_formatter_unknown' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_get_output_formatter_unknown>
            nextitem: None
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='tmp_path' scope='function' baseid=''>
              request: <SubRequest 'tmp_path' for <Function test_invalid_date_column_raises_error>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='tmp_path' scope='function' baseid=''>
              request: <SubRequest 'tmp_path' for <Function test_archive_by_year_creates_correct_structure>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='tmp_path' scope='function' baseid=''>
              request: <SubRequest 'tmp_path' for <Function test_archive_by_month_creates_correct_files>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='tmp_path' scope='function' baseid=''>
              request: <SubRequest 'tmp_path' for <Function test_run_skipped_files>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='tmp_path' scope='function' baseid=''>
              request: <SubRequest 'tmp_path' for <Function test_run_directory_to_file>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='tmp_path' scope='function' baseid=''>
              request: <SubRequest 'tmp_path' for <Function test_run_single_file_to_stdout>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='tmp_path' scope='function' baseid=''>
              request: <SubRequest 'tmp_path' for <Function test_duplicates_missing_column>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='tmp_path' scope='function' baseid=''>
              request: <SubRequest 'tmp_path' for <Function test_duplicates_none_found>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='tmp_path' scope='function' baseid=''>
              request: <SubRequest 'tmp_path' for <Function test_duplicates_found>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='tmp_path' scope='function' baseid=''>
              request: <SubRequest 'tmp_path' for <Function test_check_command_invalid_strategy>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='tmp_path' scope='function' baseid=''>
              request: <SubRequest 'tmp_path' for <Function test_check_command_valid>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='tmp_path' scope='function' baseid=''>
              request: <SubRequest 'tmp_path' for <Function test_archive_command>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='tmp_path_factory' scope='session' baseid=''>
              request: <SubRequest 'tmp_path_factory' for <Function test_archive_command>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_get_output_formatter_unknown>
            call: <CallInfo when='teardown' result: None>
        finish pytest_runtest_makereport --> <TestReport 'pandaflow/tests/test_utils.py::test_get_output_formatter_unknown' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pandaflow/tests/test_utils.py::test_get_output_formatter_unknown' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pandaflow/tests/test_utils.py::test_get_output_formatter_unknown' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x750178ba7b60>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: pandaflow/tests/test_utils.py::test_get_output_formatter_unknown
            location: ('pandaflow/tests/test_utils.py', 125, 'test_get_output_formatter_unknown')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
    finish pytest_runtestloop --> True [hook]
    pytest_sessionfinish [hook]
        session: <Session  exitstatus=<ExitCode.TESTS_FAILED: 1> testsfailed=1 testscollected=143>
        exitstatus: 1
      pytest_terminal_summary [hook]
          terminalreporter: <_pytest.terminal.TerminalReporter object at 0x7501781e70e0>
          exitstatus: 1
          config: <_pytest.config.Config object at 0x750178ba7b60>
      finish pytest_terminal_summary --> [] [hook]
    finish pytest_sessionfinish --> [] [hook]
    pytest_unconfigure [hook]
        config: <_pytest.config.Config object at 0x750178ba7b60>
    finish pytest_unconfigure --> [] [hook]
